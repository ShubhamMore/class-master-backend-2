{"version":3,"sources":["webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score.component.html","webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score-routing.module.ts","webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score.component.ts","webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score.module.ts"],"names":["routes","path","component","AddTestScoreComponent","branchService","toastrService","courseService","batchService","router","examService","dateService","route","this","loading","branchId","getBranchId","getExamData","subscribe","exam","showToastr","back","examMarksForm","marks","getCategoryData","category","getCourseData","course","getBatchData","batch","getStudents","getStudentsForExam","_id","students","map","student","getStudentsScore","controls","forEach","addStudentScore","error","get","push","newStudentScore","name","validators","required","rollNumber","min","max","outOfMarks","number","Number","isInteger","markAllAsTouched","invalid","saveStudentsMarks","value","res","subject","mySubject","subjects","find","curSubject","navigate","relativeTo","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddTestScoreRoutingModule","forChild","AddTestScoreModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-9 col-sm-8\">\r\n        <h3>Exam Score</h3>\r\n      </div>\r\n      <div class=\"col-md-3 col-sm-4\">\r\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n          Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n\r\n  <nb-card-body>\r\n    <nb-card>\r\n      <nb-card-header>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 col-12\">\r\n            <span><strong>Exam Title: </strong>{{ exam.examTitle }}</span>\r\n            <br />\r\n            <span><strong>Date: </strong>{{ dateService.formatDate(exam.date) }}</span>\r\n            <br />\r\n            <span><strong>Time: </strong>{{ dateService.formatTime(exam.time) }}</span>\r\n            <br />\r\n            <span><strong>Duration: </strong>{{ exam.duration }} Min</span>\r\n          </div>\r\n          <div class=\"col-md-6 col-12\">\r\n            <span><strong>Category: </strong>{{ category.category }}</span>\r\n            <br />\r\n            <span><strong>Course: </strong>{{ course.basicDetails.courseName }}</span>\r\n            <br />\r\n            <span><strong>Batch: </strong>{{ batch.basicDetails.batchName }}</span>\r\n            <br />\r\n            <span><strong>Subject: </strong>{{ getSubject(exam.subject) }}</span>\r\n          </div>\r\n        </div>\r\n      </nb-card-header>\r\n      <nb-card-body>\r\n        <ng-container *ngIf=\"examMarksForm.get('marks')['controls'].length > 0; else noStudents\">\r\n          <form class=\"\" (submit)=\"saveMarks()\" [formGroup]=\"examMarksForm\">\r\n            <div class=\"row\">\r\n              <div class=\"col-12\">\r\n                <div class=\"table-responsive\">\r\n                  <table class=\"table\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Student Name</th>\r\n                        <th>Roll Number</th>\r\n                        <th>Marks</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <ng-container\r\n                        *ngFor=\"\r\n                          let studentScore of examMarksForm.get('marks')['controls'];\r\n                          let i = index\r\n                        \"\r\n                      >\r\n                        <tr [formGroup]=\"studentScore\">\r\n                          <td>{{ studentScore.value.name }}</td>\r\n                          <td>{{ studentScore.value.rollNumber }}</td>\r\n                          <td>\r\n                            <div class=\"form-control-group\">\r\n                              <input\r\n                                type=\"number\"\r\n                                nbInput\r\n                                fullWidth\r\n                                [id]=\"studentScore.student\"\r\n                                [name]=\"studentScore.student\"\r\n                                class=\"input-marks\"\r\n                                formControlName=\"marks\"\r\n                                placeholder=\"Marks of {{ studentScore.value.name }}\"\r\n                                min=\"0\"\r\n                                [max]=\"exam.outOfMarks\"\r\n                                [status]=\"\r\n                                  studentScore.get('marks').touched\r\n                                    ? studentScore.get('marks').invalid\r\n                                      ? 'danger'\r\n                                      : 'success'\r\n                                    : 'basic'\r\n                                \"\r\n                              />\r\n                              <ng-container\r\n                                *ngIf=\"\r\n                                  studentScore.get('marks').invalid &&\r\n                                  studentScore.get('marks').touched\r\n                                \"\r\n                              >\r\n                                <p\r\n                                  class=\"caption status-danger\"\r\n                                  *ngIf=\"studentScore.get('marks').errors?.required\"\r\n                                >\r\n                                  Enter valid Marks of {{ studentScore.value.name }}\r\n                                </p>\r\n                                <p\r\n                                  class=\"caption status-danger\"\r\n                                  *ngIf=\"studentScore.get('marks').errors?.min\"\r\n                                >\r\n                                  Minimum marks should be 0\r\n                                </p>\r\n                                <p\r\n                                  class=\"caption status-danger\"\r\n                                  *ngIf=\"studentScore.get('marks').errors?.max\"\r\n                                >\r\n                                  Maximum marks should be {{ exam.outOfMarks }}\r\n                                </p>\r\n                              </ng-container>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      </ng-container>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-12\">\r\n                <hr />\r\n              </div>\r\n\r\n              <div class=\"col-12 text-right\">\r\n                <button type=\"submit\" nbButton size=\"small\" status=\"primary\">\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </ng-container>\r\n        <ng-template #noStudents>\r\n          <p class=\"text-center pt-5 pb-5\">No Students Found</p>\r\n        </ng-template>\r\n      </nb-card-body>\r\n    </nb-card>\r\n    <ng-template #noStudentMarks>\r\n      <p class=\"text-center mt-5 mb-5\">\r\n        No Students Found\r\n      </p>\r\n    </ng-template>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddTestScoreComponent } from './add-test-score.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddTestScoreComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddTestScoreRoutingModule {}\n","import { FormGroup, FormArray, Validators, FormControl } from '@angular/forms';\nimport { BatchService } from './../../../../../../services/batch.service';\nimport { CourseService } from './../../../../../../services/course.service';\nimport { BatchModel } from './../../../../../../models/batch.model';\nimport { CategoryModel } from './../../../../../../models/branch.model';\nimport { SubjectModel, CourseModel } from './../../../../../../models/course.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { DateService } from './../../../../../../services/shared-services/date.service';\nimport { ExamService } from './../../../../../../services/exam.service';\nimport { ExamModel } from './../../../../../../models/exam.model';\nimport { Component, OnInit } from '@angular/core';\nimport { BranchService } from './../../../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\ninterface StudentScore {\n  name: string;\n  student: string;\n  rollNumber: string;\n  marks?: number;\n}\n\n@Component({\n  selector: 'ngx-add-test-score',\n  templateUrl: './add-test-score.component.html',\n  styleUrls: ['./add-test-score.component.scss'],\n})\nexport class AddTestScoreComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  exam: ExamModel;\n\n  category: CategoryModel;\n  course: CourseModel;\n  batch: BatchModel;\n\n  examMarksForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private router: Router,\n    private examService: ExamService,\n    public dateService: DateService,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.examService.getExamData().subscribe((exam: ExamModel) => {\n      this.exam = exam;\n    });\n\n    if (!this.exam) {\n      this.showToastr('top-right', 'danger', 'Exam Not Found');\n      this.back();\n      return;\n    }\n\n    this.examMarksForm = new FormGroup({\n      marks: new FormArray([]),\n    });\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.getStudents();\n  }\n\n  private getStudents() {\n    this.loading = true;\n    this.examService.getStudentsForExam(this.exam._id).subscribe(\n      (students: StudentScore[]) => {\n        students.map((student: any) => {\n          return (student.marks = student.marks ? student.marks : 0);\n        });\n\n        const examScore = this.getStudentsScore();\n        examScore.controls = [];\n\n        students.forEach((student: any) => {\n          this.addStudentScore(student);\n        });\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private getStudentsScore() {\n    return this.examMarksForm.get('marks') as FormArray;\n  }\n\n  private addStudentScore(student: StudentScore) {\n    const examScore = this.getStudentsScore();\n    examScore.push(this.newStudentScore(student));\n  }\n\n  private newStudentScore(student: StudentScore) {\n    return new FormGroup({\n      name: new FormControl(student.name, { validators: [Validators.required] }),\n      student: new FormControl(student.student, { validators: [Validators.required] }),\n      rollNumber: new FormControl(student.rollNumber, { validators: [Validators.required] }),\n      marks: new FormControl(student.marks ? student.marks : 0, {\n        validators: [Validators.required, Validators.min(0), Validators.max(this.exam.outOfMarks)],\n      }),\n    });\n  }\n\n  isNumber(number: any): boolean {\n    return Number.isInteger(number);\n  }\n\n  saveMarks() {\n    this.examMarksForm.markAllAsTouched();\n\n    if (this.examMarksForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Enter Valid Marks for All Students');\n      return;\n    }\n\n    const studentScore = this.examMarksForm.value.marks;\n\n    this.examService.saveStudentsMarks(this.exam._id, studentScore).subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', `Exam Marks Updated Successfully`);\n        this.back();\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  getSubject(subject: string) {\n    const mySubject = this.course.subjects.find(\n      (curSubject: SubjectModel) => curSubject._id === subject,\n    );\n\n    if (!mySubject) {\n      return '--';\n    }\n    return mySubject.subject;\n  }\n\n  back() {\n    this.router.navigate(['../manage'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbInputModule, NbButtonModule } from '@nebular/theme';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AddTestScoreComponent } from './add-test-score.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AddTestScoreRoutingModule } from './add-test-score-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [AddTestScoreComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AddTestScoreRoutingModule,\r\n    NbCardModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n})\r\nexport class AddTestScoreModule {}\r\n"]}