{"version":3,"sources":["webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions.component.html","webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions-routing.module.ts","webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions.component.ts","webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions.module.ts"],"names":["AddOnlineTestQuestionsComponent","AddOnlineTestQuestionsModule","AddOnlineTestQuestionsRoutingModule","routes","path","component","branchService","onlineExamQuestionService","onlineExamService","dateService","toastrService","router","route","this","loading","submit","branchId","getBranchId","getOnlineExamData","subscribe","onlineExam","mode","queryParams","param","onlineExamQuestionId","getOnlineExamQuestionId","showToastr","onlineExamQuestionForm","question","validators","required","answers","marks","eachQuestionMarks","atLeastOneCorrectAnswerValidator","bind","getOnlineExamQuestion","onlineExamQuestion","patchValue","get","controls","forEach","answer","addOption","err","back","generateOption","navigate","relativeTo","group","isCorrect","value","atLeastOneCorrectAnswerError","answerData","push","newAnswer","i","removeAt","stepper","previous","markAllAsTouched","invalid","next","_id","editOnlineExamQuestion","res","newOnlineExamQuestion","position","status","message","show","replaceUrl","deleteOnlineExamQuestionId","deleteOnlineExamQuestionData","submitOnlineExamQuestionForm","previousStep","saveOnlineExamQuestion","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-9\">\r\n        <h3>{{ onlineExam ? 'Edit' : 'Add' }} Online Exam Question</h3>\r\n      </div>\r\n      <div class=\"col-3\">\r\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n          Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n\r\n  <nb-card-body>\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\r\n          <nb-step [stepControl]=\"onlineExamQuestionForm\" label=\"Online Exam Details\">\r\n            <form [formGroup]=\"onlineExamQuestionForm\" (submit)=\"submitOnlineExamQuestionForm()\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <nb-card>\r\n                    <nb-card-header>\r\n                      <label class=\"label\" for=\"input-question\">Question:</label>\r\n                    </nb-card-header>\r\n                    <nb-card-body>\r\n                      <div class=\"form-control-group\">\r\n                        <textarea\r\n                          type=\"text\"\r\n                          nbInput\r\n                          id=\"input-question\"\r\n                          name=\"question\"\r\n                          rows=\"2\"\r\n                          formControlName=\"question\"\r\n                          placeholder=\"Question\"\r\n                          fullWidth\r\n                          [status]=\"\r\n                            onlineExamQuestionForm.get('question').touched\r\n                              ? onlineExamQuestionForm.get('question').invalid\r\n                                ? 'danger'\r\n                                : 'success'\r\n                              : 'basic'\r\n                          \"\r\n                        ></textarea>\r\n                        <ng-container\r\n                          *ngIf=\"\r\n                            onlineExamQuestionForm.get('question').invalid &&\r\n                            onlineExamQuestionForm.get('question').touched\r\n                          \"\r\n                        >\r\n                          <p\r\n                            class=\"caption status-danger\"\r\n                            *ngIf=\"onlineExamQuestionForm.get('question').errors?.required\"\r\n                          >\r\n                            Online Exam Question is required!\r\n                          </p>\r\n                        </ng-container>\r\n                      </div>\r\n                    </nb-card-body>\r\n                  </nb-card>\r\n                </div>\r\n\r\n                <div\r\n                  class=\"col-md-12\"\r\n                  *ngFor=\"\r\n                    let answer of onlineExamQuestionForm.get('answers')['controls'];\r\n                    let i = index\r\n                  \"\r\n                >\r\n                  <nb-card [formGroup]=\"answer\">\r\n                    <nb-card-header>\r\n                      <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                          <button\r\n                            class=\"float-right\"\r\n                            type=\"button\"\r\n                            nbButton\r\n                            size=\"small\"\r\n                            status=\"danger\"\r\n                            (click)=\"deleteOption(i)\"\r\n                            *ngIf=\"i !== 0 && i !== 1\"\r\n                          >\r\n                            <nb-icon icon=\"trash-outline\"></nb-icon>\r\n                          </button>\r\n                          <nb-checkbox\r\n                            [checked]=\"answer.get('isCorrect').value\"\r\n                            formControlName=\"isCorrect\"\r\n                          >\r\n                            Answer {{ i + 1 }}\r\n                          </nb-checkbox>\r\n                        </div>\r\n                      </div>\r\n                    </nb-card-header>\r\n                    <nb-card-body>\r\n                      <div class=\"form-control-group\">\r\n                        <textarea\r\n                          type=\"text\"\r\n                          nbInput\r\n                          rows=\"2\"\r\n                          id=\"input-answer-{{ i }}\"\r\n                          name=\"answer-{{ i }}\"\r\n                          formControlName=\"answer\"\r\n                          placeholder=\"Answer {{ i + 1 }}\"\r\n                          fullWidth\r\n                          [status]=\"\r\n                            answer.get('answer').touched\r\n                              ? answer.get('answer').invalid\r\n                                ? 'danger'\r\n                                : 'success'\r\n                              : 'basic'\r\n                          \"\r\n                        ></textarea>\r\n                        <ng-container\r\n                          *ngIf=\"answer.get('answer').invalid && answer.get('answer').touched\"\r\n                        >\r\n                          <p\r\n                            class=\"caption status-danger\"\r\n                            *ngIf=\"answer.get('answer').errors?.required\"\r\n                          >\r\n                            Answer {{ i + 1 }} is required!\r\n                          </p>\r\n                        </ng-container>\r\n                      </div>\r\n                    </nb-card-body>\r\n                  </nb-card>\r\n                </div>\r\n\r\n                <div class=\"col-md-12\">\r\n                  <button\r\n                    class=\"float-right\"\r\n                    type=\"button\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    status=\"primary\"\r\n                    (click)=\"generateOption()\"\r\n                  >\r\n                    Add Option\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-12\">\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    onlineExamQuestionForm.hasError('atLeastOneCorrectAnswerError') &&\r\n                    onlineExamQuestionForm.touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"\r\n                      onlineExamQuestionForm.hasError('atLeastOneCorrectAnswerError') &&\r\n                      onlineExamQuestionForm.touched\r\n                    \"\r\n                  >\r\n                    *Please Select at least One Correct Answer\r\n                  </p>\r\n                </ng-container>\r\n                <p><strong>*For correct answers, Tick the checkbox</strong></p>\r\n              </div>\r\n\r\n              <hr />\r\n              <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                  <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"basic\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </nb-step>\r\n\r\n          <nb-step label=\"Submit\">\r\n            <div class=\"step-container\">\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-bordered\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <th>Online Exam Question</th>\r\n                      <td>{{ onlineExamQuestionForm.value.question }}</td>\r\n                    </tr>\r\n                    <tr\r\n                      *ngFor=\"\r\n                        let answer of onlineExamQuestionForm.get('answers')['controls'];\r\n                        let i = index\r\n                      \"\r\n                    >\r\n                      <th>Answer {{ i + 1 }}</th>\r\n                      <td>\r\n                        <nb-icon\r\n                          [status]=\"answer.value.isCorrect ? 'success' : 'danger'\"\r\n                          [icon]=\"answer.value.isCorrect ? 'checkmark-outline' : 'close-outline'\"\r\n                        ></nb-icon>\r\n                        &nbsp;&nbsp;\r\n                        <span>{{ answer.value.answer }}</span>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n              <hr />\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6 text-left\">\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    (click)=\"previousStep()\"\r\n                    [disabled]=\"submit\"\r\n                  >\r\n                    <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                    <span>prev</span>\r\n                  </button>\r\n                </div>\r\n                <div class=\"col-md-6 text-right\">\r\n                  <button\r\n                    nbButton\r\n                    size=\"small\"\r\n                    (click)=\"saveOnlineExamQuestion()\"\r\n                    [disabled]=\"submit\"\r\n                    [nbSpinner]=\"submit\"\r\n                    nbSpinnerStatus=\"primary\"\r\n                    nbSpinnerSize=\"small\"\r\n                  >\r\n                    <span>Submit</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </nb-step>\r\n        </nb-stepper>\r\n      </div>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddOnlineTestQuestionsComponent } from './add-online-test-questions.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddOnlineTestQuestionsComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddOnlineTestQuestionsRoutingModule {}\n","import { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\nimport { DateService } from './../../../../../../services/shared-services/date.service';\r\nimport { OnlineExamQuestionService } from './../../../../../../services/online-exam-question.service';\r\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\r\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { OnlineExamService } from './../../../../../../services/online-exam.service';\r\nimport { OnlineExamModel } from './../../../../../../models/online-exam.model';\r\nimport { OnlineExamQuestionModel } from './../../../../../../models/online-exam-question.model';\r\nimport { BranchService } from './../../../../../../services/branch.service';\r\n\r\n@Component({\r\n  selector: 'ngx-add-online-test-questions',\r\n  templateUrl: './add-online-test-questions.component.html',\r\n  styleUrls: ['./add-online-test-questions.component.scss'],\r\n})\r\nexport class AddOnlineTestQuestionsComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  branchId: string;\r\n  onlineExam: OnlineExamModel;\r\n  onlineExamQuestion: OnlineExamQuestionModel;\r\n  onlineExamQuestionId: string;\r\n  onlineExamQuestionForm: FormGroup;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private onlineExamQuestionService: OnlineExamQuestionService,\r\n    private onlineExamService: OnlineExamService,\r\n    public dateService: DateService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.onlineExamService.getOnlineExamData().subscribe((onlineExam: OnlineExamModel) => {\r\n      if (!onlineExam) {\r\n        this.back();\r\n        return;\r\n      }\r\n\r\n      this.onlineExam = onlineExam;\r\n\r\n      let mode: string;\r\n\r\n      this.route.queryParams.subscribe((param: Params) => {\r\n        mode = param.mode;\r\n      });\r\n\r\n      this.onlineExamQuestionId = this.onlineExamQuestionService.getOnlineExamQuestionId();\r\n\r\n      if (mode && mode !== 'edit') {\r\n        this.showToastr('top-right', 'danger', 'Invalid Route');\r\n        return;\r\n      } else if (mode && !this.onlineExamQuestionId) {\r\n        this.showToastr('top-right', 'danger', 'Online Exam Question Not Found');\r\n        return;\r\n      }\r\n\r\n      this.onlineExamQuestionForm = new FormGroup(\r\n        {\r\n          question: new FormControl(null, { validators: [Validators.required] }),\r\n          answers: new FormArray([]),\r\n          marks: new FormControl(this.onlineExam.eachQuestionMarks, {\r\n            validators: [Validators.required],\r\n          }),\r\n        },\r\n        { validators: this.atLeastOneCorrectAnswerValidator.bind(this) },\r\n      );\r\n\r\n      if (mode && this.onlineExamQuestionId) {\r\n        this.onlineExamQuestionService.getOnlineExamQuestion(this.onlineExamQuestionId).subscribe(\r\n          (question: OnlineExamQuestionModel) => {\r\n            this.onlineExamQuestion = question;\r\n\r\n            this.onlineExamQuestionForm.patchValue({\r\n              question: this.onlineExamQuestion.question,\r\n              marks: this.onlineExamQuestion.marks,\r\n            });\r\n\r\n            const answers = this.onlineExamQuestionForm.get('answers') as FormArray;\r\n            answers.controls = [];\r\n            this.onlineExamQuestion.answers.forEach((answer) => {\r\n              this.addOption(answer);\r\n            });\r\n            this.loading = false;\r\n          },\r\n          (err: any) => {\r\n            this.showToastr('top-right', 'danger', err);\r\n            this.back();\r\n            this.loading = false;\r\n          },\r\n        );\r\n      } else {\r\n        this.generateOption();\r\n        this.generateOption();\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  atLeastOneCorrectAnswerValidator(group: FormGroup): { [s: string]: boolean } {\r\n    const answers = group.value.answers;\r\n    let isCorrect = false;\r\n    answers.forEach((answer: any) => {\r\n      if (answer.isCorrect) {\r\n        isCorrect = true;\r\n      }\r\n    });\r\n\r\n    if (!isCorrect) {\r\n      return { atLeastOneCorrectAnswerError: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  newAnswer(answerData: any) {\r\n    return new FormGroup({\r\n      answer: new FormControl(answerData.answer ? answerData.answer : null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      isCorrect: new FormControl(answerData.isCorrect, {\r\n        validators: [],\r\n      }),\r\n    });\r\n  }\r\n\r\n  addOption(answer: any) {\r\n    const answers = this.onlineExamQuestionForm.get('answers') as FormArray;\r\n    answers.push(this.newAnswer(answer));\r\n  }\r\n\r\n  generateOption() {\r\n    const answer = {\r\n      answer: '',\r\n      isCorrect: false,\r\n    };\r\n    this.addOption(answer);\r\n  }\r\n\r\n  deleteOption(i: number) {\r\n    if (i !== 0 && i !== 1) {\r\n      const answers = this.onlineExamQuestionForm.get('answers') as FormArray;\r\n      answers.removeAt(i);\r\n    }\r\n  }\r\n\r\n  previousStep() {\r\n    this.stepper.previous();\r\n  }\r\n\r\n  submitOnlineExamQuestionForm() {\r\n    this.onlineExamQuestionForm.markAllAsTouched();\r\n    if (this.onlineExamQuestionForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'All Online Exam Question are Required');\r\n      return;\r\n    }\r\n\r\n    this.stepper.next();\r\n  }\r\n\r\n  saveOnlineExamQuestion() {\r\n    this.onlineExamQuestionForm.markAllAsTouched();\r\n    if (this.onlineExamQuestionForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'All Online Exam Question Fields are Required');\r\n      return;\r\n    }\r\n\r\n    this.submit = true;\r\n\r\n    const onlineExamQuestion: any = this.onlineExamQuestionForm.value;\r\n    onlineExamQuestion.onlineExam = this.onlineExam._id;\r\n\r\n    if (!this.onlineExamQuestion) {\r\n      this.onlineExamQuestionService.newOnlineExamQuestion(onlineExamQuestion).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Question Added Successfully');\r\n          this.back();\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else {\r\n      onlineExamQuestion._id = this.onlineExamQuestion._id;\r\n      this.onlineExamQuestionService.editOnlineExamQuestion(onlineExamQuestion).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Question Added Successfully');\r\n          this.back();\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.onlineExamQuestionService.deleteOnlineExamQuestionId();\r\n    this.onlineExamQuestionService.deleteOnlineExamQuestionData();\r\n  }\r\n}\r\n","import { ReactiveFormsModule } from '@angular/forms';\nimport { AddOnlineTestQuestionsComponent } from './add-online-test-questions.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddOnlineTestQuestionsRoutingModule } from './add-online-test-questions-routing.module';\n\nimport {\n  NbInputModule,\n  NbButtonModule,\n  NbCardModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbSelectModule,\n  NbIconModule,\n  NbCheckboxModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [AddOnlineTestQuestionsComponent],\n  imports: [\n    CommonModule,\n    AddOnlineTestQuestionsRoutingModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCardModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbSelectModule,\n    NbIconModule,\n    NbCheckboxModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AddOnlineTestQuestionsModule {}\n"]}