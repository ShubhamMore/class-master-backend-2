{"version":3,"sources":["webpack:///src/app/services/shared-services/country.service.ts","webpack:///src/app/institute/manage-institute/add-institute/add-institute.component.html","webpack:///src/app/institute/manage-institute/add-institute/add-institute-routing.module.ts","webpack:///src/app/institute/manage-institute/add-institute/add-institute.component.ts","webpack:///src/app/institute/manage-institute/add-institute/add-institute.module.ts"],"names":["CountryService","this","country","states","name","state","find","curState","cities","AddInstituteComponent","AddInstituteRoutingModule","AddInstituteModule","routes","path","component","menuService","countryService","branchService","paymentService","toastrService","dialogService","router","route","queryParams","subscribe","param","mode","ngOnInit","loading","submit","hideMenu","paymentDetails","getPaymentDetails","branchId","getBranchId","showToastr","navigate","relativeTo","back","getStates","branchBasicDetailsForm","branchName","validators","required","email","phone","minLength","maxLength","branchAddressForm","city","address1","address2","pinCode","branchCategoriesForm","categories","getBranchForEditing","branch","patchValue","basicDetails","address","changeState","getCategories","controls","forEach","category","addCategory","err","generateCategory","get","categoryData","_id","toString","status","push","newCategory","i","removeAt","filter","toLowerCase","includes","of","pipe","map","filterState","filterCity","e","filteredStates","getStateFilteredOptions","filteredCities","getCityFilteredOptions","getCities","id","orderId","ReceiptId","activateBranch","amount","planType","packageType","receiptId","res","error","markAllAsTouched","invalid","stepper","next","order","receipt","deleteBranch","checkout","open","context","closeOnBackdropClick","closeOnEsc","onClose","onClosePayment","value","editBranch","addBranch","setBranchId","onCheckout","deleteBranchId","join","position","message","show","replaceUrl","deletePaymentDetails","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as country from '../../../assets/country.json';\n@Injectable({\n  providedIn: 'root',\n})\nexport class CountryService {\n  private country: any;\n\n  constructor() {\n    this.country = country;\n  }\n\n  getCountry() {\n    return this.country.default;\n  }\n\n  getStates() {\n    return this.country.default.states;\n  }\n\n  getCities(name: string) {\n    const state = this.country.default.states.find((curState: any) => curState.name === name);\n    if (state) {\n      return state.cities;\n    }\n    return [];\n  }\n}\n","<nb-card *ngIf=\"!loading\">\r\n  <nb-card-header>\r\n    <h4>\r\n      <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n        Back\r\n      </button>\r\n\r\n      {{ !branch ? 'Create New Branch' : 'Edit Branch' }}\r\n    </h4>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <nb-stepper #stepper [linear]=\"true\">\r\n      <nb-step [stepControl]=\"branchBasicDetailsForm\" label=\"Basic Details\">\r\n        <form\r\n          [formGroup]=\"branchBasicDetailsForm\"\r\n          (ngSubmit)=\"submitBasicDetails()\"\r\n          class=\"step-container\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-name\">Branch Name:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-name\"\r\n                  name=\"branchName\"\r\n                  placeholder=\"Branch name\"\r\n                  formControlName=\"branchName\"\r\n                  minlength=\"5\"\r\n                  maxlength=\"100\"\r\n                  autofocus\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchBasicDetailsForm.get('branchName').touched\r\n                      ? branchBasicDetailsForm.get('branchName').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchBasicDetailsForm.get('branchName').invalid &&\r\n                    branchBasicDetailsForm.get('branchName').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchBasicDetailsForm.get('branchName').errors?.required\"\r\n                  >\r\n                    Branch name is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchBasicDetailsForm.get('branchName').errors?.minlength\"\r\n                  >\r\n                    Branch name should contains minimum 5\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-email\">Email address:</label>\r\n                <input\r\n                  type=\"email\"\r\n                  nbInput\r\n                  id=\"input-email\"\r\n                  name=\"email\"\r\n                  formControlName=\"email\"\r\n                  placeholder=\"Email address\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchBasicDetailsForm.get('email').touched\r\n                      ? branchBasicDetailsForm.get('email').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchBasicDetailsForm.get('email').invalid &&\r\n                    branchBasicDetailsForm.get('email').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchBasicDetailsForm.get('email').errors?.required\"\r\n                  >\r\n                    Email is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchBasicDetailsForm.get('email').errors?.email\"\r\n                  >\r\n                    Email should be the real one!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-password\">Phone:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  pattern=\"\\d*\"\r\n                  nbInput\r\n                  id=\"input-phone\"\r\n                  name=\"phone\"\r\n                  formControlName=\"phone\"\r\n                  placeholder=\"phone\"\r\n                  minlength=\"10\"\r\n                  maxlength=\"10\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchBasicDetailsForm.get('phone').touched\r\n                      ? branchBasicDetailsForm.get('phone').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchBasicDetailsForm.get('phone').invalid &&\r\n                    branchBasicDetailsForm.get('phone').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchBasicDetailsForm.get('phone').errors?.required\"\r\n                  >\r\n                    Phone is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"\r\n                      branchBasicDetailsForm.get('phone').errors?.pattern ||\r\n                      branchBasicDetailsForm.get('phone').errors?.minlength\r\n                    \"\r\n                  >\r\n                    Phone should contain 10 digits\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step [stepControl]=\"branchAddressForm\" label=\"Address Details\">\r\n        <form [formGroup]=\"branchAddressForm\" (ngSubmit)=\"submitAddress()\" class=\"step-container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-address-1\">Address 1:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-address-1\"\r\n                  name=\"address1\"\r\n                  placeholder=\"Address 1\"\r\n                  formControlName=\"address1\"\r\n                  autofocus\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchAddressForm.get('address1').touched\r\n                      ? branchAddressForm.get('address1').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchAddressForm.get('address1').invalid &&\r\n                    branchAddressForm.get('address1').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchAddressForm.get('address1').errors?.required\"\r\n                  >\r\n                    Address 1 is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-address-2\">Address 2:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-address-2\"\r\n                  name=\"address2\"\r\n                  placeholder=\"Address 2\"\r\n                  formControlName=\"address2\"\r\n                  autofocus\r\n                  fullWidth\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-address-2\">State:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-address-2\"\r\n                  name=\"state\"\r\n                  placeholder=\"State\"\r\n                  formControlName=\"state\"\r\n                  autofocus\r\n                  fullWidth\r\n                  [nbAutocomplete]=\"autoState\"\r\n                  [status]=\"\r\n                    branchAddressForm.get('state').touched\r\n                      ? branchAddressForm.get('state').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (input)=\"onChangeStateInput($event.target.value)\"\r\n                />\r\n                <nb-autocomplete #autoState (selectedChange)=\"changeState($event)\">\r\n                  <nb-option *ngFor=\"let state of filteredStates | async\" [value]=\"state.name\">\r\n                    {{ state.name }}\r\n                  </nb-option>\r\n                </nb-autocomplete>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchAddressForm.get('state').invalid && branchAddressForm.get('state').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchAddressForm.get('state').errors?.required\"\r\n                  >\r\n                    State is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-city\">City:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-city\"\r\n                  name=\"city\"\r\n                  placeholder=\"city\"\r\n                  formControlName=\"city\"\r\n                  autofocus\r\n                  fullWidth\r\n                  [nbAutocomplete]=\"autoCity\"\r\n                  [status]=\"\r\n                    branchAddressForm.get('city').touched\r\n                      ? branchAddressForm.get('city').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (input)=\"onChangeCityInput($event.target.value)\"\r\n                />\r\n                <nb-autocomplete #autoCity>\r\n                  <nb-option *ngFor=\"let city of filteredCities | async\" [value]=\"city.name\">\r\n                    {{ city.name }}\r\n                  </nb-option>\r\n                </nb-autocomplete>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchAddressForm.get('city').invalid && branchAddressForm.get('city').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchAddressForm.get('city').errors?.required\"\r\n                  >\r\n                    City is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-pin-code\">Pin Code:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  pattern=\"\\d*\"\r\n                  nbInput\r\n                  id=\"input-pin-code\"\r\n                  name=\"pinCode\"\r\n                  placeholder=\"Pin Code\"\r\n                  formControlName=\"pinCode\"\r\n                  autofocus\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchAddressForm.get('pinCode').touched\r\n                      ? branchAddressForm.get('pinCode').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchAddressForm.get('pinCode').invalid &&\r\n                    branchAddressForm.get('pinCode').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchAddressForm.get('pinCode').errors?.required\"\r\n                  >\r\n                    Pin Code is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step [stepControl]=\"branchCategoriesForm\" label=\"Branch Categories\">\r\n        <form\r\n          [formGroup]=\"branchCategoriesForm\"\r\n          (ngSubmit)=\"submitCategories()\"\r\n          class=\"step-container\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-9 col-sm-8\">\r\n              <p>Click on following button to add more Categories</p>\r\n            </div>\r\n            <div class=\"col-md-3 col-sm-4 mb-3\">\r\n              <button type=\"button\" nbButton size=\"small\" fullWidth (click)=\"generateCategory()\">\r\n                Add Category\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div\r\n              class=\"col-md-6\"\r\n              *ngFor=\"\r\n                let category of branchCategoriesForm.get('categories')['controls'];\r\n                let i = index\r\n              \"\r\n            >\r\n              <div class=\"form-control-group\" [formGroup]=\"category\">\r\n                <label class=\"label\" for=\"input-category-{{ i }}\">Category {{ i + 1 }}:</label>\r\n\r\n                <nb-form-field>\r\n                  <input\r\n                    type=\"text\"\r\n                    nbInput\r\n                    id=\"input-category-{{ i }}\"\r\n                    name=\"category-{{ i }}\"\r\n                    placeholder=\"Category {{ i + 1 }}\"\r\n                    formControlName=\"category\"\r\n                    autofocus\r\n                    fullWidth\r\n                    [status]=\"\r\n                      category.get('category').touched\r\n                        ? category.get('category').invalid\r\n                          ? 'danger'\r\n                          : 'success'\r\n                        : 'basic'\r\n                    \"\r\n                  />\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    nbSuffix\r\n                    nbButton\r\n                    size=\"small\"\r\n                    ghost\r\n                    *ngIf=\"i !== 0\"\r\n                    (click)=\"deleteCategory(i)\"\r\n                  >\r\n                    <nb-icon\r\n                      nbTooltip=\"Remove Category {{ i + 1 }}\"\r\n                      icon=\"minus-outline\"\r\n                      status=\"danger\"\r\n                      pack=\"eva\"\r\n                    >\r\n                    </nb-icon>\r\n                  </button>\r\n                </nb-form-field>\r\n\r\n                <ng-container\r\n                  *ngIf=\"category.get('category').invalid && category.get('category').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"category.get('category').errors?.required\"\r\n                  >\r\n                    Category {{ i + 1 }} is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <span>\r\n                  <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step label=\"{{ !branch ? 'Payment' : 'Submit' }}\">\r\n        <div class=\"step-container\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-bordered\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Branch Name</th>\r\n                  <td>{{ branchBasicDetailsForm.value.branchName }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Current Plan Type</th>\r\n                  <td>\r\n                    {{\r\n                      this.paymentDetails\r\n                        ? this.paymentDetails.packageType\r\n                        : branch.currentPlanDetails.planType\r\n                    }}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Email</th>\r\n                  <td>{{ branchBasicDetailsForm.value.email }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Contact</th>\r\n                  <td>{{ branchBasicDetailsForm.value.phone }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Address 1</th>\r\n                  <td>{{ branchAddressForm.value.address1 }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Address 2</th>\r\n                  <td>{{ branchAddressForm.value.address2 }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>City</th>\r\n                  <td>{{ branchAddressForm.value.city }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Pincode</th>\r\n                  <td>{{ branchAddressForm.value.pinCode }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>State</th>\r\n                  <td>{{ branchAddressForm.value.state }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Categories</th>\r\n                  <td>{{ getCategoriesData() }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"saveBranch()\"\r\n                [disabled]=\"submit\"\r\n                [nbSpinner]=\"submit\"\r\n                nbSpinnerStatus=\"primary\"\r\n                nbSpinnerSize=\"small\"\r\n              >\r\n                <span>Submit</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-step>\r\n    </nb-stepper>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddInstituteComponent } from './add-institute.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddInstituteComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddInstituteRoutingModule {}\n","import { PaymentComponent } from './../../payment/payment.component';\r\nimport { map } from 'rxjs/operators';\r\nimport { CountryService } from './../../../services/shared-services/country.service';\r\nimport { PaymentService } from './../../../services/payment.service';\r\nimport { NbToastrService, NbStepperComponent, NbDialogService } from '@nebular/theme';\r\nimport { BranchService } from './../../../services/branch.service';\r\nimport { MenuService } from './../../menu.service';\r\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\r\nimport { BranchModel, CategoryModel } from './../../../models/branch.model';\r\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { ObjectId } from 'bson';\r\n\r\nimport { of, Observable } from 'rxjs';\r\nimport { CheckoutComponent } from '../../checkout/checkout.component';\r\n// declare const Razorpay: any;\r\n\r\n@Component({\r\n  selector: 'ngx-add-institute',\r\n  templateUrl: './add-institute.component.html',\r\n  styleUrls: ['./add-institute.component.scss'],\r\n})\r\nexport class AddInstituteComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  submit: boolean;\r\n  loading: boolean;\r\n\r\n  branchBasicDetailsForm: FormGroup;\r\n  branchAddressForm: FormGroup;\r\n  branchCategoriesForm: FormGroup;\r\n\r\n  private branchId: string;\r\n  branch: BranchModel;\r\n\r\n  private states: any[];\r\n  private cities: any[];\r\n\r\n  filteredStates: Observable<any[]>;\r\n  filteredCities: Observable<any[]>;\r\n\r\n  paymentDetails: any;\r\n  constructor(\r\n    private menuService: MenuService,\r\n    private countryService: CountryService,\r\n    private branchService: BranchService,\r\n    private paymentService: PaymentService,\r\n    private toastrService: NbToastrService,\r\n    private dialogService: NbDialogService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      if (param.mode) {\r\n        this.ngOnInit();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.menuService.hideMenu();\r\n    this.paymentDetails = this.paymentService.getPaymentDetails();\r\n\r\n    let mode: string;\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      mode = param.mode;\r\n    });\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n\r\n    if (mode && mode !== 'edit') {\r\n      this.showToastr('top-right', 'danger', 'Invalid Route');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    } else if (!mode && !this.paymentDetails) {\r\n      this.showToastr('top-right', 'danger', 'Invalid Payment Details');\r\n      this.back();\r\n\r\n      return;\r\n    } else if (mode && !this.branchId) {\r\n      this.showToastr('top-right', 'danger', 'Branch not Available');\r\n      this.back();\r\n\r\n      return;\r\n    }\r\n\r\n    this.states = this.countryService.getStates();\r\n    this.cities = [];\r\n\r\n    this.branchBasicDetailsForm = new FormGroup({\r\n      branchName: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      email: new FormControl(null, {\r\n        validators: [Validators.required, Validators.email],\r\n      }),\r\n      phone: new FormControl(null, {\r\n        validators: [Validators.required, Validators.minLength(10), Validators.maxLength(10)],\r\n      }),\r\n    });\r\n\r\n    this.branchAddressForm = new FormGroup({\r\n      state: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      city: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      address1: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      address2: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n      pinCode: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n    });\r\n\r\n    this.branchCategoriesForm = new FormGroup({\r\n      categories: new FormArray([]),\r\n    });\r\n\r\n    if (this.branchId) {\r\n      this.branchService.getBranchForEditing(this.branchId).subscribe(\r\n        (branch: BranchModel) => {\r\n          if (!branch) {\r\n            this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n            return;\r\n          }\r\n          this.branch = branch;\r\n          this.branchBasicDetailsForm.patchValue({\r\n            branchName: this.branch.basicDetails.branchName,\r\n            email: this.branch.basicDetails.email,\r\n            phone: this.branch.basicDetails.phone,\r\n          });\r\n\r\n          this.branchAddressForm.patchValue({\r\n            state: this.branch.address.state,\r\n            address1: this.branch.address.address1,\r\n            address2: this.branch.address.address2,\r\n            pinCode: this.branch.address.pinCode,\r\n          });\r\n\r\n          this.changeState(this.branch.address.state);\r\n\r\n          this.branchAddressForm.patchValue({\r\n            city: this.branch.address.city,\r\n          });\r\n\r\n          const categories = this.getCategories();\r\n          categories.controls = [];\r\n          this.branch.categories.forEach((category: CategoryModel) => {\r\n            this.addCategory(category);\r\n          });\r\n\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n          this.loading = false;\r\n        },\r\n      );\r\n    } else {\r\n      this.generateCategory();\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  private getCategories() {\r\n    return this.branchCategoriesForm.get('categories') as FormArray;\r\n  }\r\n\r\n  private newCategory(categoryData: any) {\r\n    return new FormGroup({\r\n      _id: new FormControl(categoryData._id ? categoryData._id : new ObjectId().toString(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      category: new FormControl(categoryData.category ? categoryData.category : null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      status: new FormControl(categoryData.status, {\r\n        validators: [],\r\n      }),\r\n    });\r\n  }\r\n\r\n  private addCategory(category: any) {\r\n    const categories = this.getCategories();\r\n    categories.push(this.newCategory(category));\r\n  }\r\n\r\n  generateCategory() {\r\n    const category = {\r\n      _id: new ObjectId().toString(),\r\n      category: '',\r\n      status: true,\r\n    };\r\n    this.addCategory(category);\r\n  }\r\n\r\n  deleteCategory(i: number) {\r\n    if (i !== 0) {\r\n      const categories = this.getCategories();\r\n      categories.removeAt(i);\r\n    }\r\n  }\r\n\r\n  private filterState(name: string): any[] {\r\n    return this.states.filter((state: any) =>\r\n      state.name.toLowerCase().includes(name.toLowerCase()),\r\n    );\r\n  }\r\n\r\n  private filterCity(name: string): any[] {\r\n    return this.cities.filter((city: any) => city.name.toLowerCase().includes(name.toLowerCase()));\r\n  }\r\n\r\n  private getStateFilteredOptions(name: string): Observable<any[]> {\r\n    return of(name).pipe(map((filterState) => this.filterState(filterState)));\r\n  }\r\n\r\n  private getCityFilteredOptions(name: string): Observable<string[]> {\r\n    return of(name).pipe(map((filterCity) => this.filterCity(filterCity)));\r\n  }\r\n\r\n  onChangeStateInput(e: any) {\r\n    this.filteredStates = this.getStateFilteredOptions(e);\r\n  }\r\n\r\n  onChangeCityInput(e: any) {\r\n    this.filteredCities = this.getCityFilteredOptions(e);\r\n  }\r\n\r\n  changeState(name: string) {\r\n    this.cities = this.countryService.getCities(name);\r\n  }\r\n\r\n  private activateBranch(id: string, orderId: string, ReceiptId: string) {\r\n    this.submit = true;\r\n\r\n    const paymentDetails = {\r\n      amount: this.paymentDetails.amount,\r\n      planType: this.paymentDetails.planType,\r\n      packageType: this.paymentDetails.packageType,\r\n      orderId: orderId,\r\n      receiptId: ReceiptId,\r\n    };\r\n    this.branchService.activateBranch(id, paymentDetails).subscribe(\r\n      (res: any) => {\r\n        this.showToastr('top-right', 'success', 'New Institute Added Successfully');\r\n        this.router.navigate(['/institute']);\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.submit = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  submitBasicDetails() {\r\n    this.branchBasicDetailsForm.markAllAsTouched();\r\n    if (this.branchBasicDetailsForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Basic details are required');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  submitAddress() {\r\n    this.branchAddressForm.markAllAsTouched();\r\n    if (this.branchAddressForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Address details are required');\r\n\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  submitCategories() {\r\n    this.branchCategoriesForm.markAllAsTouched();\r\n    if (this.branchCategoriesForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'At least 1 Category is required');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  onClosePayment(order: any) {\r\n    if (order.status) {\r\n      this.activateBranch(this.branchId, order.order, order.receipt);\r\n    } else {\r\n      this.deleteBranch();\r\n    }\r\n  }\r\n\r\n  onCheckout(checkout: any) {\r\n    if (checkout.status) {\r\n      this.dialogService\r\n        .open(PaymentComponent, {\r\n          context: {},\r\n          closeOnBackdropClick: false,\r\n          closeOnEsc: false,\r\n        })\r\n        .onClose.subscribe((order: any) => order && this.onClosePayment(order));\r\n    } else {\r\n      this.deleteBranch();\r\n    }\r\n  }\r\n\r\n  saveBranch() {\r\n    this.branchBasicDetailsForm.markAllAsTouched();\r\n    this.branchAddressForm.markAllAsTouched();\r\n    this.branchCategoriesForm.markAllAsTouched();\r\n\r\n    if (this.branchBasicDetailsForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Basic details are required');\r\n      return;\r\n    } else if (this.branchAddressForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Address details are required');\r\n\r\n      return;\r\n    } else if (this.branchCategoriesForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'At least 1 Category is required');\r\n      return;\r\n    }\r\n\r\n    this.submit = true;\r\n\r\n    const branch: any = {\r\n      basicDetails: this.branchBasicDetailsForm.value,\r\n      address: this.branchAddressForm.value,\r\n      categories: this.branchCategoriesForm.value.categories,\r\n    };\r\n\r\n    if (!this.branch) {\r\n      this.branchService.addBranch(branch).subscribe(\r\n        (res: any) => {\r\n          this.submit = false;\r\n          this.branchId = res.branchId;\r\n          this.branchService.setBranchId(this.branchId);\r\n          this.dialogService\r\n            .open(CheckoutComponent, {\r\n              context: {},\r\n              closeOnBackdropClick: false,\r\n              closeOnEsc: false,\r\n            })\r\n            .onClose.subscribe((checkout: any) => checkout && this.onCheckout(checkout));\r\n        },\r\n        (error: any) => {\r\n          this.submit = false;\r\n          this.showToastr('top-right', 'danger', error);\r\n        },\r\n      );\r\n    } else {\r\n      branch._id = this.branch._id;\r\n      this.branchService.editBranch(branch).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'Branch Updated Successfully!');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  private deleteBranch() {\r\n    if (this.branchId) {\r\n      this.branchService.deleteBranch(this.branchId).subscribe(\r\n        (res: any) => {\r\n          this.branchId = null;\r\n          this.branchService.deleteBranchId();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  getCategoriesData() {\r\n    const categories: string[] = [];\r\n    this.branchCategoriesForm.value.categories.forEach((category: CategoryModel) => {\r\n      categories.push(category.category);\r\n    });\r\n\r\n    return categories.join(', ');\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.branchService.deleteBranchId();\r\n    this.paymentService.deletePaymentDetails();\r\n  }\r\n}\r\n","import { AddInstituteComponent } from './add-institute.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddInstituteRoutingModule } from './add-institute-routing.module';\n\nimport { ThemeModule } from './../../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbUserModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n  NbStepperModule,\n  NbAutocompleteModule,\n} from '@nebular/theme';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [AddInstituteComponent],\n  imports: [\n    CommonModule,\n    AddInstituteRoutingModule,\n    ThemeModule,\n    ReactiveFormsModule,\n    NbCardModule,\n    NbIconModule,\n    NbSpinnerModule,\n    NbInputModule,\n    NbFormFieldModule,\n    NbStepperModule,\n    NbAutocompleteModule,\n    NbButtonModule,\n    NbTooltipModule,\n  ],\n})\nexport class AddInstituteModule {}\n"]}