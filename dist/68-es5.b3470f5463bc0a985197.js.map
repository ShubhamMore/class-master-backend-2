{"version":3,"sources":["webpack:///src/app/authentication/reset-password/reset-password.component.html","webpack:///src/app/authentication/reset-password/reset-password-routing.module.ts","webpack:///src/app/authentication/reset-password/reset-password.component.ts","webpack:///src/app/authentication/reset-password/reset-password.module.ts"],"names":["ResetPasswordComponent","ResetPasswordRoutingModule","ResetPasswordModule","routes","path","component","httpService","toastrService","roure","encryptService","router","formBuilder","this","loading","submit","form","group","password","validators","required","minLength","maxLength","confirmPassword","queryParams","subscribe","params","key","showToastr","navigate","relativeTo","token","httpPost","api","data","response","valid_token","error","markAllAsTouched","invalid","hasError","resetPassword","encrypt","value","environment","encKey","res","reset","position","status","message","show","canActivate","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"main-container\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-sm-10 col-12 mx-auto\">\n      <nb-card>\n        <nb-card-body>\n          <h1 id=\"title\" class=\"title\">Reset Password</h1>\n          <ng-container *ngIf=\"!loading; else loadingData\">\n            <p class=\"sub-title\">Please set a new password</p>\n            <form (ngSubmit)=\"reset()\" [formGroup]=\"form\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-password\">Password:</label>\n                <input\n                  type=\"password\"\n                  nbInput\n                  id=\"input-password\"\n                  name=\"password\"\n                  formControlName=\"password\"\n                  placeholder=\"Password\"\n                  minlength=\"7\"\n                  maxlength=\"20\"\n                  fullWidth\n                  [status]=\"\n                    form.get('password').touched\n                      ? form.get('password').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container *ngIf=\"form.get('password').invalid && form.get('password').touched\">\n                  <p class=\"caption status-danger\" *ngIf=\"form.get('password').errors?.required\">\n                    Password is required!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"form.get('password').errors?.minlength\">\n                    Password should contain minimum 7 characters\n                  </p>\n                </ng-container>\n              </div>\n\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n                <input\n                  nbInput\n                  type=\"password\"\n                  id=\"input-re-password\"\n                  name=\"rePass\"\n                  formControlName=\"confirmPassword\"\n                  placeholder=\"Confirm Password\"\n                  minlength=\"5\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    form.get('confirmPassword').touched\n                      ? form.get('confirmPassword').invalid ||\n                        form.get('password').value != form.get('confirmPassword').value\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"form.get('confirmPassword').invalid && form.get('confirmPassword').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"form.get('confirmPassword').errors?.required\"\n                  >\n                    Password confirmation is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      form.get('password').value != form.get('confirmPassword').value &&\n                      !form.get('confirmPassword').errors?.required\n                    \"\n                  >\n                    Password does not match the confirm password.\n                  </p>\n                </ng-container>\n              </div>\n\n              <br />\n              <button nbButton size=\"medium\" status=\"primary\" fullWidth [disabled]=\"submit\">\n                Change password\n              </button>\n            </form>\n\n            <br />\n            <section class=\"sign-in-or-up text-right\">\n              <p>\n                Back to <a class=\"text-link\" routerLink=\"/login\">Log In</a>&nbsp;|&nbsp;\n                <a routerLink=\"/register\" class=\"text-link\">Register</a>\n              </p>\n            </section>\n          </ng-container>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n</div>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 mt-5 pb-5 mb-5 text-center\">Loading...</p>\n</ng-template>\n","import { ResetPasswordComponent } from './reset-password.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordComponent,\n    canActivate: [],\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ResetPasswordRoutingModule {}\n","import { NbToastrService } from '@nebular/theme';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { Params, ActivatedRoute, Router } from '@angular/router';\nimport { HttpService } from '../../services/shared-services/http.service';\nimport { EncryptService } from '../../services/shared-services/encrypt.service';\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'ngx-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss', '../authentication.scss'],\n})\nexport class ResetPasswordComponent implements OnInit {\n  form: FormGroup;\n  loading: boolean;\n  submit: boolean;\n\n  token: string;\n  user: string;\n\n  constructor(\n    private httpService: HttpService,\n    private toastrService: NbToastrService,\n    private roure: ActivatedRoute,\n    private encryptService: EncryptService,\n    private router: Router,\n    private formBuilder: FormBuilder,\n  ) {}\n\n  ngOnInit() {\n    this.loading = true;\n    this.submit = false;\n\n    this.form = this.formBuilder.group({\n      password: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n      }),\n      confirmPassword: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n      }),\n    });\n\n    this.roure.queryParams.subscribe((params: Params) => {\n      if (params.key === undefined) {\n        this.showToastr('top-right', 'danger', 'Invalid Key');\n        this.router.navigate(['../page_not_found'], { relativeTo: this.roure });\n      } else {\n        this.token = params.key;\n\n        const data = { api: 'validateToken', data: { token: this.token } };\n        this.httpService.httpPost(data).subscribe(\n          (response: any) => {\n            const valid = response.valid_token;\n            if (valid) {\n              this.loading = false;\n            } else {\n              this.showToastr('top-right', 'danger', 'Invalid Authentication Token');\n              this.router.navigate(['../page_not_found'], {\n                relativeTo: this.roure,\n              });\n            }\n          },\n          (error: any) => {\n            this.showToastr('top-right', 'danger', error);\n            this.router.navigate(['../page_not_found'], {\n              relativeTo: this.roure,\n            });\n          },\n        );\n      }\n    });\n  }\n\n  reset() {\n    this.form.markAllAsTouched();\n    if (this.form.invalid) {\n      this.showToastr('top-right', 'danger', 'Please Fill all Details Correctly');\n      return;\n    } else if (this.form.hasError('invalidPassword')) {\n      this.showToastr('top-right', 'danger', 'Password & Forgot Password Does not Match');\n      return;\n    }\n\n    this.submit = true;\n\n    const resetPassword = {\n      // user: this.user,\n      password: this.encryptService.encrypt(this.form.value.password, environment.encKey),\n      token: this.token,\n    };\n\n    const data = { api: 'resetPassword', data: resetPassword };\n    this.httpService.httpPost(data).subscribe(\n      (res: any) => {\n        this.form.reset();\n        this.showToastr('top-right', 'success', 'Password Changed Successfully');\n        this.router.navigate(['/login'], { relativeTo: this.roure });\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.submit = false;\n      },\n    );\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ResetPasswordComponent } from './reset-password.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbActionsModule,\n  NbCheckboxModule,\n  NbAlertModule,\n  NbSelectModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    ResetPasswordRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbButtonModule,\n    NbActionsModule,\n    NbInputModule,\n    NbCheckboxModule,\n    NbAlertModule,\n    NbSelectModule,\n  ],\n})\nexport class ResetPasswordModule {}\n"]}