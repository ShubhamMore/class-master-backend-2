{"version":3,"sources":["webpack:///src/app/institute/branch/lecture/batch-lecture/batch-lecture.component.html","webpack:///src/app/institute/branch/lecture/batch-lecture/batch-lecture-routing.module.ts","webpack:///src/app/institute/branch/lecture/batch-lecture/batch-lecture.component.ts","webpack:///src/app/institute/branch/lecture/batch-lecture/batch-lecture.module.ts"],"names":["BatchLectureComponent","BatchLectureModule","BatchLectureRoutingModule","routes","path","component","branchService","dateService","courseService","batchService","toastrService","router","route","this","loading","branchId","getBranchId","categories","courses","myCourses","batches","category","course","getCategories","getCourses","navigate","relativeTo","getBranchData","subscribe","branch","getBatches","getBranch","setBranchData","error","showToastr","getCoursesData","filter","basicDetails","batch","setBatchId","_id","setBatchData","setCourseId","myCourse","find","curCourse","setCourseData","setCategoryId","myCategory","curCategory","setCategoryData","categoryId","courseId","courseName","position","status","message","show","onSelectCategory","onSelectCourse","loadChildren","then","m","PageNotFoundModule","redirectTo","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-6 col-sm-4\">\n        <h3>Lectures</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-category\"\n          name=\"category\"\n          [selected]=\"category\"\n          fullWidth\n          placeholder=\"Select Category\"\n          (selectedChange)=\"onSelectCategory($event)\"\n        >\n          <nb-option value=\"\">All Categories</nb-option>\n          <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n            category.category\n          }}</nb-option>\n        </nb-select>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-course\"\n          name=\"course\"\n          [selected]=\"course\"\n          fullWidth\n          placeholder=\"Select Course\"\n          (selectedChange)=\"onSelectCourse($event)\"\n        >\n          <nb-option value=\"\">All Courses</nb-option>\n          <nb-option *ngFor=\"let course of myCourses\" [value]=\"course._id\">{{\n            course.basicDetails.courseName\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"batches.length > 0; else noBatches\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Category</th>\n                  <th>Course</th>\n                  <th>Start Date</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let batch of batches; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ batch.basicDetails.batchName }}</td>\n                  <td>{{ getCategory(batch.category) }}</td>\n                  <td>{{ getCourse(batch.course) }}</td>\n                  <td>{{ dateService.formatDate(batch.basicDetails.startDate) }}</td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"primary\" (click)=\"manageLecture(batch)\">\n                      Manage Lecture\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBatches>\n            <p class=\"text-center pt-5 pb-5\">No Batches Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { BatchLectureComponent } from './batch-lecture.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BatchLectureComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BatchLectureRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\r\nimport { BatchService } from './../../../../services/batch.service';\r\nimport { CourseService } from './../../../../services/course.service';\r\nimport { BatchModel } from './../../../../models/batch.model';\r\nimport { CourseModel, SubjectModel } from './../../../../models/course.model';\r\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BranchService } from './../../../../services/branch.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { NbToastrService } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-batch-lecture',\r\n  templateUrl: './batch-lecture.component.html',\r\n  styleUrls: ['./batch-lecture.component.scss'],\r\n})\r\nexport class BatchLectureComponent implements OnInit {\r\n  loading: boolean;\r\n  branchId: string;\r\n\r\n  categories: CategoryModel[];\r\n  category: string;\r\n  courses: CourseModel[];\r\n  myCourses: CourseModel[];\r\n  course: string;\r\n  batches: BatchModel[];\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    public dateService: DateService,\r\n    private courseService: CourseService,\r\n    private batchService: BatchService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n    this.categories = [];\r\n    this.courses = [];\r\n    this.myCourses = [];\r\n    this.batches = [];\r\n\r\n    this.category = '';\r\n    this.course = '';\r\n\r\n    this.getCategories();\r\n    this.getCourses();\r\n  }\r\n\r\n  private getCategories() {\r\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\r\n      if (branch) {\r\n        this.categories = branch.categories;\r\n      }\r\n    });\r\n\r\n    if (!this.categories) {\r\n      this.branchService.getBranch(this.branchId).subscribe(\r\n        (branch: BranchModel) => {\r\n          this.branchService.setBranchData(branch);\r\n          this.categories = branch.categories;\r\n          this.getBatches(this.category, this.course);\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          // this.loading = false;\r\n        },\r\n      );\r\n    } else {\r\n      this.getBatches(this.category, this.course);\r\n    }\r\n  }\r\n\r\n  private getCourses() {\r\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\r\n      this.courses = courses;\r\n    });\r\n  }\r\n\r\n  onSelectCategory(category: string) {\r\n    this.category = category;\r\n    this.course = '';\r\n    this.myCourses = this.courses.filter(\r\n      (course: CourseModel) => course.basicDetails.category === category,\r\n    );\r\n    this.getBatches(this.category, this.course);\r\n  }\r\n\r\n  onSelectCourse(course: string) {\r\n    this.course = course;\r\n    this.getBatches(this.category, this.course);\r\n  }\r\n\r\n  getBatches(category: string, course: string) {\r\n    this.loading = true;\r\n    this.batchService.getBatches(this.branchId, category, course).subscribe(\r\n      (batches: BatchModel[]) => {\r\n        this.batches = batches;\r\n        this.loading = false;\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.loading = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  manageLecture(batch: BatchModel) {\r\n    this.batchService.setBatchId(batch._id);\r\n    this.batchService.setBatchData(batch);\r\n\r\n    this.courseService.setCourseId(batch.course);\r\n    const myCourse = this.courses.find((curCourse: CourseModel) => curCourse._id === batch.course);\r\n    this.courseService.setCourseData(myCourse);\r\n\r\n    this.branchService.setCategoryId(batch.category);\r\n    const myCategory = this.categories.find(\r\n      (curCategory: CategoryModel) => curCategory._id === batch.category,\r\n    );\r\n    this.branchService.setCategoryData(myCategory);\r\n\r\n    this.router.navigate(['../manage'], { relativeTo: this.route });\r\n  }\r\n\r\n  getCategory(categoryId: string) {\r\n    const category = this.categories.find(\r\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\r\n    );\r\n\r\n    if (category) {\r\n      return category.category;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  getCourse(courseId: string) {\r\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\r\n\r\n    if (course) {\r\n      return course.basicDetails.courseName;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n}\r\n","import {\n  NbCardModule,\n  NbTooltipModule,\n  NbIconModule,\n  NbButtonModule,\n  NbInputModule,\n  NbAccordionModule,\n  NbFormFieldModule,\n  NbSelectModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BatchLectureRoutingModule } from './batch-lecture-routing.module';\nimport { BatchLectureComponent } from './batch-lecture.component';\n\n@NgModule({\n  declarations: [BatchLectureComponent],\n  imports: [\n    CommonModule,\n    BatchLectureRoutingModule,\n    NbCardModule,\n    NbTooltipModule,\n    NbIconModule,\n    NbButtonModule,\n    NbInputModule,\n    NbAccordionModule,\n    NbFormFieldModule,\n    NbSelectModule,\n  ],\n})\nexport class BatchLectureModule {}\n"]}