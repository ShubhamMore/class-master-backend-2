{"version":3,"sources":["webpack:///src/app/student/branch/course/manage-course/manage-course.component.html","webpack:///src/app/student/branch/course/manage-course/manage-course-routing.module.ts","webpack:///src/app/student/branch/course/manage-course/manage-course.component.ts","webpack:///src/app/student/branch/course/manage-course/manage-course.module.ts"],"names":["routes","path","component","ManageCourseComponent","dateService","studentBranchService","branchService","toastrService","courseService","studentCourseService","studentCourseInstallmentService","router","route","this","loading","branchId","getBranchId","studentCourses","queryParams","subscribe","param","type","setType","getStudentCourses","navigate","relativeTo","getStudentAllCourses","err","showToastr","studentCourse","setStudentCourseId","_id","setStudentCourseData","setCourseId","course","setStudentCourseInstallmentId","studentCourseInstallment","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageCourseRoutingModule","forChild","ManageCourseModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h3>\n          Courses <small *ngIf=\"type && type !== 'course'\">for {{ getHeader() }}</small>\n        </h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"studentCourses.length > 0; else noStudentCourses\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Course</th>\n                  <th>Category</th>\n                  <th>Batch</th>\n                  <th>Roll Number</th>\n                  <th>Activation date</th>\n                  <th *ngIf=\"type === 'course'\">Course Material</th>\n                  <th *ngIf=\"type === 'course'\">Installments</th>\n                  <th *ngIf=\"type === 'report'\">Attendance</th>\n                  <th *ngIf=\"type === 'report'\">Performance</th>\n                  <th *ngIf=\"type === 'lecture'\">Lecture</th>\n                  <th *ngIf=\"type === 'assignment'\">Assignment</th>\n                  <th *ngIf=\"type === 'exam'\">Online Exam</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let studentCourse of studentCourses; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ studentCourse.courseName }}</td>\n                  <td>{{ studentCourse.categoryName }}</td>\n                  <td>{{ studentCourse.batchName }}</td>\n                  <td>{{ studentCourse.rollNumber }}</td>\n                  <td>{{ dateService.formatDate(studentCourse.activationDate) }}</td>\n\n                  <td *ngIf=\"type === 'course'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"success\"\n                      (click)=\"courseMaterial(studentCourse)\"\n                    >\n                      Course Material\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'course'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"primary\"\n                      (click)=\"courseInstallments(studentCourse)\"\n                    >\n                      Installments\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'report'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"info\"\n                      (click)=\"courseAttendance(studentCourse)\"\n                    >\n                      Attendance\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'report'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"success\"\n                      (click)=\"coursePerformance(studentCourse)\"\n                    >\n                      Performance\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'lecture'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"warning\"\n                      (click)=\"courseLecture(studentCourse)\"\n                    >\n                      Lecture\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'assignment'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"warning\"\n                      (click)=\"courseAssignment(studentCourse)\"\n                    >\n                      Assignment\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'exam'\">\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"warning\"\n                      (click)=\"courseOnlineExams(studentCourse)\"\n                    >\n                      Online Exams\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noStudentCourses>\n            <p class=\"text-center pt-5 pb-5\">No Student Courses Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ManageCourseComponent } from './manage-course.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageCourseComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageCourseRoutingModule {}\n","import { StudentBranchService } from './../../student-branch.service';\nimport { CourseService } from './../../../../services/course.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { StudentCourseModel } from './../../../../models/student-course.model';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { BranchService } from './../../../../services/branch.service';\nimport { StudentCourseService } from './../../../../services/student-course.service';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\n\nimport { StudentCourseInstallmentService } from './../../../../services/student-course-installment.service';\nimport { DateService } from './../../../../services/shared-services/date.service';\n\n@Component({\n  selector: 'ngx-manage-course',\n  templateUrl: './manage-course.component.html',\n  styleUrls: ['./manage-course.component.scss'],\n})\nexport class ManageCourseComponent implements OnInit, OnDestroy {\n  private branchId: string;\n\n  loading: boolean;\n\n  type: string;\n\n  studentCourses: StudentCourseModel[];\n\n  constructor(\n    public dateService: DateService,\n    private studentBranchService: StudentBranchService,\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private courseService: CourseService,\n    private studentCourseService: StudentCourseService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.studentCourses = [];\n\n    this.route.queryParams.subscribe((param: Params) => {\n      this.type = param.type;\n\n      if (!this.type) {\n        this.router.navigate(['../manage'], {\n          relativeTo: this.route,\n          queryParams: { type: 'course' },\n        });\n        return;\n      }\n\n      this.studentBranchService.setType(this.type);\n\n      this.getStudentCourses();\n    });\n  }\n\n  private getStudentCourses() {\n    this.studentCourseService.getStudentAllCourses(this.branchId).subscribe(\n      (studentCourses: any[]) => {\n        this.studentCourses = studentCourses;\n        this.loading = false;\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.loading = false;\n      },\n    );\n  }\n\n  getHeader() {\n    if (this.type === 'course') {\n      return null;\n    } else if (this.type === 'lecture') {\n      return 'Lectures';\n    } else if (this.type === 'report') {\n      return 'Reports';\n    } else if (this.type === 'assignment') {\n      return 'Assignment';\n    } else if (this.type === 'exam') {\n      return 'Exam';\n    }\n  }\n\n  courseMaterial(studentCourse: StudentCourseModel) {\n    if (this.type === 'course') {\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.router.navigate(['../material'], { relativeTo: this.route });\n    }\n  }\n\n  courseInstallments(studentCourse: StudentCourseModel) {\n    if (this.type === 'course') {\n      this.courseService.setCourseId(studentCourse.course);\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.studentCourseInstallmentService.setStudentCourseInstallmentId(\n        studentCourse.studentCourseInstallment,\n      );\n      this.router.navigate(['../installment'], { relativeTo: this.route });\n    }\n  }\n\n  courseAttendance(studentCourse: StudentCourseModel) {\n    if (this.type === 'report') {\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.router.navigate(['../attendance'], { relativeTo: this.route });\n    }\n  }\n\n  courseLecture(studentCourse: StudentCourseModel) {\n    if (this.type === 'lecture') {\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.router.navigate(['../lecture'], { relativeTo: this.route });\n    }\n  }\n\n  coursePerformance(studentCourse: StudentCourseModel) {\n    if (this.type === 'report') {\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.router.navigate(['../performance'], { relativeTo: this.route });\n    }\n  }\n\n  courseAssignment(studentCourse: StudentCourseModel) {\n    if (this.type === 'assignment') {\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.router.navigate(['../assignment'], { relativeTo: this.route });\n    }\n  }\n\n  courseOnlineExams(studentCourse: StudentCourseModel) {\n    if (this.type === 'exam') {\n      this.studentCourseService.setStudentCourseId(studentCourse._id);\n      this.studentCourseService.setStudentCourseData(studentCourse);\n      this.router.navigate(['../online-test'], { relativeTo: this.route });\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../../'], { relativeTo: this.route });\n  }\n\n  ngOnDestroy() {}\n}\n","import { NbCardModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageCourseRoutingModule } from './manage-course-routing.module';\nimport { ManageCourseComponent } from './manage-course.component';\n\n@NgModule({\n  declarations: [ManageCourseComponent],\n  imports: [\n    CommonModule,\n    ManageCourseRoutingModule,\n\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class ManageCourseModule {}\n"]}