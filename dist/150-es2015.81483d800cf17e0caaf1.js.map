{"version":3,"sources":["webpack:///src/app/institute/branch/branch-header/branch-header.component.ts","webpack:///src/app/institute/branch/branch.component.html","webpack:///src/app/institute/branch/branch-routing.module.ts","webpack:///src/app/institute/branch/branch.component.ts","webpack:///src/app/institute/branch/branch.module.ts"],"names":["BranchHeaderComponent","branchService","router","route","this","loading","branchId","getBranchId","getBranch","subscribe","branch","setBranchData","err","navigate","relativeTo","routes","path","component","BranchComponent","toastrService","checkBranchStatus","branchStatus","activated","showToastr","error","position","status","message","show","deleteBranchId","deleteBranchData","children","loadChildren","then","m","DashboardModule","ManageBranchModule","ScheduleModule","LectureModule","AssignmentModule","LeadModule","ExamModule","BudgetModule","StorageModule","StudentModule","StudentsReportModule","EmployeeModule","LeaveModule","redirectTo","pathMatch","PageNotFoundModule","BranchRoutingModule","forChild","BranchModule"],"mappings":"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","file":"x","sourcesContent":["import { ActivatedRoute, Router } from '@angular/router';\r\nimport { BranchModel } from './../../../models/branch.model';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BranchService } from './../../../services/branch.service';\r\n\r\n@Component({\r\n  selector: 'ngx-branch-header',\r\n  templateUrl: './branch-header.component.html',\r\n  styleUrls: ['./branch-header.component.scss'],\r\n})\r\nexport class BranchHeaderComponent implements OnInit {\r\n  loading: boolean;\r\n  branchId: string;\r\n  branch: BranchModel;\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.branchService.getBranch(this.branchId).subscribe(\r\n      (branch: BranchModel) => {\r\n        this.branch = branch;\r\n        this.branchService.setBranchData(branch);\r\n        this.loading = false;\r\n      },\r\n      (err: any) => {\r\n        // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      },\r\n    );\r\n  }\r\n}\r\n","<ngx-branch-header></ngx-branch-header>\n<router-outlet *ngIf=\"!loading\"></router-outlet>\n","import { BranchComponent } from './branch.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BranchComponent,\n    children: [\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./dashboard/dashboard.module').then((m) => m.DashboardModule),\n      },\n\n      {\n        path: 'manage-branch',\n        loadChildren: () =>\n          import('./manage-branch/manage-branch.module').then((m) => m.ManageBranchModule),\n      },\n\n      {\n        path: 'schedule',\n        loadChildren: () => import('./schedule/schedule.module').then((m) => m.ScheduleModule),\n      },\n\n      {\n        path: 'lecture',\n        loadChildren: () => import('./lecture/lecture.module').then((m) => m.LectureModule),\n      },\n\n      {\n        path: 'assignment',\n        loadChildren: () =>\n          import('./assignment/assignment.module').then((m) => m.AssignmentModule),\n      },\n\n      {\n        path: 'lead',\n        loadChildren: () => import('./lead/lead.module').then((m) => m.LeadModule),\n      },\n\n      {\n        path: 'exam',\n        loadChildren: () => import('./exam/exam.module').then((m) => m.ExamModule),\n      },\n\n      {\n        path: 'budget',\n        loadChildren: () => import('./budget/budget.module').then((m) => m.BudgetModule),\n      },\n\n      {\n        path: 'storage',\n        loadChildren: () => import('./storage/storage.module').then((m) => m.StorageModule),\n      },\n\n      {\n        path: 'student',\n        loadChildren: () => import('./student/student.module').then((m) => m.StudentModule),\n      },\n\n      {\n        path: 'students-report',\n        loadChildren: () =>\n          import('./students-report/students-report.module').then((m) => m.StudentsReportModule),\n      },\n\n      {\n        path: 'employee',\n        loadChildren: () => import('./employee/employee.module').then((m) => m.EmployeeModule),\n      },\n\n      {\n        path: 'leave',\n        loadChildren: () => import('./leave/leave.module').then((m) => m.LeaveModule),\n      },\n\n      {\n        path: '',\n        redirectTo: 'dashboard',\n        pathMatch: 'full',\n      },\n\n      {\n        path: 'page-not-found',\n        loadChildren: () =>\n          import('../../shared/page-not-found/page-not-found.module').then(\n            (m) => m.PageNotFoundModule,\n          ),\n      },\n\n      {\n        path: '**',\n        redirectTo: 'page-not-found',\n        pathMatch: 'full',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BranchRoutingModule {}\n","import { NbToastrService } from '@nebular/theme';\r\nimport { BranchModel } from './../../models/branch.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BranchService } from './../../services/branch.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-branch',\r\n  templateUrl: './branch.component.html',\r\n  styleUrls: ['./branch.component.scss'],\r\n})\r\nexport class BranchComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n  branchId: string;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.branchService.checkBranchStatus(this.branchId).subscribe(\r\n      (branchStatus: { activated: boolean }) => {\r\n        if (branchStatus.activated) {\r\n          this.loading = false;\r\n        } else {\r\n          this.showToastr('top-right', 'danger', 'Please Activate Branch');\r\n          this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n        }\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      },\r\n    );\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.branchService.deleteBranchId();\r\n    this.branchService.deleteBranchData();\r\n  }\r\n}\r\n","import { NbCardModule, NbUserModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BranchRoutingModule } from './branch-routing.module';\nimport { BranchComponent } from './branch.component';\nimport { BranchHeaderComponent } from './branch-header/branch-header.component';\n\n@NgModule({\n  declarations: [BranchComponent, BranchHeaderComponent],\n  imports: [CommonModule, BranchRoutingModule, NbCardModule, NbUserModule],\n})\nexport class BranchModule {}\n"]}