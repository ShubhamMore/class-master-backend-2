{"version":3,"sources":["webpack:///src/app/institute/branch/schedule/manage-schedule/manage-schedule.component.html","webpack:///src/app/institute/branch/schedule/manage-schedule/manage-schedule-routing.module.ts","webpack:///src/app/institute/branch/schedule/manage-schedule/manage-schedule.component.ts","webpack:///src/app/institute/branch/schedule/manage-schedule/manage-schedule.module.ts"],"names":["routes","path","component","ManageScheduleComponent","branchService","dateService","courseService","batchService","toastrService","router","route","this","loading","branchId","getBranchId","categories","courses","myCourses","batches","category","course","getCategories","getCourses","navigate","relativeTo","getBranchData","subscribe","branch","getBatches","getBranch","setBranchData","error","showToastr","getCoursesData","filter","basicDetails","batch","setBatchId","_id","setBatchData","setCourseId","myCourse","find","curCourse","setCourseData","setCategoryId","myCategory","curCategory","setCategoryData","categoryId","courseId","courseName","position","status","message","show","onSelectCategory","onSelectCourse","ManageScheduleRoutingModule","forChild","ManageScheduleModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-6 col-sm-4\">\n        <h3>Schedule Class</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-category\"\n          name=\"category\"\n          [selected]=\"category\"\n          fullWidth\n          placeholder=\"Select Category\"\n          (selectedChange)=\"onSelectCategory($event)\"\n        >\n          <nb-option value=\"\">All Categories</nb-option>\n          <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n            category.category\n          }}</nb-option>\n        </nb-select>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-course\"\n          name=\"course\"\n          [selected]=\"course\"\n          fullWidth\n          placeholder=\"Select Course\"\n          (selectedChange)=\"onSelectCourse($event)\"\n        >\n          <nb-option value=\"\">All Courses</nb-option>\n          <nb-option *ngFor=\"let course of myCourses\" [value]=\"course._id\">{{\n            course.basicDetails.courseName\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"batches.length > 0; else noBatches\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Category</th>\n                  <th>Course</th>\n                  <th>Start Date</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let batch of batches; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ batch.basicDetails.batchName }}</td>\n                  <td>{{ getCategory(batch.category) }}</td>\n                  <td>{{ getCourse(batch.course) }}</td>\n                  <td>{{ dateService.formatDate(batch.basicDetails.startDate) }}</td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"primary\" (click)=\"manageSchedule(batch)\">\n                      Manage Schedule\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBatches>\n            <p class=\"text-center pt-5 pb-5\">No Batches Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageScheduleComponent } from './manage-schedule.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [{ path: '', component: ManageScheduleComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageScheduleRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\r\nimport { BatchService } from './../../../../services/batch.service';\r\nimport { CourseService } from './../../../../services/course.service';\r\nimport { BatchModel } from './../../../../models/batch.model';\r\nimport { CourseModel } from './../../../../models/course.model';\r\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BranchService } from './../../../../services/branch.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { NbToastrService } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-manage-schedule',\r\n  templateUrl: './manage-schedule.component.html',\r\n  styleUrls: ['./manage-schedule.component.scss'],\r\n})\r\nexport class ManageScheduleComponent implements OnInit {\r\n  loading: boolean;\r\n  branchId: string;\r\n\r\n  categories: CategoryModel[];\r\n  category: string;\r\n  courses: CourseModel[];\r\n  myCourses: CourseModel[];\r\n  course: string;\r\n  batches: BatchModel[];\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    public dateService: DateService,\r\n    private courseService: CourseService,\r\n    private batchService: BatchService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n    this.categories = [];\r\n    this.courses = [];\r\n    this.myCourses = [];\r\n    this.batches = [];\r\n\r\n    this.category = '';\r\n    this.course = '';\r\n\r\n    this.getCategories();\r\n    this.getCourses();\r\n  }\r\n\r\n  private getCategories() {\r\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\r\n      if (branch) {\r\n        this.categories = branch.categories;\r\n      }\r\n    });\r\n\r\n    if (!this.categories) {\r\n      this.branchService.getBranch(this.branchId).subscribe(\r\n        (branch: BranchModel) => {\r\n          this.branchService.setBranchData(branch);\r\n          this.categories = branch.categories;\r\n          this.getBatches(this.category, this.course);\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          // this.loading = false;\r\n        },\r\n      );\r\n    } else {\r\n      this.getBatches(this.category, this.course);\r\n    }\r\n  }\r\n\r\n  private getCourses() {\r\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\r\n      this.courses = courses;\r\n    });\r\n  }\r\n\r\n  onSelectCategory(category: string) {\r\n    this.category = category;\r\n    this.course = '';\r\n    this.myCourses = this.courses.filter(\r\n      (course: CourseModel) => course.basicDetails.category === category,\r\n    );\r\n    this.getBatches(this.category, this.course);\r\n  }\r\n\r\n  onSelectCourse(course: string) {\r\n    this.course = course;\r\n    this.getBatches(this.category, this.course);\r\n  }\r\n\r\n  getBatches(category: string, course: string) {\r\n    this.loading = true;\r\n    this.batchService.getBatches(this.branchId, category, course).subscribe(\r\n      (batches: BatchModel[]) => {\r\n        this.batches = batches;\r\n        this.loading = false;\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.loading = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  manageSchedule(batch: BatchModel) {\r\n    this.batchService.setBatchId(batch._id);\r\n    this.batchService.setBatchData(batch);\r\n\r\n    this.courseService.setCourseId(batch.course);\r\n    const myCourse = this.courses.find((curCourse: CourseModel) => curCourse._id === batch.course);\r\n    this.courseService.setCourseData(myCourse);\r\n\r\n    this.branchService.setCategoryId(batch.category);\r\n    const myCategory = this.categories.find(\r\n      (curCategory: CategoryModel) => curCategory._id === batch.category,\r\n    );\r\n    this.branchService.setCategoryData(myCategory);\r\n\r\n    this.router.navigate(['../batch-schedule'], { relativeTo: this.route });\r\n  }\r\n\r\n  getCategory(categoryId: string) {\r\n    const category = this.categories.find(\r\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\r\n    );\r\n\r\n    if (category) {\r\n      return category.category;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  getCourse(courseId: string) {\r\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\r\n\r\n    if (course) {\r\n      return course.basicDetails.courseName;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n}\r\n","import { NbCardModule, NbSelectModule, NbButtonModule } from '@nebular/theme';\nimport { ManageScheduleComponent } from './manage-schedule.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageScheduleRoutingModule } from './manage-schedule-routing.module';\n\n@NgModule({\n  declarations: [ManageScheduleComponent],\n  imports: [\n    CommonModule,\n    ManageScheduleRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n  ],\n})\nexport class ManageScheduleModule {}\n"]}