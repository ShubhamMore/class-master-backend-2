{"version":3,"sources":["webpack:///src/app/employee/branch/lead/manage-lead/manage-lead.component.html","webpack:///src/app/employee/branch/lead/manage-lead/manage-lead-routing.module.ts","webpack:///src/app/employee/branch/lead/manage-lead/manage-lead.component.ts","webpack:///src/app/employee/branch/lead/manage-lead/manage-lead.module.ts"],"names":["routes","path","component","ManageLeadComponent","branchService","dateService","courseService","toastrService","leadService","router","route","this","queryParams","subscribe","param","ngOnInit","loading","branchId","getBranchId","type","setLeadType","leads","categories","category","courses","course","myCourses","getCategories","getCourses","navigate","relativeTo","getBranchData","branch","getLeads","getBranch","setBranchData","error","showToastr","getCoursesData","filter","basicDetails","id","setLeadId","mode","deleteLead","res","removeLead","index","findIndex","lead","_id","splice","changeLeadStatus","categoryId","find","curCategory","courseId","curCourse","courseName","position","status","message","show","onSelectCategory","onSelectCourse","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageLeadRoutingModule","forChild","ManageLeadModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-6 col-sm-4\">\n        <h3>{{ type | uppercase }} Leads</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-category\"\n          name=\"category\"\n          [selected]=\"category\"\n          fullWidth\n          placeholder=\"Select Category\"\n          (selectedChange)=\"onSelectCategory($event)\"\n        >\n          <nb-option value=\"\">All Categories</nb-option>\n          <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n            category.category\n          }}</nb-option>\n        </nb-select>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-course\"\n          name=\"course\"\n          [selected]=\"course\"\n          fullWidth\n          placeholder=\"Select Course\"\n          (selectedChange)=\"onSelectCourse($event)\"\n        >\n          <nb-option value=\"\">All Courses</nb-option>\n          <nb-option *ngFor=\"let course of myCourses\" [value]=\"course._id\">{{\n            course.basicDetails.courseName\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"leads.length > 0; else noLeads\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Date</th>\n                  <th>Follow Up</th>\n                  <th>Category</th>\n                  <th>Course</th>\n\n                  <th>Action</th>\n                  <th *ngIf=\"type === 'active'\"></th>\n                  <th></th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let lead of leads; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ lead.leadName }}</td>\n                  <td>{{ dateService.formatDate(lead.date) }}</td>\n                  <td>{{ dateService.formatDate(lead.followUpDate) }}</td>\n                  <td>{{ getCategory(lead.category) }}</td>\n                  <td>{{ getCourse(lead.course) }}</td>\n\n                  <td>\n                    <button nbButton size=\"small\" status=\"basic\" (click)=\"editLead(lead._id)\">\n                      Edit\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'active'\">\n                    <button nbButton size=\"small\" status=\"success\" (click)=\"wonLead(lead._id)\">\n                      Won\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'inactive'\">\n                    <button nbButton size=\"small\" status=\"success\" (click)=\"reOpenLead(lead._id)\">\n                      Reopen\n                    </button>\n                  </td>\n\n                  <td *ngIf=\"type === 'active'\">\n                    <button nbButton size=\"small\" status=\"danger\" (click)=\"lostLead(lead._id)\">\n                      Lost\n                    </button>\n                  </td>\n\n                  <td>\n                    <button nbButton size=\"small\" status=\"danger\" (click)=\"deleteLead(lead._id)\">\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noLeads>\n            <p class=\"text-center pt-5 pb-5\">No Leads Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageLeadComponent } from './manage-lead.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageLeadComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageLeadRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\nimport { CourseService } from './../../../../services/course.service';\nimport { CourseModel } from './../../../../models/course.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\nimport { LeadService } from '../../../../services/lead.service';\nimport { LeadModel } from '../../../../models/lead.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../services/branch.service';\n\n@Component({\n  selector: 'ngx-manage-lead',\n  templateUrl: './manage-lead.component.html',\n  styleUrls: ['./manage-lead.component.scss'],\n})\nexport class ManageLeadComponent implements OnInit {\n  loading: boolean;\n  private branchId: string;\n  type: string;\n  categories: CategoryModel[];\n  category: string;\n  private courses: CourseModel[];\n  myCourses: CourseModel[];\n  course: string;\n  leads: LeadModel[];\n\n  constructor(\n    private branchService: BranchService,\n    public dateService: DateService,\n    private courseService: CourseService,\n    private toastrService: NbToastrService,\n    private leadService: LeadService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      // put the code from `ngOnInit` here\n      this.ngOnInit();\n    });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.route.queryParams.subscribe((param: Params) => {\n      this.type = param.type;\n      this.leadService.setLeadType(this.type);\n    });\n\n    if (this.type !== 'active' && this.type !== 'inactive') {\n      this.router.navigate(['../manage'], {\n        relativeTo: this.route,\n        queryParams: { type: 'active' },\n      });\n      return;\n    }\n\n    this.leads = [];\n    this.categories = [];\n    this.category = '';\n    this.courses = [];\n    this.course = '';\n    this.myCourses = [];\n    this.getCategories();\n    this.getCourses();\n  }\n\n  private getCategories() {\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\n      if (branch) {\n        this.categories = branch.categories;\n      }\n    });\n\n    if (!this.categories) {\n      this.branchService.getBranch(this.branchId).subscribe(\n        (branch: BranchModel) => {\n          this.branchService.setBranchData(branch);\n          this.categories = branch.categories;\n          this.getLeads(this.category, this.course);\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n    } else {\n      this.getLeads(this.category, this.course);\n    }\n  }\n\n  private getCourses() {\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\n      this.courses = courses;\n    });\n  }\n\n  onSelectCategory(category: string) {\n    this.category = category;\n    this.course = '';\n    this.myCourses = this.courses.filter(\n      (course: CourseModel) => course.basicDetails.category === category,\n    );\n    this.getLeads(this.category, this.course);\n  }\n\n  onSelectCourse(course: string) {\n    this.course = course;\n    this.getLeads(this.category, this.course);\n  }\n\n  getLeads(category: string, course: string) {\n    this.loading = true;\n    this.leadService.getLeads(this.branchId, category, course, this.type).subscribe(\n      (leads: LeadModel[]) => {\n        this.leads = leads;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  editLead(id: string) {\n    this.leadService.setLeadId(id);\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\n  }\n\n  deleteLead(id: string) {\n    this.leadService.deleteLead(id).subscribe(\n      (res: any) => {\n        this.removeLead(id);\n        this.showToastr('top-right', 'success', 'Lead Deleted Successfully');\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  private removeLead(id: string) {\n    const index = this.leads.findIndex((lead: LeadModel) => lead._id === id);\n    if (index >= 0) {\n      this.leads.splice(index, 1);\n    }\n  }\n\n  wonLead(id: string) {\n    this.leadService.changeLeadStatus(id, 'won').subscribe(\n      (res: any) => {\n        this.removeLead(id);\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  reOpenLead(id: string) {\n    this.leadService.changeLeadStatus(id, 'open').subscribe(\n      (res: any) => {\n        this.removeLead(id);\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  lostLead(id: string) {\n    this.leadService.changeLeadStatus(id, 'lost').subscribe(\n      (res: any) => {\n        this.removeLead(id);\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  getCategory(categoryId: string) {\n    const category = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\n    );\n\n    if (category) {\n      return category.category;\n    }\n\n    return '--';\n  }\n\n  getCourse(courseId: string) {\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\n\n    if (course) {\n      return course.basicDetails.courseName;\n    }\n\n    return '--';\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbBadgeModule,\n  NbTooltipModule,\n  NbSelectModule,\n} from '@nebular/theme';\nimport { ManageLeadComponent } from './manage-lead.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageLeadRoutingModule } from './manage-lead-routing.module';\n\n@NgModule({\n  declarations: [ManageLeadComponent],\n  imports: [\n    CommonModule,\n    ManageLeadRoutingModule,\n\n    NbCardModule,\n    NbSelectModule,\n    NbBadgeModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageLeadModule {}\n"]}