{"version":3,"sources":["webpack:///src/app/employee/branch/employee/manage-employee/manage-employee.component.html","webpack:///src/app/employee/branch/employee/manage-employee/manage-employee-routing.module.ts","webpack:///src/app/employee/branch/employee/manage-employee/manage-employee.component.ts","webpack:///src/app/employee/branch/employee/manage-employee/manage-employee.module.ts"],"names":["ManageEmployeeComponent","ManageEmployeeModule","ManageEmployeeRoutingModule","routes","path","component","branchService","employeeService","branchEmployeeService","router","route","this","queryParams","subscribe","param","ngOnInit","loading","branchId","getBranchId","type","setEmployeeType","branchEmployees","getBranchEmployeeNameIds","err","navigate","relativeTo","id","employee","setEmployeeId","setBranchEmployeeId","mode","branchEmployee","setBranchEmployeeData","status","i","changeBranchEmployeeStatus","res","splice","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"gkBAuBgB,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAAyB,8BAC7B,sCAAI,yB,qCAAqC,8BACzC,sCACE,6CAKE,+KAEA,mCACF,8BACA,8CAKE,kKAEA,qCACF,8BACA,8CAKE,kMAIA,0BACF,8BACF,8BACF,8B,oCAlCM,kEACA,qEACA,qGAwBA,4FAKA,yG,yBA3CZ,yCACE,2CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,oCAAQ,8BACZ,sCAAI,gCAAI,8BACR,uCAAI,mCAAM,8BACZ,8BACF,8BACA,0CACE,4CAoCF,8BACF,8BACF,+B,2CAtCU,qF,sBAwCR,wCAAiC,kDAAsB,+B,yBApD3D,0CACE,4CAkDA,8FAGF,wC,0EArDgC,yFAA0D,e,sBAuDxF,wCAAiC,sCAAU,+BC/DrD,ICQaA,ECOAC,EFUAC,EAzBPC,EAAiB,CACrB,CACEC,KAAM,GACNC,WCKSL,EAAN,WAKL,WACUM,EACAC,EACAC,EAEAC,EACAC,wBALA,KAAAJ,gBACA,KAAAC,kBACA,KAAAC,wBAEA,KAAAC,SACA,KAAAC,QAERC,KAAKD,MAAME,YAAYC,WAAWC,YAEhCH,EAAKI,c,UAfJ,O,EAAA,G,EAAA,kCAmBK,WACRJ,KAAKK,WACLL,KAAKM,SAAWN,KAAKL,cAAcY,cAC9BP,KAAKM,UAMVN,KAAKD,MAAME,YAAYC,WAAWC,YAChCH,EAAKQ,KAAOL,EAAMK,QAGF,WAAdR,KAAKQ,MAAmC,aAAdR,KAAKQ,MAQnCR,KAAKJ,gBAAgBa,gBAAgBT,KAAKQ,MAE1CR,KAAKU,gBAAkB,GAEvBV,KAAKH,sBAAsBc,yBAAyBX,KAAKM,SAAUN,KAAKQ,MAAMN,WAC3EQ,YACCV,EAAKU,gBAAkBA,EACvBV,EAAKK,cAENO,YACCZ,EAAKK,eAjBPL,KAAKF,OAAOe,SAAS,CAAC,aAAc,CAClCC,WAAYd,KAAKD,MACjBE,YAAa,CAAEO,KAAM,aAZvBR,KAAKF,OAAOe,SAAS,CAAC,OAAQ,CAAEC,WAAYd,KAAKD,UAvBhD,yCAuDcgB,EAAYC,GAC7BhB,KAAKJ,gBAAgBqB,cAAcD,GACnChB,KAAKH,sBAAsBqB,oBAAoBH,GAC/Cf,KAAKF,OAAOe,SAAS,CAAC,WAAY,CAAEC,WAAYd,KAAKD,MAAOE,YAAa,CAAEkB,KAAM,YA1D9E,2CA6DgBC,GACnBpB,KAAKH,sBAAsBwB,sBAAsBD,GACjDpB,KAAKF,OAAOe,SAAS,CAAC,aAAc,CAAEC,WAAYd,KAAKD,UA/DpD,iDAmEsBgB,EAAYO,EAAiBC,cACtDvB,KAAKH,sBAAsB2B,2BAA2BT,EAAIO,GAAQpB,WAC/DuB,YACCzB,EAAKU,gBAAgBgB,OAAOH,EAAG,GAC/BvB,EAAKK,cAENO,YACCZ,EAAKK,mB,2BA1EN,K,sCAAMhB,GAAuB,gM,mDAAvBA,EAAuB,8gB,GAAA,MFZpC,2CACE,kDACE,yCACE,yCACE,sCAAI,yB,qCAAgC,8BACtC,8BACF,8BACF,8BACA,kDACE,yCACE,yCACE,qDAuDA,+FAGF,8BACF,8BACF,8BACF,+B,0CApEY,sHAOU,yEAAkC,gB,mECDtD,CACEI,KAAM,iBACNkC,aAAc,kBACZ,iCAAkEC,MAC/DC,YAACA,OAAKA,EAAEC,wBAIf,CACErC,KAAM,KACNsC,WAAY,iBACZC,UAAW,SAQR,IAAMzC,EAAN,yB,gDAAMA,I,+EAAAA,IAA2B,SAH7B,CAAC,IAAa0C,SAASzC,IACtB,O,GERL,IAAMF,EAAN,yB,gDAAMA,I,+EAAAA,IAAoB,SATtB,CACP,IACA,EACA,IACA,IACA,IACA,S","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h3>{{ type | uppercase }} Employees</h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"branchEmployees.length > 0; else noBranchEmployees\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Employee</th>\n                  <th>Role</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let branchEmployee of branchEmployees; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ branchEmployee.name }}</td>\n                  <td>{{ branchEmployee.role | uppercase }}</td>\n                  <td>\n                    <button\n                      class=\"mr-3\"\n                      nbButton\n                      size=\"small\"\n                      status=\"basic\"\n                      (click)=\"editBranchEmployee(branchEmployee._id, branchEmployee.employee)\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      class=\"mr-3\"\n                      nbButton\n                      size=\"small\"\n                      status=\"success\"\n                      (click)=\"branchEmployeeSalary(branchEmployee)\"\n                    >\n                      Salary\n                    </button>\n                    <button\n                      class=\"\"\n                      nbButton\n                      size=\"small\"\n                      [status]=\"!branchEmployee.status ? 'warning' : 'danger'\"\n                      (click)=\"\n                        changeBranchEmployeeStatus(branchEmployee._id, !branchEmployee.status, i)\n                      \"\n                    >\n                      {{ !branchEmployee.status ? 'Activate' : 'Deactivate' }}\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBranchEmployees>\n            <p class=\"text-center pt-5 pb-5\">No Employees Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageEmployeeComponent } from './manage-employee.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageEmployeeComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageEmployeeRoutingModule {}\n","import { EmployeeService } from './../../../../services/employee.service';\nimport { BranchEmployeeService } from '../../../../services/branch-employee.service';\nimport { BranchEmployeeModel } from '../../../../models/branch-employee.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../services/branch.service';\n\n@Component({\n  selector: 'ngx-manage-employee',\n  templateUrl: './manage-employee.component.html',\n  styleUrls: ['./manage-employee.component.scss'],\n})\nexport class ManageEmployeeComponent implements OnInit {\n  loading: boolean;\n  private branchId: string;\n  type: string;\n  branchEmployees: BranchEmployeeModel[];\n  constructor(\n    private branchService: BranchService,\n    private employeeService: EmployeeService,\n    private branchEmployeeService: BranchEmployeeService,\n\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      // put the code from `ngOnInit` here\n      this.ngOnInit();\n    });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n\n      return;\n    }\n\n    this.route.queryParams.subscribe((param: Params) => {\n      this.type = param.type;\n    });\n\n    if (this.type !== 'active' && this.type !== 'inactive') {\n      this.router.navigate(['../manage'], {\n        relativeTo: this.route,\n        queryParams: { type: 'active' },\n      });\n      return;\n    }\n\n    this.employeeService.setEmployeeType(this.type);\n\n    this.branchEmployees = [];\n\n    this.branchEmployeeService.getBranchEmployeeNameIds(this.branchId, this.type).subscribe(\n      (branchEmployees: BranchEmployeeModel[]) => {\n        this.branchEmployees = branchEmployees;\n        this.loading = false;\n      },\n      (err: any) => {\n        this.loading = false;\n      },\n    );\n  }\n\n  editBranchEmployee(id: string, employee: string) {\n    this.employeeService.setEmployeeId(employee);\n    this.branchEmployeeService.setBranchEmployeeId(id);\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\n  }\n\n  branchEmployeeSalary(branchEmployee: BranchEmployeeModel) {\n    this.branchEmployeeService.setBranchEmployeeData(branchEmployee);\n    this.router.navigate(['../salary'], { relativeTo: this.route });\n  }\n  d;\n\n  changeBranchEmployeeStatus(id: string, status: boolean, i: number) {\n    this.branchEmployeeService.changeBranchEmployeeStatus(id, status).subscribe(\n      (res: any) => {\n        this.branchEmployees.splice(i, 1);\n        this.loading = false;\n      },\n      (err: any) => {\n        this.loading = false;\n      },\n    );\n  }\n}\n","import { ManageEmployeeComponent } from './manage-employee.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageEmployeeRoutingModule } from './manage-employee-routing.module';\n\nimport { NbCardModule, NbButtonModule, NbIconModule, NbTooltipModule } from '@nebular/theme';\n\n@NgModule({\n  declarations: [ManageEmployeeComponent],\n  imports: [\n    CommonModule,\n    ManageEmployeeRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageEmployeeModule {}\n"]}