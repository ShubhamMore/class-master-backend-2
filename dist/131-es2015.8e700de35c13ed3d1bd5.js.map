{"version":3,"sources":["webpack:///src/app/employee/branch/student/student-course/student-course-installment/manage-student-course-installment/manage-student-course-installment.component.html","webpack:///src/app/employee/branch/student/student-course/student-course-installment/manage-student-course-installment/manage-student-course-installment-routing.module.ts","webpack:///src/app/employee/branch/student/student-course/student-course-installment/manage-student-course-installment/manage-student-course-installment.component.ts","webpack:///src/app/employee/branch/student/student-course/student-course-installment/manage-student-course-installment/manage-student-course-installment.module.ts"],"names":["routes","path","component","ManageStudentCourseInstallmentComponent","branchService","dateService","toastrService","studentCourseInstallmentService","studentCourseInstallmentReceiptService","courseService","studentService","router","route","this","loading","branchId","getBranchId","categoryId","getCategoryId","studentId","getStudentId","courseId","getCourseId","studentCourseInstallmentId","getStudentCourseInstallmentId","getStudentCourseInstallment","subscribe","studentCourseInstallment","setStudentCourseInstallmentData","err","showToastr","back","getStudentName","pipe","map","studentName","getCourseName","courseName","installmentId","receiptId","setStudentCourseInstallmentReceiptId","setCourseInstallmentId","navigate","relativeTo","queryParams","mode","deleteStudentCourseInstallmentReceipt","res","setCourseInstallmentReceipt","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageStudentCourseInstallmentRoutingModule","forChild","ManageStudentCourseInstallmentModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9\">\n        <h3>\n          Installments\n          <small>of {{ getStudentName() | async | uppercase }}</small>\n        </h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\">\n            <table class=\"table\">\n              <tbody>\n                <tr class=\"border shadow-sm\">\n                  <td>\n                    <span>\n                      <strong>Course: </strong\n                      >{{ getCourseName(studentCourseInstallment.course) | async }}\n                    </span>\n                    <br />\n                    <span>\n                      <strong>Date: </strong\n                      >{{ dateService.formatDate(studentCourseInstallment.date) }}\n                    </span>\n                  </td>\n                  <td>\n                    <span>\n                      <strong>Collected Amount: </strong\n                      >{{ studentCourseInstallment.amountCollected }}\n                    </span>\n                    <br />\n                    <span>\n                      <strong>Pending Amount: </strong>{{ studentCourseInstallment.pendingAmount }}\n                    </span>\n                    <br />\n                    <span\n                      ><strong>Total Amount: </strong\n                      >{{ studentCourseInstallment.totalAmount }}</span\n                    >\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <br />\n\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"\n              studentCourseInstallment.installments.length > 0;\n              else noStudentCourseInstallments\n            \"\n          >\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Installment No</th>\n                  <th>Installment Date</th>\n                  <th>Installment Amount</th>\n                  <th>Pending Amount</th>\n                  <th>Collect/Receipt</th>\n                  <th colspan=\"2\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr\n                  *ngFor=\"let installment of studentCourseInstallment.installments; let i = index\"\n                >\n                  <td>Installment {{ installment.installmentNo }}</td>\n                  <td>{{ dateService.formatDate(installment.installmentDate) }}</td>\n                  <td>{{ installment.installmentAmount }}</td>\n                  <td>{{ installment.amountPending }}</td>\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      [status]=\"installment.receiptId ? 'success' : 'info'\"\n                      (click)=\"\n                        installment.receiptId\n                          ? showReceipt(installment.receiptId)\n                          : collectInstallment(installment._id)\n                      \"\n                    >\n                      {{ installment.receiptId ? 'Receipt' : ' Collect' }}\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      *ngIf=\"installment.receiptId\"\n                      nbButton\n                      size=\"small\"\n                      status=\"basic\"\n                      (click)=\"editReceipt(installment._id, installment.receiptId)\"\n                    >\n                      <nb-icon nbTooltip=\"Edit Receipt\" icon=\"edit-outline\"></nb-icon>\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      *ngIf=\"installment.receiptId\"\n                      nbButton\n                      size=\"small\"\n                      status=\"danger\"\n                      (click)=\"deleteReceipt(installment._id, installment.receiptId)\"\n                    >\n                      <nb-icon nbTooltip=\"Delete Receipt\" icon=\"trash-outline\"></nb-icon>\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noStudentCourseInstallments>\n            <p class=\"text-center pt-5 pb-5\">No Student Course Installments Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageStudentCourseInstallmentComponent } from './manage-student-course-installment.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageStudentCourseInstallmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageStudentCourseInstallmentRoutingModule {}\n","import { StudentCourseInstallmentReceiptService } from './../../../../../../services/student-course-installment-receipt.service';\r\nimport { DateService } from './../../../../../../services/shared-services/date.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { StudentCourseInstallmentModel } from './../../../../../../models/student-course-installment.model';\r\nimport { StudentCourseInstallmentService } from './../../../../../../services/student-course-installment.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { BranchService } from '../../../../../../services/branch.service';\r\nimport { StudentService } from '../../../../../../services/student.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { CourseService } from '../../../../../../services/course.service';\r\nimport { NbToastrService } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-manage-student-course-installment',\r\n  templateUrl: './manage-student-course-installment.component.html',\r\n  styleUrls: ['./manage-student-course-installment.component.scss'],\r\n})\r\nexport class ManageStudentCourseInstallmentComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n\r\n  private branchId: string;\r\n  private studentId: string;\r\n  private categoryId: string;\r\n  private courseId: string;\r\n  private studentCourseInstallmentId: string;\r\n\r\n  studentCourseInstallment: StudentCourseInstallmentModel;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    public dateService: DateService,\r\n    public toastrService: NbToastrService,\r\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\r\n    private studentCourseInstallmentReceiptService: StudentCourseInstallmentReceiptService,\r\n    private courseService: CourseService,\r\n    private studentService: StudentService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.branchId = this.branchService.getBranchId();\r\n    this.categoryId = this.branchService.getCategoryId();\r\n    this.studentId = this.studentService.getStudentId();\r\n    this.courseId = this.courseService.getCourseId();\r\n    this.studentCourseInstallmentId = this.studentCourseInstallmentService.getStudentCourseInstallmentId();\r\n\r\n    if (\r\n      !this.branchId ||\r\n      !this.categoryId ||\r\n      !this.courseId ||\r\n      !this.studentId ||\r\n      !this.studentCourseInstallmentId\r\n    ) {\r\n      this.back();\r\n      return;\r\n    }\r\n\r\n    // New Code\r\n    this.studentCourseInstallmentService\r\n      .getStudentCourseInstallment(this.studentCourseInstallmentId)\r\n      .subscribe(\r\n        (studentCourseInstallment: StudentCourseInstallmentModel) => {\r\n          this.studentCourseInstallmentService.setStudentCourseInstallmentData(\r\n            studentCourseInstallment,\r\n          );\r\n          this.studentCourseInstallment = studentCourseInstallment;\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.back();\r\n        },\r\n      );\r\n\r\n    //  Old Code\r\n    // this.studentCourseInstallmentService\r\n    //   .getStudentCourseInstallmentData()\r\n    //   .subscribe((studentCourseInstallment: StudentCourseInstallmentModel) => {\r\n    //     this.studentCourseInstallment = studentCourseInstallment;\r\n    //   });\r\n    // this.loading = false;\r\n  }\r\n\r\n  getStudentName(): Observable<string> {\r\n    return this.studentService.getStudentName().pipe(\r\n      map((studentName: string) => {\r\n        return studentName;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getCourseName(courseId: string): Observable<string> {\r\n    return this.courseService.getCourseName(courseId).pipe(\r\n      map((courseName: string) => {\r\n        return courseName;\r\n      }),\r\n    );\r\n  }\r\n\r\n  editReceipt(installmentId: string, receiptId: string) {\r\n    this.studentCourseInstallmentReceiptService.setStudentCourseInstallmentReceiptId(receiptId);\r\n    this.studentCourseInstallmentService.setCourseInstallmentId(installmentId);\r\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\r\n  }\r\n\r\n  showReceipt(receiptId: string) {\r\n    this.studentCourseInstallmentReceiptService.setStudentCourseInstallmentReceiptId(receiptId);\r\n    this.router.navigate(['../receipt'], { relativeTo: this.route });\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['../'], { relativeTo: this.route });\r\n  }\r\n\r\n  deleteReceipt(installmentId: string, receiptId: string) {\r\n    this.loading = true;\r\n    this.studentCourseInstallmentReceiptService\r\n      .deleteStudentCourseInstallmentReceipt(receiptId)\r\n      .subscribe(\r\n        (res: any) => {\r\n          this.studentCourseInstallmentService.setCourseInstallmentReceipt(installmentId, null);\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.loading = false;\r\n        },\r\n      );\r\n  }\r\n\r\n  collectInstallment(installmentId: string) {\r\n    this.studentCourseInstallmentService.setCourseInstallmentId(installmentId);\r\n    this.router.navigate(['../collect'], { relativeTo: this.route });\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","import { NbCardModule, NbButtonModule, NbIconModule, NbTooltipModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageStudentCourseInstallmentRoutingModule } from './manage-student-course-installment-routing.module';\nimport { ManageStudentCourseInstallmentComponent } from './manage-student-course-installment.component';\n\n@NgModule({\n  declarations: [ManageStudentCourseInstallmentComponent],\n  imports: [\n    CommonModule,\n    ManageStudentCourseInstallmentRoutingModule,\n\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageStudentCourseInstallmentModule {}\n"]}