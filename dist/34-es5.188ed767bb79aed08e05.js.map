{"version":3,"sources":["webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course.component.html","webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course-routing.module.ts","webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course.component.ts","webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course.module.ts"],"names":["AddStudentCourseComponent","AddStudentCourseModule","AddStudentCourseRoutingModule","routes","path","component","dateService","toastrService","branchService","courseService","batchService","discountAndOfferService","studentService","studentCourseService","studentCourseInstallmentService","router","route","mode","this","loading","submit","branchId","getBranchId","categoryId","getCategoryId","studentId","getStudentId","studentCourseId","getStudentCourseId","queryParams","subscribe","param","showToastr","navigate","relativeTo","discounts","courses","batches","courseBatches","discountTypes","rollNumberAlreadyExist","getCoursesData","getBatchesData","getDiscountAndOffersData","discountAndOffers","getDiscountTypes","studentCourseForm","course","validators","required","batch","rollNumber","min","discount","additionalDiscountType","length","additionalDiscountAmount","activationDate","getDateString","netPayable","discountPercentageValidator","bind","studentCourseFeeForm","installmentType","date","noOfInstallments","pendingAmount","amountCollected","totalAmount","studentCourseInstallmentForm","installments","getStudentCourseForEditing","res","studentCourse","studentCourseInstallment","patchValue","onSelectCourse","disableStudentCourseDetails","disableStudentCourseFeeForm","resetStudentCourseInstallments","forEach","installment","i","addStudentCourseInstallment","disableStudentCourseInstallmentFields","err","back","group","discountType","getRawValue","amount","invalidDiscountPercentage","batchId","toString","courseId","checkBatchRollNumber","rollNumberExist","filter","curBatch","find","curCourse","_id","calculateNetPayableAmount","get","enable","checkRollNumber","disable","discountId","curDicount","additionalDiscount","totalDiscountPercentage","totalDiscountAmount","totalFee","feeDetails","totalFees","discountAmount","calculatePendingAmount","onSelectInstallmentType","controls","installmentNo","installmentDate","installmentAmount","amountPending","receiptId","status","minInstallmentAmountValidator","maxInstallmentAmountValidator","minInstallmentPendingAmountValidator","maxInstallmentPendingAmountValidator","getMinInstallmentAmount","invalidMinInstallmentAmount","getMaxInstallmentAmount","invalidMaxInstallmentAmount","getMinInstallmentPendingAmount","invalidMinInstallmentPendingAmount","getMaxInstallmentPendingAmount","getStudentCourseInstallments","push","newStudentCourseInstallment","generateNoOfInstallments","basicDetails","duration","installmentDuration","millisecondsToDateString","dateToMilliseconds","installmentData","Math","ceil","enableStudentCourseInstallmentFields","getNoOfInstallments","noOfUnchangedInstallments","j","curAmountPending","index","stepper","previous","markAllAsTouched","invalid","enableStudentCourseDetails","next","validateStudentCourseInstallmentForm","invalidInstallments","studentCourseDetails","branch","category","student","studentCourseInstallmentDetails","editStudentCourse","addStudentCourse","position","message","show","courseName","batchName","curDiscount","offerName","code","replaceUrl","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card *ngIf=\"!loading\">\r\n  <nb-card-header>\r\n    <button\r\n      type=\"button\"\r\n      class=\"float-right\"\r\n      nbButton\r\n      size=\"small\"\r\n      status=\"warning\"\r\n      (click)=\"back()\"\r\n    >\r\n      Back\r\n    </button>\r\n    <h3 class=\"\">\r\n      {{ !studentCourse ? 'New Student Course' : 'Edit Student Course' }}\r\n    </h3>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\r\n      <nb-step [stepControl]=\"studentCourseForm\" label=\"Course Details\">\r\n        <form class=\"\" (submit)=\"studentCourseFormSubmit()\" [formGroup]=\"studentCourseForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-student-course\">Course:</label>\r\n                <nb-select\r\n                  id=\"input-student-course\"\r\n                  name=\"course\"\r\n                  formControlName=\"course\"\r\n                  placeholder=\"Select Course\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseForm.get('course').touched\r\n                      ? studentCourseForm.get('course').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (selectedChange)=\"onSelectCourse($event)\"\r\n                >\r\n                  <nb-option value=\"\">Select Course</nb-option>\r\n                  <nb-option *ngFor=\"let course of courses\" [value]=\"course._id\">{{\r\n                    course.basicDetails.courseName\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentCourseForm.get('course').invalid &&\r\n                    studentCourseForm.get('course').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('course').errors?.required\"\r\n                  >\r\n                    Student Course is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-student-batch\">Batch:</label>\r\n                <nb-select\r\n                  id=\"input-student-batch\"\r\n                  name=\"batch\"\r\n                  formControlName=\"batch\"\r\n                  placeholder=\"Select Batch\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseForm.get('batch').touched\r\n                      ? studentCourseForm.get('batch').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (selectedChange)=\"onSelectBatch($event)\"\r\n                >\r\n                  <nb-option value=\"\">Select Batch</nb-option>\r\n                  <nb-option *ngFor=\"let batch of courseBatches\" [value]=\"batch._id\">{{\r\n                    batch.basicDetails.batchName\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentCourseForm.get('batch').invalid && studentCourseForm.get('batch').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('batch').errors?.required\"\r\n                  >\r\n                    Student Batch is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-roll-number\">Roll Number:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-roll-number\"\r\n                  name=\"rollNumber\"\r\n                  formControlName=\"rollNumber\"\r\n                  min=\"1\"\r\n                  placeholder=\"Roll Number\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseForm.get('rollNumber').touched\r\n                      ? studentCourseForm.get('rollNumber').invalid || rollNumberAlreadyExist\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (input)=\"checkRollNumber()\"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    (studentCourseForm.get('rollNumber').invalid || rollNumberAlreadyExist) &&\r\n                    studentCourseForm.get('rollNumber').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('rollNumber').errors?.required\"\r\n                  >\r\n                    Roll Number is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('rollNumber').errors?.min\"\r\n                  >\r\n                    Roll Number should be greater than 0\r\n                  </p>\r\n                  <p class=\"caption status-danger\" *ngIf=\"rollNumberAlreadyExist\">\r\n                    This roll number already Exist!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-student-discount\">Discount/Offer:</label>\r\n                <nb-select\r\n                  id=\"input-student-discount\"\r\n                  name=\"discount\"\r\n                  formControlName=\"discount\"\r\n                  placeholder=\"Select Discount\"\r\n                  fullWidth\r\n                  (selectedChange)=\"onSelectDiscount($event)\"\r\n                >\r\n                  <nb-option value=\"\">Select Discount</nb-option>\r\n                  <nb-option *ngFor=\"let discount of discounts\" [value]=\"discount._id\">{{\r\n                    getDiscount(discount._id)\r\n                  }}</nb-option>\r\n                </nb-select>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-additional-discount-type\"\r\n                  >Additional Discount Type:</label\r\n                >\r\n                <nb-select\r\n                  id=\"input-additional-discount-type\"\r\n                  name=\"additionalDiscountType\"\r\n                  formControlName=\"additionalDiscountType\"\r\n                  placeholder=\"Select Discount Type\"\r\n                  fullWidth\r\n                  [selected]=\"discountTypes.length > 0 ? discountTypes[0] : ''\"\r\n                  (selectedChange)=\"changeAdditionalDiscountType()\"\r\n                >\r\n                  <nb-option *ngFor=\"let discountType of discountTypes\" [value]=\"discountType\">{{\r\n                    discountType | uppercase\r\n                  }}</nb-option>\r\n                </nb-select>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-discount-amount\">Additional Discount Amount:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-discount-amount\"\r\n                  name=\"additionalDiscountAmount\"\r\n                  formControlName=\"additionalDiscountAmount\"\r\n                  placeholder=\"Discount Amount\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseForm.get('additionalDiscountAmount').touched\r\n                      ? studentCourseForm.get('additionalDiscountAmount').invalid ||\r\n                        studentCourseForm.hasError('invalidDiscountPercentage')\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (input)=\"onAdditionalDiscountAmount($event.target.value)\"\r\n                />\r\n                <ng-container *ngIf=\"studentCourseForm.get('additionalDiscountAmount').touched\">\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('additionalDiscountAmount').errors?.min\"\r\n                  >\r\n                    Discount Amount should be more than or equal to 0\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.hasError('invalidDiscountPercentage')\"\r\n                  >\r\n                    Discount Percentage should be between 0% to 100%\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-activation-date\">Activation Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-activation-date\"\r\n                  name=\"activationDate\"\r\n                  formControlName=\"activationDate\"\r\n                  placeholder=\"Activation Date\"\r\n                  fullWidth\r\n                  [status]=\"studentCourseForm.get('activationDate').invalid ? 'danger' : 'success'\"\r\n                />\r\n                <ng-container *ngIf=\"studentCourseForm.get('activationDate').invalid\">\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('activationDate').errors?.required\"\r\n                  >\r\n                    Activation date is required\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-net-payable\">Net Payable:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-net-payable\"\r\n                  name=\"netPayable\"\r\n                  formControlName=\"netPayable\"\r\n                  placeholder=\"Net Payable\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseForm.get('netPayable').touched\r\n                      ? studentCourseForm.get('netPayable').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  disabled=\"true\"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentCourseForm.get('netPayable').invalid &&\r\n                    studentCourseForm.get('netPayable').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('netPayable').errors?.required\"\r\n                  >\r\n                    Net Payable Amount is Required\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseForm.get('netPayable').errors?.min\"\r\n                  >\r\n                    Net Payable Amount should be greater than 0\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step [stepControl]=\"studentCourseFeeForm\" label=\"Course Fee Details\">\r\n        <form\r\n          [formGroup]=\"studentCourseFeeForm\"\r\n          (ngSubmit)=\"studentCourseFeeFormSubmit()\"\r\n          class=\"step-container\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-date\">Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-date\"\r\n                  name=\"date\"\r\n                  formControlName=\"date\"\r\n                  placeholder=\"Date\"\r\n                  fullWidth\r\n                  [status]=\"studentCourseFeeForm.get('date').invalid ? 'danger' : 'success'\"\r\n                />\r\n                <ng-container *ngIf=\"studentCourseFeeForm.get('date').invalid\">\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('date').errors?.required\"\r\n                  >\r\n                    Date is required\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-course-installment-type\">Installment Type:</label>\r\n                <nb-select\r\n                  id=\"input-course-installment-type\"\r\n                  name=\"installmentType\"\r\n                  formControlName=\"installmentType\"\r\n                  placeholder=\"Select Installment Type\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseFeeForm.get('installmentType').touched\r\n                      ? studentCourseFeeForm.get('installmentType').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (selectedChange)=\"onSelectInstallmentType($event)\"\r\n                >\r\n                  <nb-option value=\"0\">Pay Once</nb-option>\r\n                  <nb-option value=\"1\">Pay Twice</nb-option>\r\n                  <nb-option value=\"2\">Pay Quarterly</nb-option>\r\n                  <nb-option value=\"3\">Pay Monthly</nb-option>\r\n                  <nb-option value=\"4\">Pay Custom</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentCourseFeeForm.get('installmentType').invalid &&\r\n                    studentCourseFeeForm.get('installmentType').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('installmentType').errors?.required\"\r\n                  >\r\n                    Student Course is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-noOfInstallments\">Number of Installments:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-noOfInstallments\"\r\n                  name=\"noOfInstallments\"\r\n                  formControlName=\"noOfInstallments\"\r\n                  placeholder=\"Number of Installments\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseFeeForm.get('noOfInstallments').touched\r\n                      ? studentCourseFeeForm.get('noOfInstallments').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (input)=\"generateNoOfInstallments($event.target.value)\"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentCourseFeeForm.get('noOfInstallments').invalid &&\r\n                    studentCourseFeeForm.get('noOfInstallments').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('noOfInstallments').errors?.required\"\r\n                  >\r\n                    Number of Installments are Required\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('noOfInstallments').errors?.min\"\r\n                  >\r\n                    Number of Installments should be greater than 0\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-pendingAmount\">Pending Amount:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-pendingAmount\"\r\n                  name=\"pendingAmount\"\r\n                  formControlName=\"pendingAmount\"\r\n                  placeholder=\"Pending Amount\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseFeeForm.get('pendingAmount').invalid ? 'danger' : 'success'\r\n                  \"\r\n                  disabled=\"true\"\r\n                />\r\n                <ng-container *ngIf=\"studentCourseFeeForm.get('pendingAmount').invalid\">\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('pendingAmount').errors?.required\"\r\n                  >\r\n                    Pending Amount is Required\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('pendingAmount').errors?.min\"\r\n                  >\r\n                    Pending Amount should be greater than 0\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-amountCollected\">Amount Collected:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-amountCollected\"\r\n                  name=\"amountCollected\"\r\n                  formControlName=\"amountCollected\"\r\n                  placeholder=\"Amount Collected\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentCourseFeeForm.get('amountCollected').invalid ? 'danger' : 'success'\r\n                  \"\r\n                  disabled=\"true\"\r\n                />\r\n                <ng-container *ngIf=\"studentCourseFeeForm.get('amountCollected').invalid\">\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('amountCollected').errors?.required\"\r\n                  >\r\n                    Collected Amount is Required\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('amountCollected').errors?.min\"\r\n                  >\r\n                    Collected Amount should be greater than 0\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-totalAmount\">Total Payable Amount:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-totalAmount\"\r\n                  name=\"totalAmount\"\r\n                  formControlName=\"totalAmount\"\r\n                  placeholder=\"Total Amount\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"studentCourseFeeForm.get('totalAmount').invalid ? 'danger' : 'success'\"\r\n                  disabled=\"true\"\r\n                />\r\n                <ng-container *ngIf=\"studentCourseFeeForm.get('totalAmount').invalid\">\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('totalAmount').errors?.required\"\r\n                  >\r\n                    Total Amount is Required\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentCourseFeeForm.get('totalAmount').errors?.min\"\r\n                  >\r\n                    Total Amount should be greater than 0\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step [stepControl]=\"studentCourseInstallmentForm\" label=\"Installment Details\">\r\n        <form\r\n          [formGroup]=\"studentCourseInstallmentForm\"\r\n          (ngSubmit)=\"studentCourseInstallmentFormSubmit()\"\r\n          class=\"step-container\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <div\r\n                class=\"table-responsive\"\r\n                *ngIf=\"\r\n                  !!getNoOfInstallments() &&\r\n                    studentCourseInstallmentForm.get('installments')['controls'].length > 0;\r\n                  else noInstallments\r\n                \"\r\n              >\r\n                <table class=\"table table-bordered\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Installment Number</th>\r\n                      <th>Installment Date</th>\r\n                      <th>Installment Amount</th>\r\n                      <th>Pending Amount after This Installment</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <ng-container\r\n                      *ngFor=\"\r\n                        let installment of studentCourseInstallmentForm.get('installments')[\r\n                          'controls'\r\n                        ];\r\n                        let i = index\r\n                      \"\r\n                    >\r\n                      <tr [formGroup]=\"installment\">\r\n                        <td>Installment {{ installment.value.installmentNo }}</td>\r\n                        <td>\r\n                          <div class=\"form-control-group\">\r\n                            <input\r\n                              type=\"date\"\r\n                              nbInput\r\n                              id=\"input-installmentDate-{{ i }}\"\r\n                              name=\"installmentDate-{{ i }}\"\r\n                              formControlName=\"installmentDate\"\r\n                              placeholder=\"Installment Date\"\r\n                              fullWidth\r\n                              [min]=\"getMinInstallmentDate(i)\"\r\n                              [max]=\"getMaxInstallmentDate(i)\"\r\n                              [status]=\"\r\n                                installment.get('installmentDate').touched\r\n                                  ? installment.get('installmentDate').invalid\r\n                                    ? 'danger'\r\n                                    : 'success'\r\n                                  : 'basic'\r\n                              \"\r\n                            />\r\n                            <ng-container\r\n                              *ngIf=\"\r\n                                installment.get('installmentDate').touched &&\r\n                                installment.get('installmentDate').invalid\r\n                              \"\r\n                            >\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.get('installmentDate').errors?.required\"\r\n                              >\r\n                                Installment {{ i + 1 }} Date is required\r\n                              </p>\r\n                            </ng-container>\r\n                          </div>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <div class=\"form-control-group\">\r\n                            <input\r\n                              type=\"number\"\r\n                              nbInput\r\n                              id=\"input-installmentAmount-{{ i }}\"\r\n                              name=\"installmentAmount-{{ i }}\"\r\n                              formControlName=\"installmentAmount\"\r\n                              placeholder=\"Installment Amount\"\r\n                              [min]=\"getMinInstallmentAmount(i)\"\r\n                              [max]=\"getMaxInstallmentAmount(i)\"\r\n                              fullWidth\r\n                              [status]=\"\r\n                                installment.get('installmentAmount').touched\r\n                                  ? installment.get('installmentAmount').invalid ||\r\n                                    installment.hasError('invalidMinInstallmentAmount') ||\r\n                                    installment.hasError('invalidMaxInstallmentAmount')\r\n                                    ? 'danger'\r\n                                    : 'success'\r\n                                  : 'basic'\r\n                              \"\r\n                              (input)=\"customInstallmentAmount($event.target.value, i)\"\r\n                            />\r\n                            <ng-container *ngIf=\"installment.get('installmentAmount').touched\">\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.get('installmentAmount').errors?.required\"\r\n                              >\r\n                                Installment {{ i + 1 }} Amount is Required\r\n                              </p>\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.hasError('invalidMinInstallmentAmount')\"\r\n                              >\r\n                                Installment {{ i + 1 }} Amount should be Minimum\r\n                                {{ getMinInstallmentAmount(i) }}\r\n                              </p>\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.hasError('invalidMaxInstallmentAmount')\"\r\n                              >\r\n                                Installment {{ i + 1 }} Amount should be Maximum\r\n                                {{ getMaxInstallmentAmount(i) }}\r\n                              </p>\r\n                            </ng-container>\r\n                          </div>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <div class=\"form-control-group\">\r\n                            <input\r\n                              type=\"number\"\r\n                              nbInput\r\n                              id=\"input-amountPending-{{ i }}\"\r\n                              name=\"amountPending-{{ i }}\"\r\n                              formControlName=\"amountPending\"\r\n                              placeholder=\"Pending Amount\"\r\n                              [min]=\"getMinInstallmentPendingAmount(i)\"\r\n                              [max]=\"getMaxInstallmentPendingAmount(i)\"\r\n                              fullWidth\r\n                              [status]=\"\r\n                                installment.get('amountPending').touched\r\n                                  ? installment.get('amountPending').invalid ||\r\n                                    installment.hasError('invalidMinInstallmentPendingAmount') ||\r\n                                    installment.hasError('invalidMaxInstallmentPendingAmount')\r\n                                    ? 'danger'\r\n                                    : 'success'\r\n                                  : 'basic'\r\n                              \"\r\n                              disabled=\"true\"\r\n                            />\r\n                            <ng-container *ngIf=\"installment.get('amountPending').touched\">\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.get('amountPending').errors?.required\"\r\n                              >\r\n                                Installment {{ i + 1 }} Pending Amount is Required\r\n                              </p>\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.hasError('invalidMinInstallmentPendingAmount')\"\r\n                              >\r\n                                Installment {{ i + 1 }} Pending Amount should be Minimum\r\n                                {{ getMinInstallmentPendingAmount(i) }}\r\n                              </p>\r\n                              <p\r\n                                class=\"caption status-danger\"\r\n                                *ngIf=\"installment.hasError('invalidMaxInstallmentPendingAmount')\"\r\n                              >\r\n                                Installment {{ i + 1 }} Pending Amount should be Maximum\r\n                                {{ getMaxInstallmentPendingAmount(i) }}\r\n                              </p>\r\n                            </ng-container>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </ng-container>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <ng-template #noInstallments>\r\n                <p class=\"mt-4 text-center\">No Installments</p>\r\n              </ng-template>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step label=\"Submit\">\r\n        <div class=\"step-container\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-bordered\">\r\n              <tbody>\r\n                <tr>\r\n                  <th colspan=\"2\">Course Details</th>\r\n                </tr>\r\n                <tr>\r\n                  <th>Course</th>\r\n                  <td>{{ getCourse(studentCourseForm.value.course) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Batch</th>\r\n                  <td>{{ getBatch(studentCourseForm.value.batch) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Roll Number</th>\r\n                  <td>{{ studentCourseForm.value.rollNumber }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Discount</th>\r\n                  <td>{{ getDiscount(studentCourseForm.value.discount) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Additional Discount</th>\r\n                  <td>\r\n                    {{\r\n                      studentCourseForm.value.additionalDiscountAmount\r\n                        ? studentCourseForm.value.additionalDiscountAmount +\r\n                          (studentCourseForm.value.additionalDiscountType === 'percentage'\r\n                            ? '%'\r\n                            : '')\r\n                        : '--'\r\n                    }}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Net Payable</th>\r\n                  <td>{{ studentCourseForm.value.netPayable }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Activation Date</th>\r\n                  <td>{{ dateService.formatDate(studentCourseForm.value.activationDate) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th colspan=\"2\">Course Fee Details</th>\r\n                </tr>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <td>{{ dateService.formatDate(studentCourseFeeForm.value.date) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Number of Installments</th>\r\n                  <td>{{ studentCourseFeeForm.getRawValue().noOfInstallments }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Amount Collected</th>\r\n                  <td>{{ studentCourseFeeForm.value.amountCollected }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Pending Amount</th>\r\n                  <td>{{ studentCourseFeeForm.value.pendingAmount }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Total Payable Amount</th>\r\n                  <td>{{ studentCourseFeeForm.value.totalAmount }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th colspan=\"2\">Installment Details</th>\r\n                </tr>\r\n                <tr>\r\n                  <td colspan=\"2\">\r\n                    <div class=\"table-responsive\">\r\n                      <table class=\"table table-sm table-bordered\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Installment No.</th>\r\n                            <th>Installment Date</th>\r\n                            <th>Installment Amount</th>\r\n                            <th>Pending Amount after Installment</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr\r\n                            *ngFor=\"\r\n                              let installment of studentCourseInstallmentForm.get('installments')[\r\n                                'controls'\r\n                              ];\r\n                              let i = index\r\n                            \"\r\n                          >\r\n                            <td>Installment {{ installment.value.installmentNo }}</td>\r\n                            <td>\r\n                              {{ dateService.formatDate(installment.value.installmentDate) }}\r\n                            </td>\r\n                            <td>{{ installment.value.installmentAmount }}</td>\r\n                            <td>{{ installment.value.amountPending }}</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"\"\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"previousStep()\"\r\n                [disabled]=\"submit\"\r\n              >\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"saveStudentCourse()\"\r\n                [disabled]=\"submit\"\r\n                [nbSpinner]=\"submit\"\r\n                nbSpinnerStatus=\"primary\"\r\n                nbSpinnerSize=\"small\"\r\n              >\r\n                <span>Submit</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-step>\r\n    </nb-stepper>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddStudentCourseComponent } from './add-student-course.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddStudentCourseComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddStudentCourseRoutingModule {}\n","import { InstallmentModel } from './../../../../../models/student-course-installment.model';\r\nimport { CourseService } from './../../../../../services/course.service';\r\nimport { BatchService } from './../../../../../services/batch.service';\r\nimport { DiscountAndOfferModel } from './../../../../../models/discount-and-offer.model';\r\nimport { BatchModel } from './../../../../../models/batch.model';\r\nimport { CourseModel } from './../../../../../models/course.model';\r\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\r\nimport { StudentCourseService } from './../../../../../services/student-course.service';\r\nimport { DateService } from './../../../../../services/shared-services/date.service';\r\nimport { StudentService } from './../../../../../services/student.service';\r\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\r\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { BranchService } from './../../../../../services/branch.service';\r\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\nimport { StudentCourseInstallmentService } from '../../../../../services/student-course-installment.service';\r\nimport { StudentCourseInstallmentModel } from '../../../../../models/student-course-installment.model';\r\nimport { ObjectId } from 'bson';\r\nimport { DiscountAndOfferService } from '../../../../../services/discount-and-offer.service';\r\n\r\n@Component({\r\n  selector: 'ngx-add-student-course',\r\n  templateUrl: './add-student-course.component.html',\r\n  styleUrls: ['./add-student-course.component.scss'],\r\n})\r\nexport class AddStudentCourseComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  private branchId: string;\r\n  private studentId: string;\r\n  private categoryId: string;\r\n  private studentCourseId: string;\r\n\r\n  studentCourse: StudentCourseModel;\r\n  studentCourseInstallment: StudentCourseInstallmentModel;\r\n\r\n  discount: DiscountAndOfferModel;\r\n  discounts: DiscountAndOfferModel[];\r\n\r\n  discountTypes: string[];\r\n\r\n  course: CourseModel;\r\n  courses: CourseModel[];\r\n\r\n  batch: BatchModel;\r\n  private batches: BatchModel[];\r\n  courseBatches: BatchModel[];\r\n\r\n  rollNumberAlreadyExist: boolean;\r\n\r\n  studentCourseForm: FormGroup;\r\n  studentCourseFeeForm: FormGroup;\r\n  studentCourseInstallmentForm: FormGroup;\r\n\r\n  constructor(\r\n    public dateService: DateService,\r\n    private toastrService: NbToastrService,\r\n    private branchService: BranchService,\r\n    private courseService: CourseService,\r\n    private batchService: BatchService,\r\n    private discountAndOfferService: DiscountAndOfferService,\r\n    private studentService: StudentService,\r\n    private studentCourseService: StudentCourseService,\r\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\r\n\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    // route.queryParams.subscribe((param: Params) => {\r\n    //   this.ngOnInit();\r\n    // });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    this.categoryId = this.branchService.getCategoryId();\r\n    this.studentId = this.studentService.getStudentId();\r\n    if (!this.branchId && !this.categoryId && !this.studentId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n\r\n      return;\r\n    }\r\n\r\n    this.studentCourseId = this.studentCourseService.getStudentCourseId();\r\n\r\n    let mode: string;\r\n\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      mode = param.mode;\r\n    });\r\n\r\n    if (mode && mode !== 'edit') {\r\n      this.showToastr('top-right', 'danger', 'Invalid Route');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    } else if (mode && !this.studentCourseId) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Not Found');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.discounts = [];\r\n    this.courses = [];\r\n    this.batches = [];\r\n    this.courseBatches = [];\r\n    this.discountTypes = [];\r\n    this.rollNumberAlreadyExist = false;\r\n\r\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\r\n      this.courses = courses;\r\n    });\r\n\r\n    this.batchService.getBatchesData().subscribe((batches: BatchModel[]) => {\r\n      this.batches = batches;\r\n    });\r\n\r\n    this.discountAndOfferService\r\n      .getDiscountAndOffersData()\r\n      .subscribe((discountAndOffers: DiscountAndOfferModel[]) => {\r\n        this.discounts = discountAndOffers;\r\n      });\r\n\r\n    this.discountTypes = this.discountAndOfferService.getDiscountTypes();\r\n\r\n    this.studentCourseForm = new FormGroup(\r\n      {\r\n        course: new FormControl('', { validators: [Validators.required] }),\r\n        batch: new FormControl('', { validators: [Validators.required] }),\r\n        rollNumber: new FormControl(null, { validators: [Validators.required, Validators.min(1)] }),\r\n        discount: new FormControl('', {\r\n          validators: [],\r\n        }),\r\n        additionalDiscountType: new FormControl(\r\n          this.discountTypes.length > 0 ? this.discountTypes[0] : '',\r\n          {\r\n            validators: [],\r\n          },\r\n        ),\r\n        additionalDiscountAmount: new FormControl(0, {\r\n          validators: [Validators.min(0)],\r\n        }),\r\n        activationDate: new FormControl(this.dateService.getDateString(), {\r\n          validators: [Validators.required],\r\n        }),\r\n        netPayable: new FormControl(0, {\r\n          validators: [Validators.required],\r\n        }),\r\n      },\r\n      {\r\n        validators: this.discountPercentageValidator.bind(this),\r\n      },\r\n    );\r\n\r\n    this.studentCourseFeeForm = new FormGroup({\r\n      installmentType: new FormControl('0', {\r\n        validators: [Validators.required],\r\n      }),\r\n      date: new FormControl(this.dateService.getDateString(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      noOfInstallments: new FormControl(1, {\r\n        validators: [Validators.required, Validators.min(1)],\r\n      }),\r\n      pendingAmount: new FormControl(0, {\r\n        validators: [Validators.required, Validators.min(0)],\r\n      }),\r\n      amountCollected: new FormControl(0, {\r\n        validators: [Validators.required, Validators.min(0)],\r\n      }),\r\n      totalAmount: new FormControl(0, {\r\n        validators: [Validators.required, Validators.min(0)],\r\n      }),\r\n    });\r\n\r\n    this.studentCourseInstallmentForm = new FormGroup({\r\n      installments: new FormArray([]),\r\n    });\r\n\r\n    if (mode && this.studentId && this.studentCourseId) {\r\n      this.studentCourseService.getStudentCourseForEditing(this.studentCourseId).subscribe(\r\n        (res: any) => {\r\n          this.studentCourse = res.studentCourse;\r\n          this.studentCourseInstallment = res.studentCourseInstallment;\r\n          this.studentCourseForm.patchValue({\r\n            course: this.studentCourse.course,\r\n            activationDate: this.studentCourse.activationDate,\r\n            rollNumber: this.studentCourse.rollNumber,\r\n            discount: this.studentCourse.discount,\r\n            additionalDiscountType: this.studentCourse.additionalDiscountType,\r\n            additionalDiscountAmount: this.studentCourse.additionalDiscountAmount,\r\n            netPayable: this.studentCourse.netPayable,\r\n          });\r\n\r\n          this.onSelectCourse(this.studentCourse.course);\r\n\r\n          this.studentCourseForm.patchValue({\r\n            batch: this.studentCourse.batch,\r\n          });\r\n\r\n          this.disableStudentCourseDetails();\r\n\r\n          if (this.studentCourseInstallment) {\r\n            this.studentCourseFeeForm.patchValue({\r\n              installmentType: this.studentCourseInstallment.installmentType,\r\n              date: this.studentCourseInstallment.date,\r\n              noOfInstallments: this.studentCourseInstallment.noOfInstallments,\r\n              amountCollected: this.studentCourseInstallment.amountCollected,\r\n              pendingAmount: this.studentCourseInstallment.pendingAmount,\r\n              totalAmount: this.studentCourseInstallment.totalAmount,\r\n            });\r\n\r\n            this.disableStudentCourseFeeForm();\r\n\r\n            this.resetStudentCourseInstallments();\r\n\r\n            this.studentCourseInstallment.installments.forEach(\r\n              (installment: InstallmentModel, i: number) => {\r\n                this.addStudentCourseInstallment(installment);\r\n                if (installment.receiptId) {\r\n                  // this.getStudentCourseInstallments()[i].get('installmentDate').disable();\r\n                }\r\n              },\r\n            );\r\n\r\n            this.disableStudentCourseInstallmentFields();\r\n          }\r\n\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.back();\r\n        },\r\n      );\r\n    } else {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  private discountPercentageValidator(group: FormGroup): { [s: string]: boolean } {\r\n    const discountType = group.getRawValue().additionalDiscountType;\r\n    const amount = +group.getRawValue().additionalDiscountAmount;\r\n    if (discountType === 'percentage' && amount > 100) {\r\n      return { invalidDiscountPercentage: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkRollNumber() {\r\n    let rollNumber: any = this.studentCourseForm.getRawValue().rollNumber;\r\n    const batchId = this.studentCourseForm.getRawValue().batch;\r\n    if (rollNumber) {\r\n      rollNumber = rollNumber.toString();\r\n      if (\r\n        this.studentCourse &&\r\n        this.studentCourse.batch === batchId &&\r\n        this.studentCourse.rollNumber === rollNumber\r\n      ) {\r\n        return;\r\n      }\r\n      const courseId = this.studentCourseForm.getRawValue().course;\r\n      if (courseId && batchId) {\r\n        this.studentCourseService\r\n          .checkBatchRollNumber(this.branchId, this.categoryId, courseId, batchId, rollNumber)\r\n          .subscribe(\r\n            (res: any) => {\r\n              this.rollNumberAlreadyExist = res.rollNumberExist;\r\n            },\r\n            (err: any) => {},\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  onSelectCourse(courseId: string) {\r\n    this.studentCourseForm.patchValue({ batch: '' });\r\n    this.courseBatches = [];\r\n    this.courseBatches = this.batches.filter(\r\n      (curBatch: BatchModel) => curBatch.course === courseId,\r\n    );\r\n    this.course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\r\n    this.calculateNetPayableAmount();\r\n  }\r\n\r\n  onSelectBatch(batchId: string) {\r\n    if (batchId !== '') {\r\n      this.studentCourseForm.get('rollNumber').enable();\r\n      this.batch = this.batches.find((curBatch: BatchModel) => curBatch._id === batchId);\r\n      this.checkRollNumber();\r\n    } else {\r\n      this.studentCourseForm.get('rollNumber').disable();\r\n    }\r\n  }\r\n\r\n  onSelectDiscount(discountId: string) {\r\n    this.discount = this.discounts.find((curDicount: any) => curDicount._id === discountId);\r\n    this.calculateNetPayableAmount();\r\n  }\r\n\r\n  onAdditionalDiscountAmount(amount: number) {\r\n    if (amount >= 0) {\r\n      this.calculateNetPayableAmount();\r\n    }\r\n  }\r\n\r\n  changeAdditionalDiscountType() {\r\n    this.studentCourseForm.patchValue({ additionalDiscount: 0 });\r\n    this.calculateNetPayableAmount();\r\n  }\r\n\r\n  private calculateNetPayableAmount() {\r\n    let netPayable = 0;\r\n    let totalDiscountPercentage = 0;\r\n    let totalDiscountAmount = 0;\r\n    let calculatedAmount = 0;\r\n\r\n    const totalFee = this.course ? +this.course.feeDetails.totalFees : 0;\r\n    const discountType = this.discount ? this.discount.discountType : '';\r\n    const additionalDiscountType = this.studentCourseForm.getRawValue().additionalDiscountType;\r\n    const discount = this.discount ? +this.discount.discountAmount : 0;\r\n    const additionalDiscount = +this.studentCourseForm.getRawValue().additionalDiscountAmount;\r\n\r\n    if (this.course && totalFee) {\r\n      calculatedAmount = totalFee;\r\n\r\n      if (this.discount && discountType) {\r\n        if (discountType === 'percentage') {\r\n          totalDiscountPercentage += discount;\r\n        } else {\r\n          totalDiscountAmount += discount;\r\n        }\r\n      }\r\n\r\n      if (additionalDiscount) {\r\n        if (additionalDiscountType === 'percentage') {\r\n          totalDiscountPercentage += additionalDiscount;\r\n        } else {\r\n          totalDiscountAmount += additionalDiscount;\r\n        }\r\n      }\r\n      const percentageAmount = (totalDiscountPercentage / 100) * totalFee;\r\n      calculatedAmount = totalFee - totalDiscountAmount - percentageAmount;\r\n\r\n      netPayable = calculatedAmount;\r\n\r\n      this.studentCourseForm.patchValue({ netPayable });\r\n      this.studentCourseFeeForm.patchValue({ totalAmount: netPayable });\r\n\r\n      this.calculatePendingAmount();\r\n\r\n      const installmentType = this.studentCourseFeeForm.getRawValue().installmentType;\r\n      this.onSelectInstallmentType(installmentType);\r\n    }\r\n  }\r\n\r\n  private calculatePendingAmount() {\r\n    let pendingAmount = 0;\r\n    const totalAmount = this.studentCourseFeeForm.getRawValue().totalAmount;\r\n    const amountCollected = this.studentCourseFeeForm.getRawValue().amountCollected;\r\n    pendingAmount = +totalAmount - (amountCollected ? amountCollected : 0);\r\n    this.studentCourseFeeForm.patchValue({ pendingAmount });\r\n  }\r\n\r\n  private enableStudentCourseDetails() {\r\n    this.studentCourseForm.get('course').enable();\r\n    this.studentCourseForm.get('discount').enable();\r\n    this.studentCourseForm.get('additionalDiscountType').enable();\r\n    this.studentCourseForm.get('additionalDiscountAmount').enable();\r\n  }\r\n\r\n  private disableStudentCourseDetails() {\r\n    this.studentCourseForm.get('course').disable();\r\n    this.studentCourseForm.get('discount').disable();\r\n    this.studentCourseForm.get('additionalDiscountType').disable();\r\n    this.studentCourseForm.get('additionalDiscountAmount').disable();\r\n  }\r\n\r\n  private enableStudentCourseFeeForm() {\r\n    this.studentCourseFeeForm.get('installmentType').enable();\r\n    this.studentCourseFeeForm.get('noOfInstallments').enable();\r\n  }\r\n\r\n  private disableStudentCourseFeeForm() {\r\n    this.studentCourseFeeForm.get('installmentType').disable();\r\n    this.studentCourseFeeForm.get('noOfInstallments').disable();\r\n  }\r\n\r\n  private getStudentCourseInstallments(): FormGroup[] {\r\n    const installments = this.studentCourseInstallmentForm.get('installments') as FormArray;\r\n    return installments.controls as FormGroup[];\r\n  }\r\n\r\n  private resetStudentCourseInstallments() {\r\n    const installments = this.studentCourseInstallmentForm.get('installments') as FormArray;\r\n    installments.controls = [];\r\n  }\r\n\r\n  private newStudentCourseInstallment(studentCourseInstallment: any) {\r\n    return new FormGroup(\r\n      {\r\n        _id: new FormControl(\r\n          studentCourseInstallment._id ? studentCourseInstallment._id : new ObjectId().toString(),\r\n          {\r\n            validators: [Validators.required],\r\n          },\r\n        ),\r\n        installmentNo: new FormControl(\r\n          studentCourseInstallment.installmentNo ? studentCourseInstallment.installmentNo : null,\r\n          {\r\n            validators: [Validators.required],\r\n          },\r\n        ),\r\n        installmentDate: new FormControl(\r\n          studentCourseInstallment.installmentDate\r\n            ? studentCourseInstallment.installmentDate\r\n            : null,\r\n          {\r\n            validators: [Validators.required],\r\n          },\r\n        ),\r\n        installmentAmount: new FormControl(\r\n          studentCourseInstallment.installmentAmount\r\n            ? studentCourseInstallment.installmentAmount\r\n            : 0,\r\n          {\r\n            validators: [Validators.required],\r\n          },\r\n        ),\r\n        amountPending: new FormControl(\r\n          studentCourseInstallment.installmentAmount ? studentCourseInstallment.amountPending : 0,\r\n          {\r\n            validators: [Validators.required],\r\n          },\r\n        ),\r\n        receiptId: new FormControl(\r\n          studentCourseInstallment.receiptId ? studentCourseInstallment.receiptId : null,\r\n          {\r\n            validators: [],\r\n          },\r\n        ),\r\n        status: new FormControl(\r\n          studentCourseInstallment.status ? studentCourseInstallment.status : true,\r\n          {\r\n            validators: [],\r\n          },\r\n        ),\r\n      },\r\n      {\r\n        validators: [\r\n          this.minInstallmentAmountValidator.bind(this),\r\n          this.maxInstallmentAmountValidator.bind(this),\r\n          this.minInstallmentPendingAmountValidator.bind(this),\r\n          this.maxInstallmentPendingAmountValidator.bind(this),\r\n        ],\r\n      },\r\n    );\r\n  }\r\n\r\n  private minInstallmentAmountValidator(group: FormGroup): { [s: string]: boolean } {\r\n    const installmentNo = +group.getRawValue().installmentNo;\r\n    const installmentAmount = +group.getRawValue().installmentAmount;\r\n    const minInstallmentAmount = this.getMinInstallmentAmount(installmentNo - 1);\r\n    if (installmentAmount < minInstallmentAmount) {\r\n      return { invalidMinInstallmentAmount: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private maxInstallmentAmountValidator(group: FormGroup): { [s: string]: boolean } {\r\n    const installmentNo = +group.getRawValue().installmentNo;\r\n    const installmentAmount = +group.getRawValue().installmentAmount;\r\n    const maxInstallmentAmount = this.getMaxInstallmentAmount(installmentNo - 1);\r\n    if (installmentAmount > maxInstallmentAmount) {\r\n      return { invalidMaxInstallmentAmount: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private minInstallmentPendingAmountValidator(group: FormGroup): { [s: string]: boolean } {\r\n    const installmentNo = +group.getRawValue().installmentNo;\r\n    const installmentPendingAmount = +group.getRawValue().amountPending;\r\n    const minInstallmentPendingAmount = this.getMinInstallmentPendingAmount(installmentNo - 1);\r\n    if (installmentPendingAmount < minInstallmentPendingAmount) {\r\n      return { invalidMinInstallmentPendingAmount: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private maxInstallmentPendingAmountValidator(group: FormGroup): { [s: string]: boolean } {\r\n    const installmentNo = +group.getRawValue().installmentNo;\r\n    const installmentPendingAmount = +group.getRawValue().amountPending;\r\n    const maxInstallmentPendingAmount = this.getMaxInstallmentPendingAmount(installmentNo - 1);\r\n    if (installmentPendingAmount > maxInstallmentPendingAmount) {\r\n      return { invalidMinInstallmentPendingAmount: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private addStudentCourseInstallment(studentCourseInstallment: any) {\r\n    const installments = this.getStudentCourseInstallments();\r\n    installments.push(this.newStudentCourseInstallment(studentCourseInstallment));\r\n  }\r\n\r\n  onSelectInstallmentType(installmentType: any) {\r\n    this.studentCourseFeeForm.patchValue({ amountCollected: 0 });\r\n    if (installmentType === '0') {\r\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\r\n      this.generateNoOfInstallments(1);\r\n    } else if (installmentType === '1') {\r\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\r\n      this.generateNoOfInstallments(2);\r\n    } else if (installmentType === '2') {\r\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\r\n      this.generateNoOfInstallments(4);\r\n    } else if (installmentType === '3') {\r\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\r\n      this.generateNoOfInstallments(this.course.basicDetails.duration);\r\n    } else {\r\n      this.studentCourseFeeForm.get('noOfInstallments').enable();\r\n      const noOfInstallments: number = this.studentCourseFeeForm.getRawValue().noOfInstallments;\r\n      this.generateNoOfInstallments(noOfInstallments);\r\n    }\r\n  }\r\n\r\n  generateNoOfInstallments(noOfInstallments: number) {\r\n    if (noOfInstallments) {\r\n      noOfInstallments = noOfInstallments > 0 ? noOfInstallments : 3;\r\n      this.studentCourseFeeForm.patchValue({ amountCollected: 0 });\r\n\r\n      this.studentCourseFeeForm.patchValue({ noOfInstallments });\r\n\r\n      const interval = 2592000000; // 30 * 24 * 60 * 60 * 1000\r\n\r\n      const duration: number = +this.course.basicDetails.duration;\r\n      const installmentDuration = duration / noOfInstallments;\r\n      const date = this.studentCourseFeeForm.getRawValue().date;\r\n\r\n      const netPayable: number = +this.studentCourseForm.getRawValue().netPayable;\r\n      const amount: number = netPayable / noOfInstallments;\r\n      const pendingAmount: number = +this.studentCourseFeeForm.getRawValue().pendingAmount;\r\n\r\n      this.resetStudentCourseInstallments();\r\n\r\n      for (let i = 0; i < noOfInstallments; i++) {\r\n        const installmentDate = this.dateService.millisecondsToDateString(\r\n          this.dateService.dateToMilliseconds(date) + interval * (installmentDuration * i),\r\n        );\r\n\r\n        let amountPending = pendingAmount - +(amount * (i + 1));\r\n        amountPending = amountPending < 0 ? 0 : amountPending;\r\n\r\n        const installmentData = {\r\n          _id: new ObjectId(),\r\n          installmentNo: (i + 1).toString(),\r\n          installmentDate,\r\n          installmentAmount: Math.ceil(amount),\r\n          amountPending: Math.ceil(amountPending),\r\n          receiptId: null,\r\n          status: true,\r\n        };\r\n        this.addStudentCourseInstallment(installmentData);\r\n      }\r\n\r\n      const installmentType = this.studentCourseFeeForm.getRawValue().installmentType;\r\n\r\n      if (installmentType === '4') {\r\n        this.enableStudentCourseInstallmentFields();\r\n      } else {\r\n        this.disableStudentCourseInstallmentFields();\r\n      }\r\n    }\r\n  }\r\n\r\n  customInstallmentAmount(amount: number, i: number) {\r\n    if (\r\n      !amount ||\r\n      amount < this.getMinInstallmentAmount(i) ||\r\n      amount > this.getMaxInstallmentAmount(i)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const installments = this.getStudentCourseInstallments();\r\n    const noOfInstallments: number = this.getNoOfInstallments();\r\n\r\n    const pendingAmount: number =\r\n      i === 0\r\n        ? this.studentCourseFeeForm.getRawValue().totalAmount\r\n        : installments[i - 1].getRawValue().amountPending;\r\n\r\n    const amountPending: number = pendingAmount - amount;\r\n\r\n    installments[i].patchValue({ amountPending });\r\n    const noOfUnchangedInstallments: number =\r\n      noOfInstallments - (i + 1) > 0 ? noOfInstallments - (i + 1) : 1;\r\n    let installmentAmount: number = Math.ceil(amountPending / noOfUnchangedInstallments);\r\n    if (i !== noOfInstallments - 1) {\r\n      for (let j = 0; j < noOfUnchangedInstallments; j++) {\r\n        let curAmountPending = amountPending - +(installmentAmount * (j + 1));\r\n        curAmountPending = curAmountPending < 0 ? 0 : curAmountPending;\r\n        const index = i + j + 1;\r\n        if (index === noOfInstallments - 1) {\r\n          if (this.getMaxInstallmentAmount(index) < installmentAmount) {\r\n            installmentAmount = this.getMaxInstallmentAmount(index);\r\n          }\r\n        }\r\n        installments[index].patchValue({\r\n          installmentAmount,\r\n          amountPending: curAmountPending,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  getMinInstallmentDate(i: number) {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    if (i === 0) {\r\n      // First Installment\r\n      return this.studentCourseFeeForm.getRawValue().date;\r\n    } else {\r\n      return installments[i - 1].getRawValue().installmentDate;\r\n    }\r\n  }\r\n\r\n  getMaxInstallmentDate(i: number) {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    const noOfInstallments: number = this.getNoOfInstallments();\r\n\r\n    if (i === 0 && noOfInstallments === 1) {\r\n      // First Installment\r\n      return this.studentCourseFeeForm.getRawValue().date;\r\n    } else if (i === noOfInstallments - 1) {\r\n      // Last Installment\r\n      return this.dateService.millisecondsToDateString(\r\n        this.dateService.dateToMilliseconds(this.studentCourseFeeForm.getRawValue().date) +\r\n          1000 * 60 * 60 * 24 * 30 * this.course.basicDetails.duration,\r\n      );\r\n    } else {\r\n      return installments[i + 1].getRawValue().installmentDate;\r\n    }\r\n  }\r\n\r\n  getMinInstallmentAmount(i: number) {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    const noOfInstallments: number = this.getNoOfInstallments();\r\n    if (i === 0 && noOfInstallments === 1) {\r\n      // First Installment for only 1 installment\r\n      return this.studentCourseFeeForm.getRawValue().totalAmount;\r\n    } else if (i === 0 && noOfInstallments > 1) {\r\n      // Last Installment for more than 1 installment\r\n      return 1;\r\n    } else if (i === noOfInstallments - 1) {\r\n      // Last Installment\r\n      return installments[i - 1].getRawValue().amountPending;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  getMaxInstallmentAmount(i: number) {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    const noOfInstallments: number = this.getNoOfInstallments();\r\n\r\n    if (i === 0 && noOfInstallments >= 1) {\r\n      // First Instalment\r\n      return this.studentCourseFeeForm.getRawValue().totalAmount;\r\n    } else if (i === noOfInstallments - 1) {\r\n      // Last Installment\r\n      return installments[i - 1].getRawValue().amountPending;\r\n    } else {\r\n      return installments[i - 1].getRawValue().amountPending;\r\n    }\r\n  }\r\n\r\n  getMinInstallmentPendingAmount(i: number) {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    const noOfInstallments: number = this.getNoOfInstallments();\r\n    if (i === 0 && noOfInstallments >= 1) {\r\n      // First Installment\r\n      return 0;\r\n    } else if (i === noOfInstallments - 1) {\r\n      // Last Installment\r\n      return 0;\r\n    } else {\r\n      if (installments[i]) {\r\n        return (\r\n          installments[i - 1].getRawValue().amountPending -\r\n          installments[i].getRawValue().installmentAmount\r\n        );\r\n      }\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  getMaxInstallmentPendingAmount(i: number) {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    const noOfInstallments: number = this.getNoOfInstallments();\r\n\r\n    if (i === 0 && noOfInstallments >= 1) {\r\n      // First Installment\r\n      return this.studentCourseFeeForm.getRawValue().totalAmount;\r\n    } else if (i === noOfInstallments - 1) {\r\n      // Last Installment\r\n      return 0;\r\n    } else {\r\n      if (installments[i]) {\r\n        return (\r\n          installments[i - 1].getRawValue().amountPending -\r\n          installments[i].getRawValue().installmentAmount +\r\n          1\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  getNoOfInstallments(): number {\r\n    return +this.studentCourseFeeForm.getRawValue().noOfInstallments;\r\n  }\r\n\r\n  private enableStudentCourseInstallmentFields() {\r\n    const installments = this.getStudentCourseInstallments();\r\n    installments.forEach((installment: FormGroup) => {\r\n      installment.get('installmentAmount').enable();\r\n      // installment.get('amountPending').enable();\r\n    });\r\n  }\r\n\r\n  private disableStudentCourseInstallmentFields() {\r\n    const installments = this.getStudentCourseInstallments();\r\n    installments.forEach((installment: FormGroup) => {\r\n      installment.get('installmentAmount').disable();\r\n      // installment.get('amountPending').disable();\r\n    });\r\n  }\r\n\r\n  previousStep() {\r\n    if (this.studentCourse) {\r\n      this.disableStudentCourseDetails();\r\n    }\r\n    const installmentType = this.studentCourseFeeForm.getRawValue().installmentType;\r\n    if (this.studentCourseInstallment) {\r\n      this.disableStudentCourseInstallmentFields();\r\n    } else if (installmentType !== '4') {\r\n      this.disableStudentCourseInstallmentFields();\r\n    }\r\n    this.stepper.previous();\r\n  }\r\n\r\n  studentCourseFormSubmit() {\r\n    this.studentCourseForm.markAllAsTouched();\r\n    if (this.rollNumberAlreadyExist) {\r\n      this.showToastr('top-right', 'danger', 'Student Roll Number for this Batch already Exist');\r\n      return;\r\n    } else if (this.studentCourseForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Details are Required');\r\n      return;\r\n    }\r\n    if (this.studentCourse) {\r\n      this.enableStudentCourseDetails();\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  studentCourseFeeFormSubmit() {\r\n    this.studentCourseFeeForm.markAllAsTouched();\r\n    if (this.studentCourseFeeForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Fee Details are Required');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  studentCourseInstallmentFormSubmit() {\r\n    this.studentCourseInstallmentForm.markAllAsTouched();\r\n    if (this.studentCourseInstallmentForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\r\n      return;\r\n    }\r\n\r\n    if (!this.validateStudentCourseInstallmentForm()) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\r\n      return;\r\n    }\r\n\r\n    this.enableStudentCourseInstallmentFields();\r\n\r\n    this.stepper.next();\r\n  }\r\n\r\n  private validateStudentCourseInstallmentForm(): boolean {\r\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\r\n    let invalidInstallments: boolean = false;\r\n    installments.forEach((installment: FormGroup, i) => {\r\n      if (installment.invalid) {\r\n        invalidInstallments = true;\r\n      }\r\n    });\r\n\r\n    if (invalidInstallments) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  saveStudentCourse() {\r\n    this.studentCourseForm.markAllAsTouched();\r\n    this.studentCourseFeeForm.markAllAsTouched();\r\n    this.studentCourseInstallmentForm.markAllAsTouched();\r\n\r\n    if (this.rollNumberAlreadyExist) {\r\n      this.showToastr('top-right', 'danger', 'Student Roll Number for this Batch already Exist');\r\n      return;\r\n    } else if (this.studentCourseForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Details are Required');\r\n      return;\r\n    } else if (this.studentCourseFeeForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Fee Details are Required');\r\n      return;\r\n    } else if (this.studentCourseInstallmentForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\r\n      return;\r\n    } else if (!this.validateStudentCourseInstallmentForm()) {\r\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\r\n      return;\r\n    }\r\n    this.submit = true;\r\n\r\n    const studentCourseDetails: any = this.studentCourseForm.getRawValue();\r\n    studentCourseDetails.branch = this.branchId;\r\n    studentCourseDetails.category = this.categoryId;\r\n    studentCourseDetails.student = this.studentId;\r\n\r\n    const studentCourseInstallmentDetails: any = this.studentCourseFeeForm.getRawValue();\r\n    studentCourseInstallmentDetails.installments = this.studentCourseInstallmentForm.getRawValue().installments;\r\n    studentCourseInstallmentDetails.branch = this.branchId;\r\n    studentCourseInstallmentDetails.category = this.categoryId;\r\n    studentCourseInstallmentDetails.course = studentCourseDetails.course;\r\n    studentCourseInstallmentDetails.student = this.studentId;\r\n\r\n    if (!this.studentCourse && !this.studentCourseInstallment) {\r\n      this.studentCourseService\r\n        .addStudentCourse(studentCourseDetails, studentCourseInstallmentDetails)\r\n        .subscribe(\r\n          (res: any) => {\r\n            this.showToastr('top-right', 'success', 'Student Course Created Successfully!');\r\n            this.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToastr('top-right', 'danger', err);\r\n            this.submit = false;\r\n          },\r\n        );\r\n    } else if (this.studentCourse && !this.studentCourseInstallment) {\r\n      this.studentCourseInstallmentService\r\n        .addStudentCourseInstallment(this.studentCourse._id, studentCourseInstallmentDetails)\r\n        .subscribe(\r\n          (res: any) => {\r\n            this.showToastr(\r\n              'top-right',\r\n              'success',\r\n              'Student Course Installments Created Successfully!',\r\n            );\r\n            this.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToastr('top-right', 'danger', err);\r\n            this.submit = false;\r\n          },\r\n        );\r\n    } else {\r\n      studentCourseDetails._id = this.studentCourse._id;\r\n      studentCourseInstallmentDetails._id = this.studentCourseInstallment._id;\r\n      this.studentCourseService\r\n        .editStudentCourse(studentCourseDetails, studentCourseInstallmentDetails)\r\n        .subscribe(\r\n          (res: any) => {\r\n            this.showToastr('top-right', 'success', 'Student Course Updated Successfully!');\r\n            this.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToastr('top-right', 'danger', err);\r\n            this.submit = false;\r\n          },\r\n        );\r\n    }\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  getCourse(courseId: string) {\r\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\r\n\r\n    if (course) {\r\n      return course.basicDetails.courseName;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  getBatch(batchId: string) {\r\n    const batch = this.batches.find((curBatch: BatchModel) => curBatch._id === batchId);\r\n\r\n    if (batch) {\r\n      return batch.basicDetails.batchName;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  getDiscount(discountId: string) {\r\n    const discount = this.discounts.find(\r\n      (curDiscount: DiscountAndOfferModel) => curDiscount._id === discountId,\r\n    );\r\n\r\n    if (discount) {\r\n      const discountString =\r\n        discount.offerName +\r\n        ' (' +\r\n        discount.code +\r\n        ' - ' +\r\n        discount.discountAmount +\r\n        (discount.discountType === 'percentage' ? '%' : '.00') +\r\n        ')';\r\n\r\n      return discountString;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbIconModule,\n  NbButtonModule,\n  NbInputModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbCheckboxModule,\n  NbFormFieldModule,\n  NbSelectModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddStudentCourseRoutingModule } from './add-student-course-routing.module';\nimport { AddStudentCourseComponent } from './add-student-course.component';\n\n@NgModule({\n  declarations: [AddStudentCourseComponent],\n  imports: [\n    CommonModule,\n    AddStudentCourseRoutingModule,\n    NbCardModule,\n    NbIconModule,\n    NbButtonModule,\n    NbInputModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbCheckboxModule,\n    NbFormFieldModule,\n    NbSelectModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddStudentCourseModule {}\n"]}