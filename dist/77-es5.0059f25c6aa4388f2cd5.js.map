{"version":3,"sources":["webpack:///src/app/employee/branch/branch-header/branch-header.component.ts","webpack:///src/app/employee/branch/branch.component.html","webpack:///src/app/employee/branch/branch-routing.module.ts","webpack:///src/app/employee/branch/branch.component.ts","webpack:///src/app/employee/branch/branch.module.ts"],"names":["BranchHeaderComponent","branchService","router","route","this","loading","branchId","getBranchId","getBranch","subscribe","branch","setBranchData","err","navigate","relativeTo","BranchComponent","BranchModule","BranchRoutingModule","routes","path","component","toastrService","checkBranchStatus","branchStatus","activated","showToastr","error","position","status","message","show","deleteBranchId","deleteBranchData","children","loadChildren","then","m","DashboardModule","ManageBranchModule","ScheduleModule","LectureModule","AssignmentModule","LeadModule","ExamModule","BudgetModule","StudentModule","StudentsReportModule","EmployeeModule","LeaveModule","redirectTo","pathMatch","PageNotFoundModule","forChild"],"mappings":"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","file":"x","sourcesContent":["import { ActivatedRoute, Router } from '@angular/router';\r\nimport { BranchModel } from './../../../models/branch.model';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BranchService } from './../../../services/branch.service';\r\n\r\n@Component({\r\n  selector: 'ngx-branch-header',\r\n  templateUrl: './branch-header.component.html',\r\n  styleUrls: ['./branch-header.component.scss'],\r\n})\r\nexport class BranchHeaderComponent implements OnInit {\r\n  loading: boolean;\r\n  branchId: string;\r\n  branch: BranchModel;\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.branchService.getBranch(this.branchId).subscribe(\r\n      (branch: BranchModel) => {\r\n        this.branch = branch;\r\n        this.branchService.setBranchData(branch);\r\n        this.loading = false;\r\n      },\r\n      (err: any) => {\r\n        // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      },\r\n    );\r\n  }\r\n}\r\n","<ngx-branch-header></ngx-branch-header>\n<router-outlet *ngIf=\"!loading\"></router-outlet>\n","import { BranchComponent } from './branch.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BranchComponent,\n    children: [\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./dashboard/dashboard.module').then((m) => m.DashboardModule),\n      },\n\n      {\n        path: 'manage-branch',\n        loadChildren: () =>\n          import('./manage-branch/manage-branch.module').then((m) => m.ManageBranchModule),\n      },\n\n      {\n        path: 'schedule',\n        loadChildren: () => import('./schedule/schedule.module').then((m) => m.ScheduleModule),\n      },\n\n      {\n        path: 'lecture',\n        loadChildren: () => import('./lecture/lecture.module').then((m) => m.LectureModule),\n      },\n\n      {\n        path: 'assignment',\n        loadChildren: () =>\n          import('./assignment/assignment.module').then((m) => m.AssignmentModule),\n      },\n\n      {\n        path: 'lead',\n        loadChildren: () => import('./lead/lead.module').then((m) => m.LeadModule),\n      },\n\n      {\n        path: 'exam',\n        loadChildren: () => import('./exam/exam.module').then((m) => m.ExamModule),\n      },\n\n      {\n        path: 'budget',\n        loadChildren: () => import('./budget/budget.module').then((m) => m.BudgetModule),\n      },\n\n      {\n        path: 'student',\n        loadChildren: () => import('./student/student.module').then((m) => m.StudentModule),\n      },\n\n      {\n        path: 'students-report',\n        loadChildren: () =>\n          import('./students-report/students-report.module').then((m) => m.StudentsReportModule),\n      },\n\n      {\n        path: 'employee',\n        loadChildren: () => import('./employee/employee.module').then((m) => m.EmployeeModule),\n      },\n\n      {\n        path: 'leave',\n        loadChildren: () => import('./leave/leave.module').then((m) => m.LeaveModule),\n      },\n\n      {\n        path: '',\n        redirectTo: 'dashboard',\n        pathMatch: 'full',\n      },\n\n      {\n        path: 'page-not-found',\n        loadChildren: () =>\n          import('../../shared/page-not-found/page-not-found.module').then(\n            (m) => m.PageNotFoundModule,\n          ),\n      },\n\n      {\n        path: '**',\n        redirectTo: 'page-not-found',\n        pathMatch: 'full',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BranchRoutingModule {}\n","import { NbToastrService } from '@nebular/theme';\r\nimport { BranchModel } from './../../models/branch.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BranchService } from './../../services/branch.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-branch',\r\n  templateUrl: './branch.component.html',\r\n  styleUrls: ['./branch.component.scss'],\r\n})\r\nexport class BranchComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n  branchId: string;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.branchService.checkBranchStatus(this.branchId).subscribe(\r\n      (branchStatus: { activated: boolean }) => {\r\n        if (branchStatus.activated) {\r\n          this.loading = false;\r\n        } else {\r\n          this.showToastr('top-right', 'danger', 'Please Activate Branch');\r\n          this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n        }\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      },\r\n    );\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.branchService.deleteBranchId();\r\n    this.branchService.deleteBranchData();\r\n  }\r\n}\r\n","import { NbCardModule, NbUserModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BranchRoutingModule } from './branch-routing.module';\nimport { BranchComponent } from './branch.component';\nimport { BranchHeaderComponent } from './branch-header/branch-header.component';\n\n@NgModule({\n  declarations: [BranchComponent, BranchHeaderComponent],\n  imports: [CommonModule, BranchRoutingModule, NbCardModule, NbUserModule],\n})\nexport class BranchModule {}\n"]}