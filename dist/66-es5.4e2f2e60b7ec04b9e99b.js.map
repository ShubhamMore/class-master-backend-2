{"version":3,"sources":["webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/login/login-routing.module.ts","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/authentication/login/login.module.ts"],"names":["LoginComponent","LoginRoutingModule","LoginModule","routes","path","component","authService","router","toastrService","encryptService","route","this","loading","submit","form","email","validators","required","password","valid","value","encrypt","environment","encKey","authObs","login","authSubscribe","subscribe","user","showToastr","userRole","navigate","relativeTo","reset","error","position","status","message","show","canActivate","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"main-container\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-sm-10 col-12 mx-auto\">\n      <nb-card>\n        <nb-card-body>\n          <div class=\"text-center\">\n            <img src=\"../../../assets/brand/class-master.png\" alt=\"THE CLASS MASTER\" width=\"25%\" />\n          </div>\n          <h1 id=\"title\" class=\"title\">Login</h1>\n          <p class=\"sub-title\">Hello! Log in with your email.</p>\n\n          <form (ngSubmit)=\"login()\" [formGroup]=\"form\" aria-labelledby=\"title\">\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"email\">Email address:</label>\n              <input\n                type=\"email\"\n                nbInput\n                fullWidth\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email address\"\n                formControlName=\"email\"\n                autofocus\n                [status]=\"\n                  form.get('email').touched\n                    ? form.get('email').invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              />\n              <ng-container *ngIf=\"form.get('email').invalid && form.get('email').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"form.get('email').errors?.required\">\n                  Email is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"form.get('email').errors?.email\">\n                  Email should be the real one!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <span class=\"label-with-link\">\n                <label class=\"label\" for=\"input-password\">Password:</label>\n              </span>\n              <input\n                type=\"password\"\n                nbInput\n                fullWidth\n                formControlName=\"password\"\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"Password\"\n                [status]=\"\n                  form.get('password').touched\n                    ? form.get('password').invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              />\n              <ng-container *ngIf=\"form.get('password').invalid && form.get('password').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"form.get('password').errors?.required\">\n                  Password is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"form.get('password').errors?.minlength\">\n                  Password should contain minimum 7 characters\n                </p>\n              </ng-container>\n              <a class=\"forgot-password caption-2\" routerLink=\"/forgot-password\"\n                >Forgot Password?</a\n              >\n            </div>\n\n            <br />\n\n            <button nbButton size=\"medium\" fullWidth status=\"primary\" [disabled]=\"submit\">\n              Log In\n            </button>\n          </form>\n\n          <br />\n\n          <section class=\"another-action text-right\" aria-label=\"Register\">\n            Don't have an account? <a class=\"text-link\" routerLink=\"/register\">Register Now</a>\n          </section>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n</div>\n","import { LoginComponent } from './login.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n    canActivate: [],\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\nimport { AuthService, AuthResponseData } from '../auth/auth-service/auth.service';\nimport { EncryptService } from '../../services/shared-services/encrypt.service';\nimport { NbToastrService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss', '../authentication.scss'],\n})\nexport class LoginComponent implements OnInit {\n  form: FormGroup;\n  loading: boolean;\n  submit: boolean;\n\n  authObs: Observable<AuthResponseData>;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private toastrService: NbToastrService,\n    private encryptService: EncryptService,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.loading = true;\n    this.submit = false;\n\n    this.form = new FormGroup({\n      email: new FormControl(null, {\n        validators: [Validators.required, Validators.email],\n      }),\n      password: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n    });\n    this.loading = false;\n  }\n\n  login() {\n    if (!this.form.valid) {\n      return;\n    }\n\n    this.submit = true;\n\n    const email = this.form.value.email;\n    const password = this.encryptService.encrypt(this.form.value.password, environment.encKey);\n\n    this.authObs = this.authService.login(email, password);\n    this.authSubscribe();\n  }\n\n  authSubscribe() {\n    this.authObs.subscribe(\n      (user: any) => {\n        this.showToastr('top-right', 'success', 'Login successful!');\n        if (user.userRole === 'admin') {\n          this.router.navigate(['/admin'], { relativeTo: this.route });\n        } else if (user.userRole === 'institute') {\n          this.router.navigate(['/institute'], { relativeTo: this.route });\n        } else if (user.userRole === 'employee') {\n          this.router.navigate(['/employee'], { relativeTo: this.route });\n        } else if (user.userRole === 'student') {\n          this.router.navigate(['/student'], { relativeTo: this.route });\n        } else {\n          this.submit = false;\n          this.router.navigate(['/login'], {\n            relativeTo: this.route,\n          });\n        }\n        this.form.reset();\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.submit = false;\n      },\n    );\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { LoginComponent } from './login.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbActionsModule,\n  NbCheckboxModule,\n  NbAlertModule,\n  NbSelectModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbButtonModule,\n    NbActionsModule,\n    NbInputModule,\n    NbCheckboxModule,\n    NbAlertModule,\n    NbSelectModule,\n  ],\n})\nexport class LoginModule {}\n"]}