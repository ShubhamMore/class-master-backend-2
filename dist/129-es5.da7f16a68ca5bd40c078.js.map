{"version":3,"sources":["webpack:///src/app/employee/branch/student/student-course/manage-student-course/manage-student-course.component.html","webpack:///src/app/employee/branch/student/student-course/manage-student-course/manage-student-course-routing.module.ts","webpack:///src/app/employee/branch/student/student-course/manage-student-course/manage-student-course.component.ts","webpack:///src/app/employee/branch/student/student-course/manage-student-course/manage-student-course.module.ts"],"names":["ManageStudentCourseComponent","ManageStudentCourseModule","ManageStudentCourseRoutingModule","routes","path","component","dateService","branchService","toastrService","studentService","courseService","batchService","studentCourseService","studentCourseInstallmentService","router","route","this","loading","branchId","getBranchId","categoryId","getCategoryId","studentId","getStudentId","studentCourses","getStudentCourses","navigate","relativeTo","subscribe","err","showToastr","studentCourseId","courseId","studentCourseInstallmentId","setCourseId","setStudentCourseId","setStudentCourseInstallmentId","queryParams","mode","studentCourse","_id","setStudentCourseData","status","i","position","message","show","getStudentName","pipe","map","studentName","getCourseName","courseName","BatchId","getBatchName","batchName","type","getStudentType","back","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"float-right\"\r\n          nbButton\r\n          size=\"small\"\r\n          status=\"warning\"\r\n          (click)=\"back()\"\r\n        >\r\n          Back\r\n        </button>\r\n        <h3>\r\n          Courses\r\n          <small>of {{ getStudentName() | async | uppercase }}</small>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n  <nb-card-body class=\"body-container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <ng-container *ngIf=\"!loading; else loadingData\">\r\n          <div class=\"table-responsive\" *ngIf=\"studentCourses.length > 0; else noStudentCourses\">\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Course</th>\r\n                  <th>Batch</th>\r\n                  <th>Roll Number</th>\r\n                  <th>Activation date</th>\r\n                  <th>Installments</th>\r\n                  <th>Attendance</th>\r\n                  <th>Performance</th>\r\n                  <th colspan=\"2\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let studentCourse of studentCourses; let i = index\">\r\n                  <td>{{ i + 1 }}</td>\r\n                  <td>{{ getCourseName(studentCourse.course) | async }}</td>\r\n                  <td>{{ getBatchName(studentCourse.batch) | async }}</td>\r\n                  <td>{{ studentCourse.rollNumber }}</td>\r\n                  <td>{{ dateService.formatDate(studentCourse.activationDate) }}</td>\r\n\r\n                  <td>\r\n                    <button\r\n                      nbButton\r\n                      size=\"small\"\r\n                      status=\"info\"\r\n                      (click)=\"\r\n                        courseInstallments(\r\n                          studentCourse._id,\r\n                          studentCourse.course,\r\n                          studentCourse.studentCourseInstallment\r\n                        )\r\n                      \"\r\n                    >\r\n                      Installments\r\n                    </button>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <button\r\n                      nbButton\r\n                      size=\"small\"\r\n                      status=\"info\"\r\n                      (click)=\"courseAttendance(studentCourse)\"\r\n                    >\r\n                      Attendance\r\n                    </button>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <button\r\n                      nbButton\r\n                      size=\"small\"\r\n                      status=\"success\"\r\n                      (click)=\"coursePerformance(studentCourse)\"\r\n                    >\r\n                      Performance\r\n                    </button>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <button\r\n                      nbButton\r\n                      size=\"small\"\r\n                      status=\"basic\"\r\n                      (click)=\"\r\n                        courseEdit(studentCourse._id, studentCourse.studentCourseInstallment)\r\n                      \"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <button\r\n                      class=\"\"\r\n                      nbButton\r\n                      size=\"small\"\r\n                      [status]=\"!studentCourse.status ? 'warning' : 'danger'\"\r\n                      (click)=\"changeCourseStatus(studentCourse._id, !studentCourse.status, i)\"\r\n                    >\r\n                      {{ !studentCourse.status ? 'Activate' : 'Deactivate' }}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <ng-template #noStudentCourses>\r\n            <p class=\"text-center pt-5 pb-5\">No Student Courses Available</p>\r\n          </ng-template>\r\n        </ng-container>\r\n        <ng-template #loadingData>\r\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ManageStudentCourseComponent } from './manage-student-course.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageStudentCourseComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageStudentCourseRoutingModule {}\n","import { map } from 'rxjs/operators';\nimport { CourseService } from './../../../../../services/course.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { BranchService } from '../../../../../services/branch.service';\nimport { StudentService } from '../../../../../services/student.service';\nimport { StudentCourseService } from '../../../../../services/student-course.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { StudentCourseInstallmentService } from '../../../../../services/student-course-installment.service';\nimport { Observable } from 'rxjs';\nimport { BatchService } from '../../../../../services/batch.service';\nimport { DateService } from '../../../../../services/shared-services/date.service';\n\n@Component({\n  selector: 'ngx-manage-student-course',\n  templateUrl: './manage-student-course.component.html',\n  styleUrls: ['./manage-student-course.component.scss'],\n})\nexport class ManageStudentCourseComponent implements OnInit, OnDestroy {\n  private branchId: string;\n  private studentId: string;\n  private categoryId: string;\n\n  loading: boolean;\n\n  studentCourses: StudentCourseModel[];\n\n  constructor(\n    public dateService: DateService,\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private studentService: StudentService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private studentCourseService: StudentCourseService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    this.categoryId = this.branchService.getCategoryId();\n    this.studentId = this.studentService.getStudentId();\n\n    if (!this.branchId || !this.categoryId || !this.studentId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n\n      return;\n    }\n\n    this.studentCourses = [];\n    this.getStudentCourses();\n  }\n\n  private getStudentCourses() {\n    this.studentCourseService\n      .getStudentCourses(this.branchId, this.categoryId, this.studentId)\n      .subscribe(\n        (studentCourses: any[]) => {\n          this.studentCourses = studentCourses;\n          this.loading = false;\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.loading = false;\n        },\n      );\n  }\n\n  addStudentCourse() {\n    this.router.navigate(['../add'], { relativeTo: this.route });\n  }\n\n  courseInstallments(\n    studentCourseId: string,\n    courseId: string,\n    studentCourseInstallmentId: string,\n  ) {\n    this.courseService.setCourseId(courseId);\n    this.studentCourseService.setStudentCourseId(studentCourseId);\n    this.studentCourseInstallmentService.setStudentCourseInstallmentId(studentCourseInstallmentId);\n    this.router.navigate(['../installment'], { relativeTo: this.route });\n  }\n\n  courseEdit(studentCourseId: string, studentCourseInstallmentId: string) {\n    this.studentCourseService.setStudentCourseId(studentCourseId);\n    this.studentCourseInstallmentService.setStudentCourseInstallmentId(studentCourseInstallmentId);\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\n  }\n\n  courseAttendance(studentCourse: StudentCourseModel) {\n    this.studentCourseService.setStudentCourseId(studentCourse._id);\n    this.studentCourseService.setStudentCourseData(studentCourse);\n    this.router.navigate(['../attendance'], { relativeTo: this.route });\n  }\n\n  coursePerformance(studentCourse: StudentCourseModel) {\n    this.studentCourseService.setStudentCourseId(studentCourse._id);\n    this.studentCourseService.setStudentCourseData(studentCourse);\n    this.router.navigate(['../performance'], { relativeTo: this.route });\n  }\n\n  changeCourseStatus(studentCourseId: string, status: boolean, i: number) {}\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  getStudentName(): Observable<string> {\n    return this.studentService.getStudentName().pipe(\n      map((studentName: string) => {\n        return studentName;\n      }),\n    );\n  }\n\n  getCourseName(courseId: string): Observable<string> {\n    return this.courseService.getCourseName(courseId).pipe(\n      map((courseName: string) => {\n        return courseName;\n      }),\n    );\n  }\n\n  getBatchName(BatchId: string): Observable<string> {\n    return this.batchService.getBatchName(BatchId).pipe(\n      map((batchName: string) => {\n        return batchName;\n      }),\n    );\n  }\n\n  back() {\n    const type = this.studentService.getStudentType();\n    this.router.navigate(['../../'], { relativeTo: this.route, queryParams: { type } });\n  }\n\n  ngOnDestroy() {}\n}\n","import { NbCardModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageStudentCourseRoutingModule } from './manage-student-course-routing.module';\nimport { ManageStudentCourseComponent } from './manage-student-course.component';\n\n@NgModule({\n  declarations: [ManageStudentCourseComponent],\n  imports: [\n    CommonModule,\n    ManageStudentCourseRoutingModule,\n\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class ManageStudentCourseModule {}\n"]}