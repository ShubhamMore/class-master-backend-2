{"version":3,"sources":["webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course.component.html","webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course-routing.module.ts","webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course.component.ts","webpack:///src/app/institute/branch/student/student-course/add-student-course/add-student-course.module.ts"],"names":["routes","path","component","AddStudentCourseComponent","dateService","toastrService","branchService","courseService","batchService","discountAndOfferService","studentService","studentCourseService","studentCourseInstallmentService","router","route","this","loading","submit","branchId","getBranchId","categoryId","getCategoryId","studentId","getStudentId","navigate","relativeTo","mode","studentCourseId","getStudentCourseId","queryParams","subscribe","param","showToastr","discounts","courses","batches","courseBatches","discountTypes","rollNumberAlreadyExist","getCoursesData","getBatchesData","getDiscountAndOffersData","discountAndOffers","getDiscountTypes","studentCourseForm","course","validators","required","batch","rollNumber","min","discount","additionalDiscountType","length","additionalDiscountAmount","activationDate","getDateString","netPayable","discountPercentageValidator","bind","studentCourseFeeForm","installmentType","date","noOfInstallments","pendingAmount","amountCollected","totalAmount","studentCourseInstallmentForm","installments","getStudentCourseForEditing","res","studentCourse","studentCourseInstallment","patchValue","onSelectCourse","disableStudentCourseDetails","disableStudentCourseFeeForm","resetStudentCourseInstallments","forEach","installment","i","addStudentCourseInstallment","disableStudentCourseInstallmentFields","err","back","group","discountType","getRawValue","amount","invalidDiscountPercentage","batchId","toString","courseId","checkBatchRollNumber","rollNumberExist","filter","curBatch","find","curCourse","_id","calculateNetPayableAmount","get","enable","checkRollNumber","disable","discountId","curDicount","additionalDiscount","totalDiscountPercentage","totalDiscountAmount","calculatedAmount","totalFee","feeDetails","totalFees","discountAmount","calculatePendingAmount","onSelectInstallmentType","controls","installmentNo","installmentDate","installmentAmount","amountPending","receiptId","status","minInstallmentAmountValidator","maxInstallmentAmountValidator","minInstallmentPendingAmountValidator","maxInstallmentPendingAmountValidator","getMinInstallmentAmount","invalidMinInstallmentAmount","getMaxInstallmentAmount","invalidMaxInstallmentAmount","getMinInstallmentPendingAmount","invalidMinInstallmentPendingAmount","getMaxInstallmentPendingAmount","getStudentCourseInstallments","push","newStudentCourseInstallment","generateNoOfInstallments","basicDetails","duration","interval","installmentDuration","millisecondsToDateString","dateToMilliseconds","installmentData","Math","ceil","enableStudentCourseInstallmentFields","getNoOfInstallments","noOfUnchangedInstallments","j","curAmountPending","index","stepper","previous","markAllAsTouched","invalid","enableStudentCourseDetails","next","validateStudentCourseInstallmentForm","invalidInstallments","studentCourseDetails","branch","category","student","studentCourseInstallmentDetails","editStudentCourse","addStudentCourse","position","message","show","courseName","batchName","curDiscount","offerName","code","replaceUrl","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddStudentCourseRoutingModule","forChild","AddStudentCourseModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card *ngIf=\"!loading\">\n  <nb-card-header>\n    <button\n      type=\"button\"\n      class=\"float-right\"\n      nbButton\n      size=\"small\"\n      status=\"warning\"\n      (click)=\"back()\"\n    >\n      Back\n    </button>\n    <h3 class=\"\">\n      {{ !studentCourse ? 'New Student Course' : 'Edit Student Course' }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n      <nb-step [stepControl]=\"studentCourseForm\" label=\"Course Details\">\n        <form class=\"\" (submit)=\"studentCourseFormSubmit()\" [formGroup]=\"studentCourseForm\">\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-student-course\">Course:</label>\n                <nb-select\n                  id=\"input-student-course\"\n                  name=\"course\"\n                  formControlName=\"course\"\n                  placeholder=\"Select Course\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseForm.get('course').touched\n                      ? studentCourseForm.get('course').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (selectedChange)=\"onSelectCourse($event)\"\n                >\n                  <nb-option value=\"\">Select Course</nb-option>\n                  <nb-option *ngFor=\"let course of courses\" [value]=\"course._id\">{{\n                    course.basicDetails.courseName\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    studentCourseForm.get('course').invalid &&\n                    studentCourseForm.get('course').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('course').errors?.required\"\n                  >\n                    Student Course is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-student-batch\">Batch:</label>\n                <nb-select\n                  id=\"input-student-batch\"\n                  name=\"batch\"\n                  formControlName=\"batch\"\n                  placeholder=\"Select Batch\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseForm.get('batch').touched\n                      ? studentCourseForm.get('batch').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (selectedChange)=\"onSelectBatch($event)\"\n                >\n                  <nb-option value=\"\">Select Batch</nb-option>\n                  <nb-option *ngFor=\"let batch of courseBatches\" [value]=\"batch._id\">{{\n                    batch.basicDetails.batchName\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    studentCourseForm.get('batch').invalid && studentCourseForm.get('batch').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('batch').errors?.required\"\n                  >\n                    Student Batch is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-roll-number\">Roll Number:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-roll-number\"\n                  name=\"rollNumber\"\n                  formControlName=\"rollNumber\"\n                  min=\"1\"\n                  placeholder=\"Roll Number\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseForm.get('rollNumber').touched\n                      ? studentCourseForm.get('rollNumber').invalid || rollNumberAlreadyExist\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"checkRollNumber()\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    (studentCourseForm.get('rollNumber').invalid || rollNumberAlreadyExist) &&\n                    studentCourseForm.get('rollNumber').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('rollNumber').errors?.required\"\n                  >\n                    Roll Number is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('rollNumber').errors?.min\"\n                  >\n                    Roll Number should be greater than 0\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"rollNumberAlreadyExist\">\n                    This roll number already Exist!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-student-discount\">Discount/Offer:</label>\n                <nb-select\n                  id=\"input-student-discount\"\n                  name=\"discount\"\n                  formControlName=\"discount\"\n                  placeholder=\"Select Discount\"\n                  fullWidth\n                  (selectedChange)=\"onSelectDiscount($event)\"\n                >\n                  <nb-option value=\"\">Select Discount</nb-option>\n                  <nb-option *ngFor=\"let discount of discounts\" [value]=\"discount._id\">{{\n                    getDiscount(discount._id)\n                  }}</nb-option>\n                </nb-select>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-additional-discount-type\"\n                  >Additional Discount Type:</label\n                >\n                <nb-select\n                  id=\"input-additional-discount-type\"\n                  name=\"additionalDiscountType\"\n                  formControlName=\"additionalDiscountType\"\n                  placeholder=\"Select Discount Type\"\n                  fullWidth\n                  [selected]=\"discountTypes.length > 0 ? discountTypes[0] : ''\"\n                  (selectedChange)=\"changeAdditionalDiscountType()\"\n                >\n                  <nb-option *ngFor=\"let discountType of discountTypes\" [value]=\"discountType\">{{\n                    discountType | uppercase\n                  }}</nb-option>\n                </nb-select>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-discount-amount\">Additional Discount Amount:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-discount-amount\"\n                  name=\"additionalDiscountAmount\"\n                  formControlName=\"additionalDiscountAmount\"\n                  placeholder=\"Discount Amount\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseForm.get('additionalDiscountAmount').touched\n                      ? studentCourseForm.get('additionalDiscountAmount').invalid ||\n                        studentCourseForm.hasError('invalidDiscountPercentage')\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"onAdditionalDiscountAmount($event.target.value)\"\n                />\n                <ng-container *ngIf=\"studentCourseForm.get('additionalDiscountAmount').touched\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('additionalDiscountAmount').errors?.min\"\n                  >\n                    Discount Amount should be more than or equal to 0\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.hasError('invalidDiscountPercentage')\"\n                  >\n                    Discount Percentage should be between 0% to 100%\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-activation-date\">Activation Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-activation-date\"\n                  name=\"activationDate\"\n                  formControlName=\"activationDate\"\n                  placeholder=\"Activation Date\"\n                  fullWidth\n                  [status]=\"studentCourseForm.get('activationDate').invalid ? 'danger' : 'success'\"\n                />\n                <ng-container *ngIf=\"studentCourseForm.get('activationDate').invalid\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('activationDate').errors?.required\"\n                  >\n                    Activation date is required\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-net-payable\">Net Payable:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-net-payable\"\n                  name=\"netPayable\"\n                  formControlName=\"netPayable\"\n                  placeholder=\"Net Payable\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseForm.get('netPayable').touched\n                      ? studentCourseForm.get('netPayable').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    studentCourseForm.get('netPayable').invalid &&\n                    studentCourseForm.get('netPayable').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('netPayable').errors?.required\"\n                  >\n                    Net Payable Amount is Required\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseForm.get('netPayable').errors?.min\"\n                  >\n                    Net Payable Amount should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"studentCourseFeeForm\" label=\"Course Fee Details\">\n        <form\n          [formGroup]=\"studentCourseFeeForm\"\n          (ngSubmit)=\"studentCourseFeeFormSubmit()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-date\">Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-date\"\n                  name=\"date\"\n                  formControlName=\"date\"\n                  placeholder=\"Date\"\n                  fullWidth\n                  [status]=\"studentCourseFeeForm.get('date').invalid ? 'danger' : 'success'\"\n                />\n                <ng-container *ngIf=\"studentCourseFeeForm.get('date').invalid\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('date').errors?.required\"\n                  >\n                    Date is required\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-course-installment-type\">Installment Type:</label>\n                <nb-select\n                  id=\"input-course-installment-type\"\n                  name=\"installmentType\"\n                  formControlName=\"installmentType\"\n                  placeholder=\"Select Installment Type\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseFeeForm.get('installmentType').touched\n                      ? studentCourseFeeForm.get('installmentType').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (selectedChange)=\"onSelectInstallmentType($event)\"\n                >\n                  <nb-option value=\"0\">Pay Once</nb-option>\n                  <nb-option value=\"1\">Pay Twice</nb-option>\n                  <nb-option value=\"2\">Pay Quarterly</nb-option>\n                  <nb-option value=\"3\">Pay Monthly</nb-option>\n                  <nb-option value=\"4\">Pay Custom</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    studentCourseFeeForm.get('installmentType').invalid &&\n                    studentCourseFeeForm.get('installmentType').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('installmentType').errors?.required\"\n                  >\n                    Student Course is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-noOfInstallments\">Number of Installments:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-noOfInstallments\"\n                  name=\"noOfInstallments\"\n                  formControlName=\"noOfInstallments\"\n                  placeholder=\"Number of Installments\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseFeeForm.get('noOfInstallments').touched\n                      ? studentCourseFeeForm.get('noOfInstallments').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"generateNoOfInstallments($event.target.value)\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    studentCourseFeeForm.get('noOfInstallments').invalid &&\n                    studentCourseFeeForm.get('noOfInstallments').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('noOfInstallments').errors?.required\"\n                  >\n                    Number of Installments are Required\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('noOfInstallments').errors?.min\"\n                  >\n                    Number of Installments should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-pendingAmount\">Pending Amount:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-pendingAmount\"\n                  name=\"pendingAmount\"\n                  formControlName=\"pendingAmount\"\n                  placeholder=\"Pending Amount\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseFeeForm.get('pendingAmount').invalid ? 'danger' : 'success'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container *ngIf=\"studentCourseFeeForm.get('pendingAmount').invalid\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('pendingAmount').errors?.required\"\n                  >\n                    Pending Amount is Required\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('pendingAmount').errors?.min\"\n                  >\n                    Pending Amount should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-amountCollected\">Amount Collected:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-amountCollected\"\n                  name=\"amountCollected\"\n                  formControlName=\"amountCollected\"\n                  placeholder=\"Amount Collected\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    studentCourseFeeForm.get('amountCollected').invalid ? 'danger' : 'success'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container *ngIf=\"studentCourseFeeForm.get('amountCollected').invalid\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('amountCollected').errors?.required\"\n                  >\n                    Collected Amount is Required\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('amountCollected').errors?.min\"\n                  >\n                    Collected Amount should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-totalAmount\">Total Payable Amount:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-totalAmount\"\n                  name=\"totalAmount\"\n                  formControlName=\"totalAmount\"\n                  placeholder=\"Total Amount\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"studentCourseFeeForm.get('totalAmount').invalid ? 'danger' : 'success'\"\n                  disabled=\"true\"\n                />\n                <ng-container *ngIf=\"studentCourseFeeForm.get('totalAmount').invalid\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('totalAmount').errors?.required\"\n                  >\n                    Total Amount is Required\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"studentCourseFeeForm.get('totalAmount').errors?.min\"\n                  >\n                    Total Amount should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"studentCourseInstallmentForm\" label=\"Installment Details\">\n        <form\n          [formGroup]=\"studentCourseInstallmentForm\"\n          (ngSubmit)=\"studentCourseInstallmentFormSubmit()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div\n                class=\"table-responsive\"\n                *ngIf=\"\n                  !!getNoOfInstallments() &&\n                    studentCourseInstallmentForm.get('installments')['controls'].length > 0;\n                  else noInstallments\n                \"\n              >\n                <table class=\"table table-bordered\">\n                  <thead>\n                    <tr>\n                      <th>Installment Number</th>\n                      <th>Installment Date</th>\n                      <th>Installment Amount</th>\n                      <th>Pending Amount after This Installment</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <ng-container\n                      *ngFor=\"\n                        let installment of studentCourseInstallmentForm.get('installments')[\n                          'controls'\n                        ];\n                        let i = index\n                      \"\n                    >\n                      <tr [formGroup]=\"installment\">\n                        <td>Installment {{ installment.value.installmentNo }}</td>\n                        <td>\n                          <div class=\"form-control-group\">\n                            <input\n                              type=\"date\"\n                              nbInput\n                              id=\"input-installmentDate-{{ i }}\"\n                              name=\"installmentDate-{{ i }}\"\n                              formControlName=\"installmentDate\"\n                              placeholder=\"Installment Date\"\n                              fullWidth\n                              [min]=\"getMinInstallmentDate(i)\"\n                              [max]=\"getMaxInstallmentDate(i)\"\n                              [status]=\"\n                                installment.get('installmentDate').touched\n                                  ? installment.get('installmentDate').invalid\n                                    ? 'danger'\n                                    : 'success'\n                                  : 'basic'\n                              \"\n                            />\n                            <ng-container\n                              *ngIf=\"\n                                installment.get('installmentDate').touched &&\n                                installment.get('installmentDate').invalid\n                              \"\n                            >\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.get('installmentDate').errors?.required\"\n                              >\n                                Installment {{ i + 1 }} Date is required\n                              </p>\n                            </ng-container>\n                          </div>\n                        </td>\n\n                        <td>\n                          <div class=\"form-control-group\">\n                            <input\n                              type=\"number\"\n                              nbInput\n                              id=\"input-installmentAmount-{{ i }}\"\n                              name=\"installmentAmount-{{ i }}\"\n                              formControlName=\"installmentAmount\"\n                              placeholder=\"Installment Amount\"\n                              [min]=\"getMinInstallmentAmount(i)\"\n                              [max]=\"getMaxInstallmentAmount(i)\"\n                              fullWidth\n                              [status]=\"\n                                installment.get('installmentAmount').touched\n                                  ? installment.get('installmentAmount').invalid ||\n                                    installment.hasError('invalidMinInstallmentAmount') ||\n                                    installment.hasError('invalidMaxInstallmentAmount')\n                                    ? 'danger'\n                                    : 'success'\n                                  : 'basic'\n                              \"\n                              (input)=\"customInstallmentAmount($event.target.value, i)\"\n                            />\n                            <ng-container *ngIf=\"installment.get('installmentAmount').touched\">\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.get('installmentAmount').errors?.required\"\n                              >\n                                Installment {{ i + 1 }} Amount is Required\n                              </p>\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.hasError('invalidMinInstallmentAmount')\"\n                              >\n                                Installment {{ i + 1 }} Amount should be Minimum\n                                {{ getMinInstallmentAmount(i) }}\n                              </p>\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.hasError('invalidMaxInstallmentAmount')\"\n                              >\n                                Installment {{ i + 1 }} Amount should be Maximum\n                                {{ getMaxInstallmentAmount(i) }}\n                              </p>\n                            </ng-container>\n                          </div>\n                        </td>\n\n                        <td>\n                          <div class=\"form-control-group\">\n                            <input\n                              type=\"number\"\n                              nbInput\n                              id=\"input-amountPending-{{ i }}\"\n                              name=\"amountPending-{{ i }}\"\n                              formControlName=\"amountPending\"\n                              placeholder=\"Pending Amount\"\n                              [min]=\"getMinInstallmentPendingAmount(i)\"\n                              [max]=\"getMaxInstallmentPendingAmount(i)\"\n                              fullWidth\n                              [status]=\"\n                                installment.get('amountPending').touched\n                                  ? installment.get('amountPending').invalid ||\n                                    installment.hasError('invalidMinInstallmentPendingAmount') ||\n                                    installment.hasError('invalidMaxInstallmentPendingAmount')\n                                    ? 'danger'\n                                    : 'success'\n                                  : 'basic'\n                              \"\n                              disabled=\"true\"\n                            />\n                            <ng-container *ngIf=\"installment.get('amountPending').touched\">\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.get('amountPending').errors?.required\"\n                              >\n                                Installment {{ i + 1 }} Pending Amount is Required\n                              </p>\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.hasError('invalidMinInstallmentPendingAmount')\"\n                              >\n                                Installment {{ i + 1 }} Pending Amount should be Minimum\n                                {{ getMinInstallmentPendingAmount(i) }}\n                              </p>\n                              <p\n                                class=\"caption status-danger\"\n                                *ngIf=\"installment.hasError('invalidMaxInstallmentPendingAmount')\"\n                              >\n                                Installment {{ i + 1 }} Pending Amount should be Maximum\n                                {{ getMaxInstallmentPendingAmount(i) }}\n                              </p>\n                            </ng-container>\n                          </div>\n                        </td>\n                      </tr>\n                    </ng-container>\n                  </tbody>\n                </table>\n              </div>\n              <ng-template #noInstallments>\n                <p class=\"mt-4 text-center\">No Installments</p>\n              </ng-template>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th colspan=\"2\">Course Details</th>\n                </tr>\n                <tr>\n                  <th>Course</th>\n                  <td>{{ getCourse(studentCourseForm.value.course) }}</td>\n                </tr>\n                <tr>\n                  <th>Batch</th>\n                  <td>{{ getBatch(studentCourseForm.value.batch) }}</td>\n                </tr>\n                <tr>\n                  <th>Roll Number</th>\n                  <td>{{ studentCourseForm.value.rollNumber }}</td>\n                </tr>\n                <tr>\n                  <th>Discount</th>\n                  <td>{{ getDiscount(studentCourseForm.value.discount) }}</td>\n                </tr>\n                <tr>\n                  <th>Additional Discount</th>\n                  <td>\n                    {{\n                      studentCourseForm.value.additionalDiscountAmount\n                        ? studentCourseForm.value.additionalDiscountAmount +\n                          (studentCourseForm.value.additionalDiscountType === 'percentage'\n                            ? '%'\n                            : '')\n                        : '--'\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Net Payable</th>\n                  <td>{{ studentCourseForm.value.netPayable }}</td>\n                </tr>\n                <tr>\n                  <th>Activation Date</th>\n                  <td>{{ dateService.formatDate(studentCourseForm.value.activationDate) }}</td>\n                </tr>\n                <tr>\n                  <th colspan=\"2\">Course Fee Details</th>\n                </tr>\n                <tr>\n                  <th>Date</th>\n                  <td>{{ dateService.formatDate(studentCourseFeeForm.value.date) }}</td>\n                </tr>\n                <tr>\n                  <th>Number of Installments</th>\n                  <td>{{ studentCourseFeeForm.getRawValue().noOfInstallments }}</td>\n                </tr>\n                <tr>\n                  <th>Amount Collected</th>\n                  <td>{{ studentCourseFeeForm.value.amountCollected }}</td>\n                </tr>\n                <tr>\n                  <th>Pending Amount</th>\n                  <td>{{ studentCourseFeeForm.value.pendingAmount }}</td>\n                </tr>\n                <tr>\n                  <th>Total Payable Amount</th>\n                  <td>{{ studentCourseFeeForm.value.totalAmount }}</td>\n                </tr>\n                <tr>\n                  <th colspan=\"2\">Installment Details</th>\n                </tr>\n                <tr>\n                  <td colspan=\"2\">\n                    <div class=\"table-responsive\">\n                      <table class=\"table table-sm table-bordered\">\n                        <thead>\n                          <tr>\n                            <th>Installment No.</th>\n                            <th>Installment Date</th>\n                            <th>Installment Amount</th>\n                            <th>Pending Amount after Installment</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr\n                            *ngFor=\"\n                              let installment of studentCourseInstallmentForm.get('installments')[\n                                'controls'\n                              ];\n                              let i = index\n                            \"\n                          >\n                            <td>Installment {{ installment.value.installmentNo }}</td>\n                            <td>\n                              {{ dateService.formatDate(installment.value.installmentDate) }}\n                            </td>\n                            <td>{{ installment.value.installmentAmount }}</td>\n                            <td>{{ installment.value.amountPending }}</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button\n                type=\"button\"\n                class=\"\"\n                nbButton\n                size=\"small\"\n                (click)=\"previousStep()\"\n                [disabled]=\"submit\"\n              >\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveStudentCourse()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddStudentCourseComponent } from './add-student-course.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddStudentCourseComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddStudentCourseRoutingModule {}\n","import { InstallmentModel } from './../../../../../models/student-course-installment.model';\nimport { CourseService } from './../../../../../services/course.service';\nimport { BatchService } from './../../../../../services/batch.service';\nimport { DiscountAndOfferModel } from './../../../../../models/discount-and-offer.model';\nimport { BatchModel } from './../../../../../models/batch.model';\nimport { CourseModel } from './../../../../../models/course.model';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { StudentCourseService } from './../../../../../services/student-course.service';\nimport { DateService } from './../../../../../services/shared-services/date.service';\nimport { StudentService } from './../../../../../services/student.service';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { StudentCourseInstallmentService } from '../../../../../services/student-course-installment.service';\nimport { StudentCourseInstallmentModel } from '../../../../../models/student-course-installment.model';\nimport { ObjectId } from 'bson';\nimport { DiscountAndOfferService } from '../../../../../services/discount-and-offer.service';\n\n@Component({\n  selector: 'ngx-add-student-course',\n  templateUrl: './add-student-course.component.html',\n  styleUrls: ['./add-student-course.component.scss'],\n})\nexport class AddStudentCourseComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n  private studentId: string;\n  private categoryId: string;\n  private studentCourseId: string;\n\n  studentCourse: StudentCourseModel;\n  studentCourseInstallment: StudentCourseInstallmentModel;\n\n  discount: DiscountAndOfferModel;\n  discounts: DiscountAndOfferModel[];\n\n  discountTypes: string[];\n\n  course: CourseModel;\n  courses: CourseModel[];\n\n  batch: BatchModel;\n  private batches: BatchModel[];\n  courseBatches: BatchModel[];\n\n  rollNumberAlreadyExist: boolean;\n\n  studentCourseForm: FormGroup;\n  studentCourseFeeForm: FormGroup;\n  studentCourseInstallmentForm: FormGroup;\n\n  constructor(\n    public dateService: DateService,\n    private toastrService: NbToastrService,\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private discountAndOfferService: DiscountAndOfferService,\n    private studentService: StudentService,\n    private studentCourseService: StudentCourseService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    // route.queryParams.subscribe((param: Params) => {\n    //   this.ngOnInit();\n    // });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    this.categoryId = this.branchService.getCategoryId();\n    this.studentId = this.studentService.getStudentId();\n    if (!this.branchId && !this.categoryId && !this.studentId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n\n      return;\n    }\n\n    this.studentCourseId = this.studentCourseService.getStudentCourseId();\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.studentCourseId) {\n      this.showToastr('top-right', 'danger', 'Student Course Not Found');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.discounts = [];\n    this.courses = [];\n    this.batches = [];\n    this.courseBatches = [];\n    this.discountTypes = [];\n    this.rollNumberAlreadyExist = false;\n\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\n      this.courses = courses;\n    });\n\n    this.batchService.getBatchesData().subscribe((batches: BatchModel[]) => {\n      this.batches = batches;\n    });\n\n    this.discountAndOfferService\n      .getDiscountAndOffersData()\n      .subscribe((discountAndOffers: DiscountAndOfferModel[]) => {\n        this.discounts = discountAndOffers;\n      });\n\n    this.discountTypes = this.discountAndOfferService.getDiscountTypes();\n\n    this.studentCourseForm = new FormGroup(\n      {\n        course: new FormControl('', { validators: [Validators.required] }),\n        batch: new FormControl('', { validators: [Validators.required] }),\n        rollNumber: new FormControl(null, { validators: [Validators.required, Validators.min(1)] }),\n        discount: new FormControl('', {\n          validators: [],\n        }),\n        additionalDiscountType: new FormControl(\n          this.discountTypes.length > 0 ? this.discountTypes[0] : '',\n          {\n            validators: [],\n          },\n        ),\n        additionalDiscountAmount: new FormControl(0, {\n          validators: [Validators.min(0)],\n        }),\n        activationDate: new FormControl(this.dateService.getDateString(), {\n          validators: [Validators.required],\n        }),\n        netPayable: new FormControl(0, {\n          validators: [Validators.required],\n        }),\n      },\n      {\n        validators: this.discountPercentageValidator.bind(this),\n      },\n    );\n\n    this.studentCourseFeeForm = new FormGroup({\n      installmentType: new FormControl('0', {\n        validators: [Validators.required],\n      }),\n      date: new FormControl(this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n      noOfInstallments: new FormControl(1, {\n        validators: [Validators.required, Validators.min(1)],\n      }),\n      pendingAmount: new FormControl(0, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n      amountCollected: new FormControl(0, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n      totalAmount: new FormControl(0, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n    });\n\n    this.studentCourseInstallmentForm = new FormGroup({\n      installments: new FormArray([]),\n    });\n\n    if (mode && this.studentId && this.studentCourseId) {\n      this.studentCourseService.getStudentCourseForEditing(this.studentCourseId).subscribe(\n        (res: any) => {\n          this.studentCourse = res.studentCourse;\n          this.studentCourseInstallment = res.studentCourseInstallment;\n          this.studentCourseForm.patchValue({\n            course: this.studentCourse.course,\n            activationDate: this.studentCourse.activationDate,\n            rollNumber: this.studentCourse.rollNumber,\n            discount: this.studentCourse.discount,\n            additionalDiscountType: this.studentCourse.additionalDiscountType,\n            additionalDiscountAmount: this.studentCourse.additionalDiscountAmount,\n            netPayable: this.studentCourse.netPayable,\n          });\n\n          this.onSelectCourse(this.studentCourse.course);\n\n          this.studentCourseForm.patchValue({\n            batch: this.studentCourse.batch,\n          });\n\n          this.disableStudentCourseDetails();\n\n          if (this.studentCourseInstallment) {\n            this.studentCourseFeeForm.patchValue({\n              installmentType: this.studentCourseInstallment.installmentType,\n              date: this.studentCourseInstallment.date,\n              noOfInstallments: this.studentCourseInstallment.noOfInstallments,\n              amountCollected: this.studentCourseInstallment.amountCollected,\n              pendingAmount: this.studentCourseInstallment.pendingAmount,\n              totalAmount: this.studentCourseInstallment.totalAmount,\n            });\n\n            this.disableStudentCourseFeeForm();\n\n            this.resetStudentCourseInstallments();\n\n            this.studentCourseInstallment.installments.forEach(\n              (installment: InstallmentModel, i: number) => {\n                this.addStudentCourseInstallment(installment);\n                if (installment.receiptId) {\n                  // this.getStudentCourseInstallments()[i].get('installmentDate').disable();\n                }\n              },\n            );\n\n            this.disableStudentCourseInstallmentFields();\n          }\n\n          this.loading = false;\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.back();\n        },\n      );\n    } else {\n      this.loading = false;\n    }\n  }\n\n  private discountPercentageValidator(group: FormGroup): { [s: string]: boolean } {\n    const discountType = group.getRawValue().additionalDiscountType;\n    const amount = +group.getRawValue().additionalDiscountAmount;\n    if (discountType === 'percentage' && amount > 100) {\n      return { invalidDiscountPercentage: true };\n    }\n    return null;\n  }\n\n  checkRollNumber() {\n    let rollNumber: any = this.studentCourseForm.getRawValue().rollNumber;\n    const batchId = this.studentCourseForm.getRawValue().batch;\n    if (rollNumber) {\n      rollNumber = rollNumber.toString();\n      if (\n        this.studentCourse &&\n        this.studentCourse.batch === batchId &&\n        this.studentCourse.rollNumber === rollNumber\n      ) {\n        return;\n      }\n      const courseId = this.studentCourseForm.getRawValue().course;\n      if (courseId && batchId) {\n        this.studentCourseService\n          .checkBatchRollNumber(this.branchId, this.categoryId, courseId, batchId, rollNumber)\n          .subscribe(\n            (res: any) => {\n              this.rollNumberAlreadyExist = res.rollNumberExist;\n            },\n            (err: any) => {},\n          );\n      }\n    }\n  }\n\n  onSelectCourse(courseId: string) {\n    this.studentCourseForm.patchValue({ batch: '' });\n    this.courseBatches = [];\n    this.courseBatches = this.batches.filter(\n      (curBatch: BatchModel) => curBatch.course === courseId,\n    );\n    this.course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\n    this.calculateNetPayableAmount();\n  }\n\n  onSelectBatch(batchId: string) {\n    if (batchId !== '') {\n      this.studentCourseForm.get('rollNumber').enable();\n      this.batch = this.batches.find((curBatch: BatchModel) => curBatch._id === batchId);\n      this.checkRollNumber();\n    } else {\n      this.studentCourseForm.get('rollNumber').disable();\n    }\n  }\n\n  onSelectDiscount(discountId: string) {\n    this.discount = this.discounts.find((curDicount: any) => curDicount._id === discountId);\n    this.calculateNetPayableAmount();\n  }\n\n  onAdditionalDiscountAmount(amount: number) {\n    if (amount >= 0) {\n      this.calculateNetPayableAmount();\n    }\n  }\n\n  changeAdditionalDiscountType() {\n    this.studentCourseForm.patchValue({ additionalDiscount: 0 });\n    this.calculateNetPayableAmount();\n  }\n\n  private calculateNetPayableAmount() {\n    let netPayable = 0;\n    let totalDiscountPercentage = 0;\n    let totalDiscountAmount = 0;\n    let calculatedAmount = 0;\n\n    const totalFee = this.course ? +this.course.feeDetails.totalFees : 0;\n    const discountType = this.discount ? this.discount.discountType : '';\n    const additionalDiscountType = this.studentCourseForm.getRawValue().additionalDiscountType;\n    const discount = this.discount ? +this.discount.discountAmount : 0;\n    const additionalDiscount = +this.studentCourseForm.getRawValue().additionalDiscountAmount;\n\n    if (this.course && totalFee) {\n      calculatedAmount = totalFee;\n\n      if (this.discount && discountType) {\n        if (discountType === 'percentage') {\n          totalDiscountPercentage += discount;\n        } else {\n          totalDiscountAmount += discount;\n        }\n      }\n\n      if (additionalDiscount) {\n        if (additionalDiscountType === 'percentage') {\n          totalDiscountPercentage += additionalDiscount;\n        } else {\n          totalDiscountAmount += additionalDiscount;\n        }\n      }\n      const percentageAmount = (totalDiscountPercentage / 100) * totalFee;\n      calculatedAmount = totalFee - totalDiscountAmount - percentageAmount;\n\n      netPayable = calculatedAmount;\n\n      this.studentCourseForm.patchValue({ netPayable });\n      this.studentCourseFeeForm.patchValue({ totalAmount: netPayable });\n\n      this.calculatePendingAmount();\n\n      const installmentType = this.studentCourseFeeForm.getRawValue().installmentType;\n      this.onSelectInstallmentType(installmentType);\n    }\n  }\n\n  private calculatePendingAmount() {\n    let pendingAmount = 0;\n    const totalAmount = this.studentCourseFeeForm.getRawValue().totalAmount;\n    const amountCollected = this.studentCourseFeeForm.getRawValue().amountCollected;\n    pendingAmount = +totalAmount - (amountCollected ? amountCollected : 0);\n    this.studentCourseFeeForm.patchValue({ pendingAmount });\n  }\n\n  private enableStudentCourseDetails() {\n    this.studentCourseForm.get('course').enable();\n    this.studentCourseForm.get('discount').enable();\n    this.studentCourseForm.get('additionalDiscountType').enable();\n    this.studentCourseForm.get('additionalDiscountAmount').enable();\n  }\n\n  private disableStudentCourseDetails() {\n    this.studentCourseForm.get('course').disable();\n    this.studentCourseForm.get('discount').disable();\n    this.studentCourseForm.get('additionalDiscountType').disable();\n    this.studentCourseForm.get('additionalDiscountAmount').disable();\n  }\n\n  private enableStudentCourseFeeForm() {\n    this.studentCourseFeeForm.get('installmentType').enable();\n    this.studentCourseFeeForm.get('noOfInstallments').enable();\n  }\n\n  private disableStudentCourseFeeForm() {\n    this.studentCourseFeeForm.get('installmentType').disable();\n    this.studentCourseFeeForm.get('noOfInstallments').disable();\n  }\n\n  private getStudentCourseInstallments(): FormGroup[] {\n    const installments = this.studentCourseInstallmentForm.get('installments') as FormArray;\n    return installments.controls as FormGroup[];\n  }\n\n  private resetStudentCourseInstallments() {\n    const installments = this.studentCourseInstallmentForm.get('installments') as FormArray;\n    installments.controls = [];\n  }\n\n  private newStudentCourseInstallment(studentCourseInstallment: any) {\n    return new FormGroup(\n      {\n        _id: new FormControl(\n          studentCourseInstallment._id ? studentCourseInstallment._id : new ObjectId().toString(),\n          {\n            validators: [Validators.required],\n          },\n        ),\n        installmentNo: new FormControl(\n          studentCourseInstallment.installmentNo ? studentCourseInstallment.installmentNo : null,\n          {\n            validators: [Validators.required],\n          },\n        ),\n        installmentDate: new FormControl(\n          studentCourseInstallment.installmentDate\n            ? studentCourseInstallment.installmentDate\n            : null,\n          {\n            validators: [Validators.required],\n          },\n        ),\n        installmentAmount: new FormControl(\n          studentCourseInstallment.installmentAmount\n            ? studentCourseInstallment.installmentAmount\n            : 0,\n          {\n            validators: [Validators.required],\n          },\n        ),\n        amountPending: new FormControl(\n          studentCourseInstallment.installmentAmount ? studentCourseInstallment.amountPending : 0,\n          {\n            validators: [Validators.required],\n          },\n        ),\n        receiptId: new FormControl(\n          studentCourseInstallment.receiptId ? studentCourseInstallment.receiptId : null,\n          {\n            validators: [],\n          },\n        ),\n        status: new FormControl(\n          studentCourseInstallment.status ? studentCourseInstallment.status : true,\n          {\n            validators: [],\n          },\n        ),\n      },\n      {\n        validators: [\n          this.minInstallmentAmountValidator.bind(this),\n          this.maxInstallmentAmountValidator.bind(this),\n          this.minInstallmentPendingAmountValidator.bind(this),\n          this.maxInstallmentPendingAmountValidator.bind(this),\n        ],\n      },\n    );\n  }\n\n  private minInstallmentAmountValidator(group: FormGroup): { [s: string]: boolean } {\n    const installmentNo = +group.getRawValue().installmentNo;\n    const installmentAmount = +group.getRawValue().installmentAmount;\n    const minInstallmentAmount = this.getMinInstallmentAmount(installmentNo - 1);\n    if (installmentAmount < minInstallmentAmount) {\n      return { invalidMinInstallmentAmount: true };\n    }\n    return null;\n  }\n\n  private maxInstallmentAmountValidator(group: FormGroup): { [s: string]: boolean } {\n    const installmentNo = +group.getRawValue().installmentNo;\n    const installmentAmount = +group.getRawValue().installmentAmount;\n    const maxInstallmentAmount = this.getMaxInstallmentAmount(installmentNo - 1);\n    if (installmentAmount > maxInstallmentAmount) {\n      return { invalidMaxInstallmentAmount: true };\n    }\n    return null;\n  }\n\n  private minInstallmentPendingAmountValidator(group: FormGroup): { [s: string]: boolean } {\n    const installmentNo = +group.getRawValue().installmentNo;\n    const installmentPendingAmount = +group.getRawValue().amountPending;\n    const minInstallmentPendingAmount = this.getMinInstallmentPendingAmount(installmentNo - 1);\n    if (installmentPendingAmount < minInstallmentPendingAmount) {\n      return { invalidMinInstallmentPendingAmount: true };\n    }\n    return null;\n  }\n\n  private maxInstallmentPendingAmountValidator(group: FormGroup): { [s: string]: boolean } {\n    const installmentNo = +group.getRawValue().installmentNo;\n    const installmentPendingAmount = +group.getRawValue().amountPending;\n    const maxInstallmentPendingAmount = this.getMaxInstallmentPendingAmount(installmentNo - 1);\n    if (installmentPendingAmount > maxInstallmentPendingAmount) {\n      return { invalidMinInstallmentPendingAmount: true };\n    }\n    return null;\n  }\n\n  private addStudentCourseInstallment(studentCourseInstallment: any) {\n    const installments = this.getStudentCourseInstallments();\n    installments.push(this.newStudentCourseInstallment(studentCourseInstallment));\n  }\n\n  onSelectInstallmentType(installmentType: any) {\n    this.studentCourseFeeForm.patchValue({ amountCollected: 0 });\n    if (installmentType === '0') {\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\n      this.generateNoOfInstallments(1);\n    } else if (installmentType === '1') {\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\n      this.generateNoOfInstallments(2);\n    } else if (installmentType === '2') {\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\n      this.generateNoOfInstallments(4);\n    } else if (installmentType === '3') {\n      this.studentCourseFeeForm.get('noOfInstallments').disable();\n      this.generateNoOfInstallments(this.course.basicDetails.duration);\n    } else {\n      this.studentCourseFeeForm.get('noOfInstallments').enable();\n      const noOfInstallments: number = this.studentCourseFeeForm.getRawValue().noOfInstallments;\n      this.generateNoOfInstallments(noOfInstallments);\n    }\n  }\n\n  generateNoOfInstallments(noOfInstallments: number) {\n    if (noOfInstallments) {\n      noOfInstallments = noOfInstallments > 0 ? noOfInstallments : 3;\n      this.studentCourseFeeForm.patchValue({ amountCollected: 0 });\n\n      this.studentCourseFeeForm.patchValue({ noOfInstallments });\n\n      const interval = 2592000000; // 30 * 24 * 60 * 60 * 1000\n\n      const duration: number = +this.course.basicDetails.duration;\n      const installmentDuration = duration / noOfInstallments;\n      const date = this.studentCourseFeeForm.getRawValue().date;\n\n      const netPayable: number = +this.studentCourseForm.getRawValue().netPayable;\n      const amount: number = netPayable / noOfInstallments;\n      const pendingAmount: number = +this.studentCourseFeeForm.getRawValue().pendingAmount;\n\n      this.resetStudentCourseInstallments();\n\n      for (let i = 0; i < noOfInstallments; i++) {\n        const installmentDate = this.dateService.millisecondsToDateString(\n          this.dateService.dateToMilliseconds(date) + interval * (installmentDuration * i),\n        );\n\n        let amountPending = pendingAmount - +(amount * (i + 1));\n        amountPending = amountPending < 0 ? 0 : amountPending;\n\n        const installmentData = {\n          _id: new ObjectId(),\n          installmentNo: (i + 1).toString(),\n          installmentDate,\n          installmentAmount: Math.ceil(amount),\n          amountPending: Math.ceil(amountPending),\n          receiptId: null,\n          status: true,\n        };\n        this.addStudentCourseInstallment(installmentData);\n      }\n\n      const installmentType = this.studentCourseFeeForm.getRawValue().installmentType;\n\n      if (installmentType === '4') {\n        this.enableStudentCourseInstallmentFields();\n      } else {\n        this.disableStudentCourseInstallmentFields();\n      }\n    }\n  }\n\n  customInstallmentAmount(amount: number, i: number) {\n    if (\n      !amount ||\n      amount < this.getMinInstallmentAmount(i) ||\n      amount > this.getMaxInstallmentAmount(i)\n    ) {\n      return;\n    }\n\n    const installments = this.getStudentCourseInstallments();\n    const noOfInstallments: number = this.getNoOfInstallments();\n\n    const pendingAmount: number =\n      i === 0\n        ? this.studentCourseFeeForm.getRawValue().totalAmount\n        : installments[i - 1].getRawValue().amountPending;\n\n    const amountPending: number = pendingAmount - amount;\n\n    installments[i].patchValue({ amountPending });\n    const noOfUnchangedInstallments: number =\n      noOfInstallments - (i + 1) > 0 ? noOfInstallments - (i + 1) : 1;\n    let installmentAmount: number = Math.ceil(amountPending / noOfUnchangedInstallments);\n    if (i !== noOfInstallments - 1) {\n      for (let j = 0; j < noOfUnchangedInstallments; j++) {\n        let curAmountPending = amountPending - +(installmentAmount * (j + 1));\n        curAmountPending = curAmountPending < 0 ? 0 : curAmountPending;\n        const index = i + j + 1;\n        if (index === noOfInstallments - 1) {\n          if (this.getMaxInstallmentAmount(index) < installmentAmount) {\n            installmentAmount = this.getMaxInstallmentAmount(index);\n          }\n        }\n        installments[index].patchValue({\n          installmentAmount,\n          amountPending: curAmountPending,\n        });\n      }\n    }\n  }\n\n  getMinInstallmentDate(i: number) {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    if (i === 0) {\n      // First Installment\n      return this.studentCourseFeeForm.getRawValue().date;\n    } else {\n      return installments[i - 1].getRawValue().installmentDate;\n    }\n  }\n\n  getMaxInstallmentDate(i: number) {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    const noOfInstallments: number = this.getNoOfInstallments();\n\n    if (i === 0 && noOfInstallments === 1) {\n      // First Installment\n      return this.studentCourseFeeForm.getRawValue().date;\n    } else if (i === noOfInstallments - 1) {\n      // Last Installment\n      return this.dateService.millisecondsToDateString(\n        this.dateService.dateToMilliseconds(this.studentCourseFeeForm.getRawValue().date) +\n          1000 * 60 * 60 * 24 * 30 * this.course.basicDetails.duration,\n      );\n    } else {\n      return installments[i + 1].getRawValue().installmentDate;\n    }\n  }\n\n  getMinInstallmentAmount(i: number) {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    const noOfInstallments: number = this.getNoOfInstallments();\n    if (i === 0 && noOfInstallments === 1) {\n      // First Installment for only 1 installment\n      return this.studentCourseFeeForm.getRawValue().totalAmount;\n    } else if (i === 0 && noOfInstallments > 1) {\n      // Last Installment for more than 1 installment\n      return 1;\n    } else if (i === noOfInstallments - 1) {\n      // Last Installment\n      return installments[i - 1].getRawValue().amountPending;\n    } else {\n      return 1;\n    }\n  }\n\n  getMaxInstallmentAmount(i: number) {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    const noOfInstallments: number = this.getNoOfInstallments();\n\n    if (i === 0 && noOfInstallments >= 1) {\n      // First Instalment\n      return this.studentCourseFeeForm.getRawValue().totalAmount;\n    } else if (i === noOfInstallments - 1) {\n      // Last Installment\n      return installments[i - 1].getRawValue().amountPending;\n    } else {\n      return installments[i - 1].getRawValue().amountPending;\n    }\n  }\n\n  getMinInstallmentPendingAmount(i: number) {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    const noOfInstallments: number = this.getNoOfInstallments();\n    if (i === 0 && noOfInstallments >= 1) {\n      // First Installment\n      return 0;\n    } else if (i === noOfInstallments - 1) {\n      // Last Installment\n      return 0;\n    } else {\n      if (installments[i]) {\n        return (\n          installments[i - 1].getRawValue().amountPending -\n          installments[i].getRawValue().installmentAmount\n        );\n      }\n      return 0;\n    }\n  }\n\n  getMaxInstallmentPendingAmount(i: number) {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    const noOfInstallments: number = this.getNoOfInstallments();\n\n    if (i === 0 && noOfInstallments >= 1) {\n      // First Installment\n      return this.studentCourseFeeForm.getRawValue().totalAmount;\n    } else if (i === noOfInstallments - 1) {\n      // Last Installment\n      return 0;\n    } else {\n      if (installments[i]) {\n        return (\n          installments[i - 1].getRawValue().amountPending -\n          installments[i].getRawValue().installmentAmount +\n          1\n        );\n      }\n    }\n  }\n\n  getNoOfInstallments(): number {\n    return +this.studentCourseFeeForm.getRawValue().noOfInstallments;\n  }\n\n  private enableStudentCourseInstallmentFields() {\n    const installments = this.getStudentCourseInstallments();\n    installments.forEach((installment: FormGroup) => {\n      installment.get('installmentAmount').enable();\n      // installment.get('amountPending').enable();\n    });\n  }\n\n  private disableStudentCourseInstallmentFields() {\n    const installments = this.getStudentCourseInstallments();\n    installments.forEach((installment: FormGroup) => {\n      installment.get('installmentAmount').disable();\n      // installment.get('amountPending').disable();\n    });\n  }\n\n  previousStep() {\n    if (this.studentCourse) {\n      this.disableStudentCourseDetails();\n    }\n    const installmentType = this.studentCourseFeeForm.getRawValue().installmentType;\n    if (this.studentCourseInstallment) {\n      this.disableStudentCourseInstallmentFields();\n    } else if (installmentType !== '4') {\n      this.disableStudentCourseInstallmentFields();\n    }\n    this.stepper.previous();\n  }\n\n  studentCourseFormSubmit() {\n    this.studentCourseForm.markAllAsTouched();\n    if (this.rollNumberAlreadyExist) {\n      this.showToastr('top-right', 'danger', 'Student Roll Number for this Batch already Exist');\n      return;\n    } else if (this.studentCourseForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Student Course Details are Required');\n      return;\n    }\n    if (this.studentCourse) {\n      this.enableStudentCourseDetails();\n    }\n    this.stepper.next();\n  }\n\n  studentCourseFeeFormSubmit() {\n    this.studentCourseFeeForm.markAllAsTouched();\n    if (this.studentCourseFeeForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Student Course Fee Details are Required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  studentCourseInstallmentFormSubmit() {\n    this.studentCourseInstallmentForm.markAllAsTouched();\n    if (this.studentCourseInstallmentForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\n      return;\n    }\n\n    if (!this.validateStudentCourseInstallmentForm()) {\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\n      return;\n    }\n\n    this.enableStudentCourseInstallmentFields();\n\n    this.stepper.next();\n  }\n\n  private validateStudentCourseInstallmentForm(): boolean {\n    const installments: FormGroup[] = this.getStudentCourseInstallments();\n    let invalidInstallments: boolean = false;\n    installments.forEach((installment: FormGroup, i) => {\n      if (installment.invalid) {\n        invalidInstallments = true;\n      }\n    });\n\n    if (invalidInstallments) {\n      return false;\n    }\n    return true;\n  }\n\n  saveStudentCourse() {\n    this.studentCourseForm.markAllAsTouched();\n    this.studentCourseFeeForm.markAllAsTouched();\n    this.studentCourseInstallmentForm.markAllAsTouched();\n\n    if (this.rollNumberAlreadyExist) {\n      this.showToastr('top-right', 'danger', 'Student Roll Number for this Batch already Exist');\n      return;\n    } else if (this.studentCourseForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Student Course Details are Required');\n      return;\n    } else if (this.studentCourseFeeForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Student Course Fee Details are Required');\n      return;\n    } else if (this.studentCourseInstallmentForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\n      return;\n    } else if (!this.validateStudentCourseInstallmentForm()) {\n      this.showToastr('top-right', 'danger', 'Student Course Installment Details are Required');\n      return;\n    }\n    this.submit = true;\n\n    const studentCourseDetails: any = this.studentCourseForm.getRawValue();\n    studentCourseDetails.branch = this.branchId;\n    studentCourseDetails.category = this.categoryId;\n    studentCourseDetails.student = this.studentId;\n\n    const studentCourseInstallmentDetails: any = this.studentCourseFeeForm.getRawValue();\n    studentCourseInstallmentDetails.installments = this.studentCourseInstallmentForm.getRawValue().installments;\n    studentCourseInstallmentDetails.branch = this.branchId;\n    studentCourseInstallmentDetails.category = this.categoryId;\n    studentCourseInstallmentDetails.course = studentCourseDetails.course;\n    studentCourseInstallmentDetails.student = this.studentId;\n\n    if (!this.studentCourse && !this.studentCourseInstallment) {\n      this.studentCourseService\n        .addStudentCourse(studentCourseDetails, studentCourseInstallmentDetails)\n        .subscribe(\n          (res: any) => {\n            this.showToastr('top-right', 'success', 'Student Course Created Successfully!');\n            this.back();\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.submit = false;\n          },\n        );\n    } else if (this.studentCourse && !this.studentCourseInstallment) {\n      this.studentCourseInstallmentService\n        .addStudentCourseInstallment(this.studentCourse._id, studentCourseInstallmentDetails)\n        .subscribe(\n          (res: any) => {\n            this.showToastr(\n              'top-right',\n              'success',\n              'Student Course Installments Created Successfully!',\n            );\n            this.back();\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.submit = false;\n          },\n        );\n    } else {\n      studentCourseDetails._id = this.studentCourse._id;\n      studentCourseInstallmentDetails._id = this.studentCourseInstallment._id;\n      this.studentCourseService\n        .editStudentCourse(studentCourseDetails, studentCourseInstallmentDetails)\n        .subscribe(\n          (res: any) => {\n            this.showToastr('top-right', 'success', 'Student Course Updated Successfully!');\n            this.back();\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.submit = false;\n          },\n        );\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  getCourse(courseId: string) {\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\n\n    if (course) {\n      return course.basicDetails.courseName;\n    }\n\n    return '--';\n  }\n\n  getBatch(batchId: string) {\n    const batch = this.batches.find((curBatch: BatchModel) => curBatch._id === batchId);\n\n    if (batch) {\n      return batch.basicDetails.batchName;\n    }\n\n    return '--';\n  }\n\n  getDiscount(discountId: string) {\n    const discount = this.discounts.find(\n      (curDiscount: DiscountAndOfferModel) => curDiscount._id === discountId,\n    );\n\n    if (discount) {\n      const discountString =\n        discount.offerName +\n        ' (' +\n        discount.code +\n        ' - ' +\n        discount.discountAmount +\n        (discount.discountType === 'percentage' ? '%' : '.00') +\n        ')';\n\n      return discountString;\n    }\n\n    return '--';\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {}\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbIconModule,\n  NbButtonModule,\n  NbInputModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbCheckboxModule,\n  NbFormFieldModule,\n  NbSelectModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddStudentCourseRoutingModule } from './add-student-course-routing.module';\nimport { AddStudentCourseComponent } from './add-student-course.component';\n\n@NgModule({\n  declarations: [AddStudentCourseComponent],\n  imports: [\n    CommonModule,\n    AddStudentCourseRoutingModule,\n    NbCardModule,\n    NbIconModule,\n    NbButtonModule,\n    NbInputModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbCheckboxModule,\n    NbFormFieldModule,\n    NbSelectModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddStudentCourseModule {}\n"]}