{"version":3,"sources":["webpack:///src/app/student/branch/course/online-test/online-test-question/online-test-question.component.html","webpack:///src/app/student/branch/course/online-test/online-test-question/online-test-question-routing.module.ts","webpack:///src/app/student/branch/course/online-test/online-test-question/online-test-question.component.ts","webpack:///node_modules/tslib/tslib.es6.js","webpack:///src/app/student/branch/course/online-test/online-test-question/online-test-question.module.ts"],"names":["routes","path","component","OnlineTestQuestionComponent","branchService","toastrService","onlineExamService","onlineExamQuestionService","router","route","this","loading","branchId","getBranchId","waitingToStart","getOnlineExamData","subscribe","onlineExam","back","questions","getOnlineExamResult","_id","onlineExamResult","examStarted","examSubmitted","calculatingResult","countDownDate","Date","date","time","getTime","examStartTime","examTimeUp","interval","setInterval","now","distance","hours","Math","floor","minutes","seconds","clearInterval","error","showToastr","toString","substring","split","padStart","getOnlineExamQuestionsForStudent","onlineExamQuestions","studentQuestionAnswers","currentQuestionIndex","currentQuestion","duration","currentTime","endTime","examEndTime","examCountDown","submitExam","examInterval","thisArg","generator","examCountDownTimer","P","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","questionId","questionIndex","answerId","answerIndex","mark","index","findIndex","curAnswer","answerIds","push","ansIndex","curAnsId","splice","confirm","window","saveOnlineExamResult","res","type","position","status","message","show","navigate","relativeTo","loadChildren","m","PageNotFoundModule","redirectTo","pathMatch","OnlineTestQuestionRoutingModule","forChild","OnlineTestQuestionModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button\n      type=\"button\"\n      class=\"float-right\"\n      nbButton\n      size=\"small\"\n      status=\"success\"\n      (click)=\"!examStarted ? startExam() : submitExam()\"\n      *ngIf=\"!examSubmitted && !waitingToStart\"\n    >\n      {{ !examStarted ? 'Start' : 'Submit' }} Exam\n    </button>\n    <h3>\n      {{ onlineExam ? onlineExam.title : 'Online Exam' }}\n    </h3>\n    <p *ngIf=\"onlineExam\">\n      <span>{{ getDate(onlineExam.date) }}.&nbsp;{{ getTime(onlineExam.time) }}</span>\n    </p>\n  </nb-card-header>\n  <nb-card-body>\n    <div *ngIf=\"!waitingToStart; else examStartCountDown\">\n      <div *ngIf=\"!examStarted\">\n        <p class=\"pt-5 pb-5 text-center\" id=\"countDown\">Click on Start Exam</p>\n      </div>\n      <div *ngIf=\"examStarted\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <p class=\"text-right\" id=\"examCountDownTimer\" *ngIf=\"examCountDownTimer\">\n              Exam will End In <br />{{ examCountDownTimer }}\n            </p>\n            <p\n              class=\"text-right\"\n              id=\"examCountDownTimer\"\n              *ngIf=\"!examCountDownTimer && examSubmitted\"\n            >\n              Exam Ended\n            </p>\n          </div>\n\n          <div class=\"col-6\">\n            <button\n              type=\"button\"\n              nbButton\n              size=\"small\"\n              status=\"success\"\n              (click)=\"previousQuestion()\"\n              nbTooltip=\"Previous Question\"\n              *ngIf=\"currentQuestionIndex > 0 && !examSubmitted\"\n            >\n              <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n            </button>\n          </div>\n\n          <div class=\"col-6\">\n            <button\n              class=\"float-right\"\n              type=\"button\"\n              nbButton\n              size=\"small\"\n              status=\"success\"\n              (click)=\"nextQuestion()\"\n              nbTooltip=\"Next Question\"\n              *ngIf=\"currentQuestionIndex < questions.length - 1 && !examSubmitted\"\n            >\n              <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n            </button>\n          </div>\n        </div>\n\n        <hr />\n\n        <div class=\"row\" *ngIf=\"!examSubmitted\">\n          <div class=\"col-12\">\n            <p class=\"text-center\">\n              <strong>Question {{ currentQuestionIndex + 1 }}</strong>\n            </p>\n            <p>\n              <Strong>{{ currentQuestion.question }}</Strong>\n            </p>\n            <div *ngFor=\"let answer of currentQuestion.answers; let i = index\">\n              <nb-checkbox\n                (checkedChange)=\"\n                  markAnswer(currentQuestion._id, currentQuestionIndex, answer._id, i, $event)\n                \"\n              >\n                <strong>{{ i + 1 }}.</strong>\n                &nbsp;&nbsp;\n                <span>{{ answer.answer }}</span>\n              </nb-checkbox>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\" *ngIf=\"examSubmitted\">\n          <div class=\"col-12 pt-3 pb-3\">\n            <p class=\"text-center\" *ngIf=\"calculatingResult\">Calculating Result</p>\n            <p class=\"text-center\" *ngIf=\"!calculatingResult\">\n              <span>Attempted: {{ onlineExamResult.answeredQuestions }} </span>\n              <span>,</span>\n              <span>Unattempted: {{ onlineExamResult.unAnsweredQuestions }} </span>\n              <br />\n              <span>Correct Answers: {{ onlineExamResult.correctAnswers }}</span>\n              <span>,</span>\n              <span>Wrong Answers: {{ onlineExamResult.wrongAnswers }}</span>\n              <br />\n              <strong>You got: </strong> {{ onlineExamResult.marks }}/{{ onlineExam.totalMarks }}\n              <br />\n              <strong>{{ onlineExamResult.status ? 'Pass' : 'Failed' }}</strong>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #examStartCountDown>\n  <p class=\"pt-5 pb-5 text-center\" id=\"waitingToStart\">\n    <span *ngIf=\"waitingToStart === 'loading'\"> Loading... </span>\n    <span *ngIf=\"waitingToStart !== 'loading'\">\n      Exam will Start In <br />{{ waitingToStart }}\n    </span>\n  </p>\n</ng-template>\n","import { OnlineTestQuestionComponent } from './online-test-question.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OnlineTestQuestionComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OnlineTestQuestionRoutingModule {}\n","import { OnlineExamResultModel } from './../../../../../models/online-exam-result.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { OnlineExamQuestionService } from './../../../../../services/online-exam-question.service';\nimport { AuthService } from './../../../../../authentication/auth/auth-service/auth.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { OnlineExamService } from './../../../../../services/online-exam.service';\nimport { OnlineExamModel } from './../../../../../models/online-exam.model';\nimport { OnlineExamQuestionModel } from './../../../../../models/online-exam-question.model';\nimport { Router, ActivatedRoute } from '@angular/router';\n\ninterface StudentQuestionAnswers {\n  questionId: string;\n  questionIndex: number;\n  answerIds: string[];\n}\n\n@Component({\n  selector: 'ngx-online-test-question',\n  templateUrl: './online-test-question.component.html',\n  styleUrls: ['./online-test-question.component.scss'],\n})\nexport class OnlineTestQuestionComponent implements OnInit, OnDestroy {\n  loading: boolean;\n\n  branchId: string;\n\n  onlineExam: OnlineExamModel;\n  questions: OnlineExamQuestionModel[];\n\n  examInterval: any;\n\n  currentQuestion: OnlineExamQuestionModel;\n  currentQuestionIndex: number;\n  studentQuestionAnswers: StudentQuestionAnswers[];\n\n  onlineExamResult: any;\n  calculatingResult: boolean;\n\n  examCountDownTimer: string;\n  waitingToStart: string;\n  examStarted: boolean;\n  examSubmitted: boolean;\n\n  examStartTime: number;\n  examEndTime: number;\n  examTimeUp: boolean;\n\n  constructor(\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private onlineExamService: OnlineExamService,\n    private onlineExamQuestionService: OnlineExamQuestionService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.loading = true;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.waitingToStart = 'loading';\n\n    this.onlineExamService.getOnlineExamData().subscribe((onlineExam: OnlineExamModel) => {\n      if (!onlineExam) {\n        this.back();\n        return;\n      }\n      this.onlineExam = onlineExam;\n    });\n\n    this.questions = [];\n\n    this.onlineExamService.getOnlineExamResult(this.onlineExam._id).subscribe(\n      (onlineExamResult: OnlineExamResultModel) => {\n        if (onlineExamResult) {\n          this.onlineExamResult = onlineExamResult;\n          this.waitingToStart = null;\n          this.examStarted = true;\n          this.examSubmitted = true;\n          this.calculatingResult = false;\n        } else {\n          const startTime = this.onlineExam.date + 'T' + this.onlineExam.time;\n          const countDownDate = new Date(startTime).getTime();\n          this.examStartTime = countDownDate;\n          this.examStarted = false;\n          this.examSubmitted = false;\n          this.examTimeUp = false;\n\n          // Set Interval\n          const interval = setInterval(() => {\n            // Get today's date and time\n            const now = new Date().getTime();\n            // Find the distance time between current date and the count down date\n            const distance = countDownDate - now;\n            // Time calculations for days, hours, minutes and seconds\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            // Output the result in an 'waitingToStart' object variable\n            this.waitingToStart = hours + 'H ' + minutes + 'M ' + seconds + 'S ';\n\n            if (distance < 0) {\n              // Clear Interval\n              clearInterval(interval);\n              this.waitingToStart = null;\n            }\n            if (this.loading) {\n              this.loading = false;\n            }\n          }, 1000);\n        }\n\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  getDate(date: string) {\n    date = new Date(date).toString();\n    return date.substring(0, 3) + ', ' + date.substring(4, 15);\n  }\n\n  getTime(time: string) {\n    const hours = +time.split(':')[0];\n    const minutes = time.split(':')[1];\n    if (+hours > 12) {\n      return (+hours - 12).toString().padStart(2, '0') + ':' + minutes + ' PM';\n    }\n    return hours.toString().padStart(2, '0') + ':' + minutes + ' AM';\n  }\n\n  startExam() {\n    this.onlineExamQuestionService.getOnlineExamQuestionsForStudent(this.onlineExam._id).subscribe(\n      (onlineExamQuestions: OnlineExamQuestionModel[]) => {\n        this.questions = onlineExamQuestions;\n\n        this.waitingToStart = null;\n        this.examStarted = true;\n        this.studentQuestionAnswers = [];\n        this.currentQuestionIndex = 0;\n        this.currentQuestion = this.questions[0];\n\n        // Buffer time in millisecond (For calculating Exam Data)\n        const bufferTime = 0 * 1000;\n        const duration = +this.onlineExam.duration * 60 * 1000;\n        const currentTime: number = new Date().getTime();\n\n        const endTime: number = this.examStartTime + duration + bufferTime;\n        const differenceTime = endTime - currentTime;\n\n        if (differenceTime >= duration) {\n          this.examEndTime = currentTime + duration;\n        } else if (endTime > currentTime) {\n          this.examEndTime = this.examStartTime + duration + bufferTime;\n          this.examCountDown();\n        } else {\n          this.examEndTime = null;\n          this.examTimeUp = true;\n          this.submitExam();\n        }\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  examCountDown() {\n    this.examInterval = setInterval(async () => {\n      // Get today's date and time\n      const now = new Date().getTime();\n      // Find the distance time between current date and the count down date\n      const distance = this.examEndTime - now;\n      // Time calculations for days, hours, minutes and seconds\n      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      // Output the result in an 'CountDown' object variable\n      this.examCountDownTimer = hours + 'H ' + minutes + 'M ' + seconds + 'S ';\n\n      if (distance < 0) {\n        this.examCountDownTimer = null;\n        this.examTimeUp = true;\n        this.submitExam();\n      }\n    }, 1000);\n  }\n\n  previousQuestion() {\n    this.currentQuestionIndex -= 1;\n    this.currentQuestion = this.questions[this.currentQuestionIndex];\n  }\n\n  nextQuestion() {\n    this.currentQuestionIndex += 1;\n    this.currentQuestion = this.questions[this.currentQuestionIndex];\n  }\n\n  markAnswer(\n    questionId: string,\n    questionIndex: number,\n    answerId: string,\n    answerIndex: number,\n    mark: boolean,\n  ) {\n    const index = this.studentQuestionAnswers.findIndex(\n      (curAnswer: any) => curAnswer.questionId === questionId,\n    );\n\n    if (mark) {\n      if (index < 0) {\n        const studentQuestionAnswers: StudentQuestionAnswers = {\n          questionId,\n          questionIndex,\n          answerIds: [],\n        };\n        studentQuestionAnswers.answerIds.push(answerId);\n        this.studentQuestionAnswers.push(studentQuestionAnswers);\n      } else {\n        const studentQuestionAnswers = this.studentQuestionAnswers[index];\n        studentQuestionAnswers.answerIds.push(answerId);\n        this.studentQuestionAnswers[index] = studentQuestionAnswers;\n      }\n    } else {\n      if (index > -1) {\n        const studentQuestionAnswers: StudentQuestionAnswers = this.studentQuestionAnswers[index];\n        const ansIndex = studentQuestionAnswers.answerIds.findIndex(\n          (curAnsId: any) => curAnsId.answerId === answerId,\n        );\n        studentQuestionAnswers.answerIds.splice(ansIndex, 1);\n        this.studentQuestionAnswers[index] = studentQuestionAnswers;\n      }\n    }\n  }\n\n  submitExam() {\n    let confirm = true;\n    if (!this.examTimeUp) {\n      confirm = window.confirm('Do you want to Submit the Exam?');\n    }\n    if (!confirm) {\n      return;\n    }\n    this.calculatingResult = true;\n    this.examSubmitted = true;\n    this.currentQuestion = null;\n    this.currentQuestionIndex = null;\n\n    // Clear Interval\n    clearInterval(this.examInterval);\n\n    this.examCountDownTimer = null;\n\n    this.onlineExamService\n      .saveOnlineExamResult(this.studentQuestionAnswers, this.onlineExam._id)\n      .subscribe(\n        (res: any) => {\n          this.onlineExamResult = res.onlineExamResult;\n          if (res.type === 0) {\n            this.showToastr('top-right', 'success', 'Exam Submitted Successfully!');\n          }\n          this.calculatingResult = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n        },\n      );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.examInterval);\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbTooltipModule,\n  NbCheckboxModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OnlineTestQuestionRoutingModule } from './online-test-question-routing.module';\nimport { OnlineTestQuestionComponent } from './online-test-question.component';\n\n@NgModule({\n  declarations: [OnlineTestQuestionComponent],\n  imports: [\n    CommonModule,\n    OnlineTestQuestionRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n    NbCheckboxModule,\n  ],\n})\nexport class OnlineTestQuestionModule {}\n"]}