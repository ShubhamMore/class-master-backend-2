{"version":3,"sources":["webpack:///src/app/employee/branch/employee/add-employee/add-employee.component.html","webpack:///src/app/employee/branch/employee/add-employee/add-employee-routing.module.ts","webpack:///src/app/employee/branch/employee/add-employee/add-employee.component.ts","webpack:///src/app/employee/branch/employee/add-employee/add-employee.module.ts"],"names":["routes","path","component","AddEmployeeComponent","branchService","employeeService","roleService","dateService","userService","toastrService","branchEmployeeService","encryptService","router","route","this","loading","submit","branchId","getBranchId","navigate","relativeTo","mode","employeeId","getEmployeeId","branchEmployeeId","getBranchEmployeeId","queryParams","subscribe","param","showToastr","roles","getEmployeeRoles","alreadyRegisteredUser","employeeSearchForm","validators","required","employeeForm","name","minLength","email","phone","maxLength","min","max","birthDate","address","qualification","branchEmployeeForm","role","basicSalary","description","getBranchEmployeeForEditing","res","employee","branchEmployee","userExist","patchValue","imsMasterId","disableEmployeeDetails","err","back","get","valid","checkUser","value","exist","error","markAllAsTouched","invalid","searchEmployee","enable","disable","stepper","previous","enableEmployeeDetails","next","newBranchEmployee","branch","_id","editBranchEmployee","newEmployee","password","encrypt","encKey","addEmployee","position","status","message","show","type","getEmployeeType","replaceUrl","deleteEmployeeId","deleteBranchEmployeeId","branchEmployeeFormSubmit","previousStep","saveEmployee","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddEmployeeRoutingModule","forChild","AddEmployeeModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button\n      type=\"button\"\n      class=\"float-right\"\n      nbButton\n      size=\"small\"\n      status=\"warning\"\n      (click)=\"back()\"\n    >\n      Back\n    </button>\n    <h3 class=\"\">\n      {{ !employee ? 'Add New' : 'Edit' + ' Employee ' + (employee.name | uppercase) }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n      <nb-step [stepControl]=\"employeeForm\" label=\"Basic Details\">\n        <div class=\"row\">\n          <div class=\"col-md-12\" *ngIf=\"!employee\">\n            <nb-checkbox\n              id=\"input-already-registered\"\n              name=\"alreadyRegistered\"\n              [checked]=\"alreadyRegisteredUser\"\n              (checkedChange)=\"alreadyRegister($event)\"\n              >Already Registered Employee</nb-checkbox\n            >\n          </div>\n          <div class=\"col-md-6 col-sm-8\" *ngIf=\"alreadyRegisteredUser || employee\">\n            <form class=\"\" (submit)=\"searchEmployee()\" [formGroup]=\"employeeSearchForm\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-employee-employee-id\">Employee Id:</label>\n                <nb-form-field>\n                  <input\n                    type=\"text\"\n                    nbInput\n                    id=\"input-employee-id\"\n                    employeeId=\"employeeId\"\n                    formControlName=\"employeeId\"\n                    placeholder=\"Employee Email or IMS Master Id\"\n                    fullWidth\n                    [status]=\"\n                      employeeSearchForm.get('employeeId').touched\n                        ? employeeSearchForm.get('employeeId').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n                  <button\n                    nbSuffix\n                    nbTooltip=\"Fetch\"\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    type=\"submit\"\n                    *ngIf=\"!employee\"\n                  >\n                    <nb-icon icon=\"arrow-circle-right-outline\" status=\"success\"> </nb-icon>\n                  </button>\n                </nb-form-field>\n\n                <ng-container\n                  *ngIf=\"\n                    employeeSearchForm.get('employeeId').invalid &&\n                    employeeSearchForm.get('employeeId').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeSearchForm.get('employeeId').errors?.required\"\n                  >\n                    Employee Id is required!\n                  </p>\n                </ng-container>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <form\n          class=\"\"\n          (submit)=\"employeeFormSubmit()\"\n          [formGroup]=\"employeeForm\"\n          *ngIf=\"!alreadyRegisteredUser\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-employee-employee-name\">Employee Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-employee-name\"\n                  name=\"name\"\n                  formControlName=\"name\"\n                  placeholder=\"Employee Name\"\n                  minlength=\"3\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    employeeForm.get('name').touched\n                      ? employeeForm.get('name').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"employeeForm.get('name').invalid && employeeForm.get('name').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('name').errors?.required\"\n                  >\n                    Employee name is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('name').errors?.minlength\"\n                  >\n                    Employee Name should contain minimum 3 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-email\">Email address:</label>\n                <input\n                  type=\"email\"\n                  nbInput\n                  id=\"input-email\"\n                  name=\"email\"\n                  formControlName=\"email\"\n                  placeholder=\"Email address\"\n                  fullWidth\n                  [status]=\"\n                    employeeForm.get('email').touched\n                      ? employeeForm.get('email').invalid || userExist\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"checkUser()\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    (employeeForm.get('email').invalid || userExist) &&\n                    employeeForm.get('email').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('email').errors?.required\"\n                  >\n                    Email is required!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"employeeForm.get('email').errors?.email\">\n                    Email should be the real one!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"userExist\">\n                    Email Already registered, Please try another Email!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-phone\">Phone:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-phone\"\n                  name=\"phone\"\n                  formControlName=\"phone\"\n                  placeholder=\"phone\"\n                  minlength=\"10\"\n                  maxlength=\"10\"\n                  min=\"1000000000\"\n                  max=\"9999999999\"\n                  fullWidth\n                  [status]=\"\n                    employeeForm.get('phone').touched\n                      ? employeeForm.get('phone').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"employeeForm.get('phone').invalid && employeeForm.get('phone').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('phone').errors?.required\"\n                  >\n                    Phone is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      employeeForm.get('phone').errors?.minlength ||\n                      employeeForm.get('phone').errors?.maxlength ||\n                      employeeForm.get('phone').errors?.min ||\n                      employeeForm.get('phone').errors?.max\n                    \"\n                  >\n                    Phone should contain 10 digits\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-birth-date\">Birth Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-birth-date\"\n                  name=\"birthDate\"\n                  [max]=\"dateService.getDateString()\"\n                  formControlName=\"birthDate\"\n                  placeholder=\"Birth Date\"\n                  fullWidth\n                />\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address\">Address:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address\"\n                  name=\"address\"\n                  formControlName=\"address\"\n                  placeholder=\"Address (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-qualification\">Qualification:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-qualification\"\n                  name=\"qualification\"\n                  formControlName=\"qualification\"\n                  placeholder=\"Qualification (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"branchEmployeeForm\" label=\"Enrollment Details\">\n        <form\n          [formGroup]=\"branchEmployeeForm\"\n          (ngSubmit)=\"branchEmployeeFormSubmit()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-employee-role\">Role:</label>\n                <nb-select\n                  id=\"input-role\"\n                  name=\"role\"\n                  formControlName=\"role\"\n                  placeholder=\"Select Role\"\n                  fullWidth\n                  [status]=\"\n                    branchEmployeeForm.get('role').touched\n                      ? branchEmployeeForm.get('role').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Role</nb-option>\n                  <nb-option *ngFor=\"let role of roles\" [value]=\"role\">{{\n                    role | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    branchEmployeeForm.get('role').invalid && branchEmployeeForm.get('role').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchEmployeeForm.get('role').errors?.required\"\n                  >\n                    Employee Role is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-basic-salary\">Basic Salary:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-basic-salary\"\n                  name=\"basicSalary\"\n                  formControlName=\"basicSalary\"\n                  placeholder=\"Basic Salary\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    branchEmployeeForm.get('basicSalary').touched\n                      ? branchEmployeeForm.get('basicSalary').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    branchEmployeeForm.get('basicSalary').invalid &&\n                    branchEmployeeForm.get('basicSalary').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchEmployeeForm.get('basicSalary').errors?.required\"\n                  >\n                    Basic Salary is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchEmployeeForm.get('basicSalary').errors?.min\"\n                  >\n                    Basic Salary should be more than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-description\">Description:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-description\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  placeholder=\"Description (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr *ngIf=\"employeeSearchForm.value.employeeId\">\n                  <th>IMS Id</th>\n                  <td>{{ employeeSearchForm.value.employeeId }}</td>\n                </tr>\n                <tr>\n                  <th>Employee Name</th>\n                  <td>{{ employeeForm.value.name }}</td>\n                </tr>\n                <tr>\n                  <th>Email</th>\n                  <td>{{ employeeForm.value.email }}</td>\n                </tr>\n                <tr>\n                  <th>Phone</th>\n                  <td>{{ employeeForm.value.phone }}</td>\n                </tr>\n                <tr>\n                  <th>Address</th>\n                  <td>{{ employeeForm.value.address }}</td>\n                </tr>\n                <tr>\n                  <th>Qualification</th>\n                  <td>{{ employeeForm.value.qualification }}</td>\n                </tr>\n                <tr>\n                  <th>Role</th>\n                  <td>{{ branchEmployeeForm.value.role | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Basic Salary</th>\n                  <td>{{ branchEmployeeForm.value.basicSalary }}</td>\n                </tr>\n                <tr>\n                  <th>Description</th>\n                  <td>{{ branchEmployeeForm.value.description }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button\n                type=\"button\"\n                class=\"\"\n                nbButton\n                size=\"small\"\n                (click)=\"previousStep()\"\n                [disabled]=\"submit\"\n              >\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveEmployee()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddEmployeeComponent } from './add-employee.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddEmployeeComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddEmployeeRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\nimport { RoleService } from './../../../../services/role.service';\nimport { UserService } from './../../../../services/shared-services/user.service';\nimport { environment } from './../../../../../environments/environment.prod';\nimport { EncryptService } from './../../../../services/shared-services/encrypt.service';\nimport { BranchEmployeeService } from '../../../../services/branch-employee.service';\nimport { EmployeeService } from './../../../../services/employee.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { EmployeeModel } from './../../../../models/employee.model';\nimport { BranchEmployeeModel } from '../../../../models/branch-employee.model';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../services/branch.service';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-add-employee',\n  templateUrl: './add-employee.component.html',\n  styleUrls: ['./add-employee.component.scss'],\n})\nexport class AddEmployeeComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n  private employeeId: string;\n  private branchEmployeeId: string;\n  roles: string[];\n  userExist: boolean;\n\n  alreadyRegisteredUser: boolean;\n\n  employee: EmployeeModel;\n  branchEmployee: BranchEmployeeModel;\n\n  employeeForm: FormGroup;\n  branchEmployeeForm: FormGroup;\n  employeeSearchForm: FormGroup;\n  constructor(\n    private branchService: BranchService,\n    private employeeService: EmployeeService,\n    private roleService: RoleService,\n    public dateService: DateService,\n    private userService: UserService,\n    private toastrService: NbToastrService,\n    private branchEmployeeService: BranchEmployeeService,\n    private encryptService: EncryptService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    // route.queryParams.subscribe((param: Params) => {\n    //   // put the code from `ngOnInit` here\n    //   this.ngOnInit();\n    // });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n\n      return;\n    }\n\n    this.employeeId = this.employeeService.getEmployeeId();\n    this.branchEmployeeId = this.branchEmployeeService.getBranchEmployeeId();\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.employeeId && !this.branchEmployeeId) {\n      this.showToastr('top-right', 'danger', 'Employee Not Found');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.roles = this.roleService.getEmployeeRoles();\n\n    this.alreadyRegisteredUser = false;\n\n    this.employeeSearchForm = new FormGroup({\n      employeeId: new FormControl(null, { validators: [Validators.required] }),\n    });\n\n    this.employeeForm = new FormGroup({\n      name: new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }),\n      email: new FormControl(null, { validators: [Validators.required, Validators.email] }),\n      phone: new FormControl(null, {\n        validators: [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(10),\n          Validators.min(1000000000),\n          Validators.max(9999999999),\n        ],\n      }),\n      birthDate: new FormControl(null, {\n        validators: [],\n      }),\n      address: new FormControl(null, { validators: [] }),\n      qualification: new FormControl(null, { validators: [] }),\n    });\n\n    this.branchEmployeeForm = new FormGroup({\n      role: new FormControl(null, { validators: [Validators.required] }),\n      basicSalary: new FormControl(null, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n      description: new FormControl(null, {\n        validators: [],\n      }),\n    });\n\n    if (mode && this.employeeId && this.branchEmployeeId) {\n      this.branchEmployeeService\n        .getBranchEmployeeForEditing(this.branchEmployeeId, this.employeeId)\n        .subscribe(\n          (res: any) => {\n            this.employee = res.employee;\n            this.branchEmployee = res.branchEmployee;\n            this.userExist = false;\n            this.employeeSearchForm.patchValue({\n              employeeId: this.employee.imsMasterId,\n            });\n\n            this.employeeForm.patchValue({\n              name: this.employee.name,\n              email: this.employee.email,\n              phone: this.employee.phone,\n              birthDate: this.employee.birthDate,\n              address: this.employee.address,\n            });\n\n            this.disableEmployeeDetails();\n\n            this.branchEmployeeForm.patchValue({\n              role: this.branchEmployee.role,\n              basicSalary: this.branchEmployee.basicSalary,\n              description: this.branchEmployee.description,\n            });\n\n            this.loading = false;\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.back();\n          },\n        );\n    } else {\n      this.loading = false;\n    }\n  }\n\n  checkUser() {\n    if (this.employeeForm.get('email').valid && !this.employee) {\n      this.userService.checkUser(this.employeeForm.value.email).subscribe(\n        (res: any) => {\n          this.userExist = res.exist;\n        },\n        (error: any) => {},\n      );\n    }\n  }\n\n  alreadyRegister(alreadyRegisteredUser: boolean) {\n    this.alreadyRegisteredUser = alreadyRegisteredUser;\n  }\n\n  searchEmployee() {\n    this.employeeSearchForm.markAllAsTouched();\n    if (this.employeeSearchForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Enter Employee Id');\n      return;\n    }\n    this.employeeId = this.employeeSearchForm.value.employeeId;\n    this.loading = true;\n    this.employeeService.searchEmployee(this.employeeId).subscribe(\n      (employee: EmployeeModel) => {\n        this.employee = employee;\n\n        this.employeeId = employee.imsMasterId;\n        this.userExist = false;\n        this.alreadyRegisteredUser = false;\n\n        this.employeeSearchForm.patchValue({\n          employeeId: this.employee.imsMasterId,\n        });\n\n        this.employeeForm.patchValue({\n          name: this.employee.name,\n          email: this.employee.email,\n          phone: this.employee.phone,\n          birthDate: this.employee.birthDate,\n          address: this.employee.address,\n        });\n\n        this.disableEmployeeDetails();\n\n        this.loading = false;\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.employeeId = null;\n        this.loading = false;\n      },\n    );\n  }\n\n  private enableEmployeeDetails() {\n    this.employeeForm.get('name').enable();\n    this.employeeForm.get('email').enable();\n    this.employeeForm.get('phone').enable();\n    this.employeeForm.get('birthDate').enable();\n    this.employeeForm.get('address').enable();\n    this.employeeForm.get('qualification').enable();\n    this.employeeSearchForm.get('employeeId').enable();\n  }\n\n  private disableEmployeeDetails() {\n    this.employeeForm.get('name').disable();\n    this.employeeForm.get('email').disable();\n    this.employeeForm.get('phone').disable();\n    this.employeeForm.get('birthDate').disable();\n    this.employeeForm.get('address').disable();\n    this.employeeForm.get('qualification').disable();\n    this.employeeSearchForm.get('employeeId').disable();\n  }\n\n  previousStep() {\n    this.stepper.previous();\n    if (this.employee) {\n      this.disableEmployeeDetails();\n    }\n  }\n\n  employeeFormSubmit() {\n    this.employeeForm.markAllAsTouched();\n    if (this.employeeForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Employee Details are Required');\n      return;\n    } else if (this.userExist) {\n      this.showToastr('top-right', 'danger', 'User with this email address is already Exist');\n      return;\n    }\n    if (this.employee) {\n      this.enableEmployeeDetails();\n    }\n    this.stepper.next();\n  }\n\n  branchEmployeeFormSubmit() {\n    this.branchEmployeeForm.markAllAsTouched();\n    if (this.employeeForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Employee Branch Details are Required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveEmployee() {\n    this.employeeForm.markAllAsTouched();\n    this.branchEmployeeForm.markAllAsTouched();\n\n    if (this.employeeForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Employee Details are Required');\n      return;\n    } else if (this.employeeForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Employee Branch Details are Required');\n      return;\n    }\n\n    this.submit = true;\n\n    if (!this.employeeId && !this.branchEmployeeId) {\n      const newEmployee: any = this.employeeForm.value;\n      newEmployee.password = this.encryptService.encrypt(newEmployee.phone, environment.encKey);\n      const newBranchEmployee: any = this.branchEmployeeForm.value;\n      newBranchEmployee.branch = this.branchId;\n      this.employeeService.addEmployee(newEmployee, newBranchEmployee).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Employee Added Successfully');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else if (this.employeeId && !this.branchEmployeeId) {\n      const newBranchEmployee: any = this.branchEmployeeForm.value;\n      newBranchEmployee.branch = this.branchId;\n      newBranchEmployee.employee = this.employeeId;\n      this.branchEmployeeService.newBranchEmployee(newBranchEmployee).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Branch Employee added Successfully');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else if (this.employeeId && this.branchEmployeeId) {\n      const branchEmployee: any = this.branchEmployeeForm.value;\n      branchEmployee._id = this.branchEmployeeId;\n      this.branchEmployeeService.editBranchEmployee(branchEmployee).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Employee Updated Successfully');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      this.showToastr('top-right', 'danger', 'Invalid data');\n      this.submit = false;\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    const type = this.employeeService.getEmployeeType();\n    this.router.navigate(['../'], {\n      relativeTo: this.route,\n      queryParams: { type },\n      replaceUrl: true,\n    });\n  }\n\n  ngOnDestroy() {\n    this.employeeService.deleteEmployeeId();\n    this.branchEmployeeService.deleteBranchEmployeeId();\n  }\n}\n","import { AddEmployeeComponent } from './add-employee.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddEmployeeRoutingModule } from './add-employee-routing.module';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbSelectModule,\n  NbInputModule,\n  NbButtonModule,\n  NbSpinnerModule,\n  NbIconModule,\n  NbStepperModule,\n  NbFormFieldModule,\n  NbCheckboxModule,\n  NbTooltipModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [AddEmployeeComponent],\n  imports: [\n    CommonModule,\n    AddEmployeeRoutingModule,\n\n    NbCardModule,\n    NbSelectModule,\n    NbInputModule,\n    NbCheckboxModule,\n    NbSpinnerModule,\n    NbButtonModule,\n    NbIconModule,\n    NbStepperModule,\n    NbTooltipModule,\n    NbFormFieldModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddEmployeeModule {}\n"]}