{"version":3,"sources":["webpack:///src/app/employee/branch/assignment/save-assignment/save-assignment.component.html","webpack:///src/app/employee/branch/assignment/save-assignment/save-assignment-routing.module.ts","webpack:///src/app/employee/branch/assignment/save-assignment/save-assignment.component.ts","webpack:///src/app/employee/branch/assignment/save-assignment/save-assignment.module.ts"],"names":["routes","path","component","SaveAssignmentComponent","branchService","courseService","batchService","subjectService","assignmentService","dateService","router","route","toastrService","this","queryParams","subscribe","param","mode","ngOnInit","loading","submit","invalidFile","fileName","branchId","getBranchId","back","subjects","getCategoryData","category","getCourseData","course","getBatchData","batch","getSubjectsData","assignmentId","getAssignmentId","showToastr","navigate","relativeTo","assignmentDetailsForm","subject","validators","required","topic","date","getDateString","submissionDate","totalGrades","min","description","getAssignment","assignment","patchValue","event","files","target","ext","name","substring","lastIndexOf","toLowerCase","indexOf","fileInput","nativeElement","value","uploadAssignment","markAllAsTouched","invalid","stepper","next","FormData","append","basicDetails","_id","updateAssignment","res","error","saveAssignment","id","find","curSubject","position","status","message","show","replaceUrl","deleteAssignmentId","submitAssignmentDetails","onFilePicked","loadChildren","then","m","PageNotFoundModule","redirectTo","SaveAssignmentRoutingModule","forChild","SaveAssignmentModule"],"mappings":"6VAkCkB,gDAAkE,yBAEhE,+B,yBAF0C,yCAAsB,yE,sBAUlE,wCAIE,kDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,+K,sBAiCF,wCAIE,gDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,2K,sBAgCF,wCAIE,0DACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,yK,sBAkCF,wCAIE,iEACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,uL,kEA4CF,6CAME,mIAIA,yCACF,+B,sBAGF,0CACE,wCACE,+FACF,8BACF,wC,sBA4BE,wCAIE,qEACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,6L,sBAiCF,wCAIE,kEACF,+B,sBACA,wCAIE,2EACF,+B,yBAjBF,0CAME,0CAMA,0CAMF,wC,4CAVI,sLAMA,kLCxRpB,MAAMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCaG,M,MAAMC,EAsBX,YACUC,EACAC,EACAC,EACAC,EACAC,EACDC,EACCC,EACAC,EACAC,GARA,KAAAR,gBACA,KAAAC,gBACA,KAAAC,eACA,KAAAC,iBACA,KAAAC,oBACD,KAAAC,cACC,KAAAC,SACA,KAAAC,QACA,KAAAC,gBAERC,KAAKF,MAAMG,YAAYC,UAAWC,IAC5BA,EAAMC,MACRJ,KAAKK,aAKX,WAOE,GANAL,KAAKM,SAAU,EACfN,KAAKO,QAAS,EAEdP,KAAKQ,aAAc,EACnBR,KAAKS,SAAW,KAChBT,KAAKU,SAAWV,KAAKT,cAAcoB,eAC9BX,KAAKU,SAER,YADAV,KAAKY,OAwBP,IAAIR,EAMJ,OA1BAJ,KAAKa,SAAW,GAEhBb,KAAKT,cAAcuB,kBAAkBZ,UAAWa,IAC9Cf,KAAKe,SAAWA,IAGlBf,KAAKR,cAAcwB,gBAAgBd,UAAWe,IAC5CjB,KAAKiB,OAASA,IAGhBjB,KAAKP,aAAayB,eAAehB,UAAWiB,IAC1CnB,KAAKmB,MAAQA,IAGfnB,KAAKN,eAAe0B,kBAAkBlB,UAAWW,IAC/Cb,KAAKa,SAAWA,IAGlBb,KAAKqB,aAAerB,KAAKL,kBAAkB2B,kBAI3CtB,KAAKF,MAAMG,YAAYC,UAAWC,IAChCC,EAAOD,EAAMC,OAGXA,GAAiB,SAATA,GACVJ,KAAKuB,WAAW,YAAa,SAAU,sBACvCvB,KAAKH,OAAO2B,SAAS,CAAC,qBAAsB,CAAEC,WAAYzB,KAAKF,SAEtDM,IAASJ,KAAKqB,cACvBrB,KAAKuB,WAAW,YAAa,SAAU,iCACvCvB,KAAKH,OAAO2B,SAAS,CAAC,qBAAsB,CAAEC,WAAYzB,KAAKF,UAIjEE,KAAK0B,sBAAwB,IAAI,IAAU,CACzCC,QAAS,IAAI,IAAY,GAAI,CAC3BC,WAAY,CAAC,IAAWC,YAE1BC,MAAO,IAAI,IAAY,KAAM,CAC3BF,WAAY,CAAC,IAAWC,YAE1BE,KAAM,IAAI,IAAY/B,KAAKJ,YAAYoC,gBAAiB,CACtDJ,WAAY,CAAC,IAAWC,YAE1BI,eAAgB,IAAI,IAAY,KAAM,CACpCL,WAAY,CAAC,IAAWC,YAE1BK,YAAa,IAAI,IAAY,KAAM,CACjCN,WAAY,CAAC,IAAWC,SAAU,IAAWM,IAAI,MAEnDC,YAAa,IAAI,IAAY,KAAM,CACjCR,WAAY,CAAC,IAAWC,mBAIxB7B,KAAKqB,aACPrB,KAAKL,kBACF0C,cAAcrC,KAAKqB,cACnBnB,UAAWoC,IACLA,GAILtC,KAAKsC,WAAaA,EAElBtC,KAAK0B,sBAAsBa,WAAW,CACpCZ,QAASW,EAAWX,QACpBG,MAAOQ,EAAWR,MAClBC,KAAMO,EAAWP,KACjBE,eAAgBK,EAAWL,eAC3BC,YAAaI,EAAWJ,YACxBE,YAAaE,EAAWF,cAG1BpC,KAAKS,SAAW6B,EAAW7B,SAE3BT,KAAKM,SAAU,GAhBbN,KAAKH,OAAO2B,SAAS,CAAC,qBAAsB,CAAEC,WAAYzB,KAAKF,UAmBrEE,KAAKM,SAAU,IAInB,aAAakC,GACXxC,KAAKQ,aAAc,EACnB,MAAMiC,EAASD,EAAME,OAA4BD,MAEjD,IAAIE,EAAc,KAElB,GADAA,EAAMF,EAAM,GAAGG,KAAKC,UAAUJ,EAAM,GAAGG,KAAKE,YAAY,KAAO,GAAGC,eAClC,IAHN,CAAC,MAAO,MAAO,MAAO,OAAQ,OAG1CC,QAAQL,GAIpB,OAHA3C,KAAKQ,aAAc,EACnBR,KAAKS,SAAWgC,EAAM,GAAGG,UACzB5C,KAAKiD,UAAUC,cAAcC,MAAQ,IAGvCnD,KAAKQ,aAAc,EACnBR,KAAKoD,iBAAmBX,EAAM,GAC9BzC,KAAKS,SAAWgC,EAAM,GAAGG,KACzB5C,KAAKiD,UAAUC,cAAcC,MAAQ,GAGvC,YACEnD,KAAKoD,iBAAmB,KACxBpD,KAAKS,SAAW,KAChBT,KAAKiD,UAAUC,cAAcC,MAAQ,GACrCnD,KAAKQ,aAAc,EAGrB,0BACER,KAAK0B,sBAAsB2B,mBACvBrD,KAAK0B,sBAAsB4B,QAC7BtD,KAAKuB,WAAW,YAAa,SAAU,mCAE9BvB,KAAKQ,YACdR,KAAKuB,WAAW,YAAa,SAAU,qBAGzCvB,KAAKuD,QAAQC,OAGf,iBAGE,GAFAxD,KAAK0B,sBAAsB2B,mBAEvBrD,KAAK0B,sBAAsB4B,QAE7B,YADAtD,KAAKuB,WAAW,YAAa,SAAU,mCAElC,GAAIvB,KAAKQ,YAEd,YADAR,KAAKuB,WAAW,YAAa,SAAU,qBAIzCvB,KAAKO,QAAS,EAEd,MAAM+B,EAAa,IAAImB,SAEvBnB,EAAWoB,OAAO,SAAU1D,KAAKU,UACjC4B,EAAWoB,OAAO,WAAY1D,KAAKiB,OAAO0C,aAAa5C,UACvDuB,EAAWoB,OAAO,SAAU1D,KAAKiB,OAAO2C,KACxCtB,EAAWoB,OAAO,QAAS1D,KAAKmB,MAAMyC,KACtCtB,EAAWoB,OAAO,UAAW1D,KAAK0B,sBAAsByB,MAAMxB,SAC9DW,EAAWoB,OAAO,QAAS1D,KAAK0B,sBAAsByB,MAAMrB,OAC5DQ,EAAWoB,OAAO,OAAQ1D,KAAK0B,sBAAsByB,MAAMpB,MAC3DO,EAAWoB,OAAO,cAAe1D,KAAK0B,sBAAsByB,MAAMf,aAClEE,EAAWoB,OAAO,iBAAkB1D,KAAK0B,sBAAsByB,MAAMlB,gBACrEK,EAAWoB,OAAO,cAAe1D,KAAK0B,sBAAsByB,MAAMjB,aAE9DlC,KAAKoD,kBACPd,EAAWoB,OACT,aACA1D,KAAKoD,iBACLpD,KAAKoD,iBAAiBR,KAAKC,UAAU,EAAG7C,KAAKoD,iBAAiBR,KAAKE,YAAY,OAI9E9C,KAAKsC,YAYRA,EAAWoB,OAAO,MAAO1D,KAAKsC,WAAWsB,KAEzC5D,KAAKL,kBAAkBkE,iBAAiBvB,GAAYpC,UACjD4D,IACC9D,KAAKuB,WAAW,YAAa,UAAW,oCACxCvB,KAAKH,OAAO2B,SAAS,CAAC,aAAc,CAAEC,WAAYzB,KAAKF,SAExDiE,IACC/D,KAAKuB,WAAW,YAAa,SAAUwC,GACvC/D,KAAKO,QAAS,KApBlBP,KAAKL,kBAAkBqE,eAAe1B,GAAYpC,UAC/C4D,IACC9D,KAAKuB,WAAW,YAAa,UAAW,sCACxCvB,KAAKH,OAAO2B,SAAS,CAAC,aAAc,CAAEC,WAAYzB,KAAKF,SAExDiE,IACC/D,KAAKuB,WAAW,YAAa,SAAUwC,GACvC/D,KAAKO,QAAS,IAmBtB,eAAe0D,GACb,MAAMtC,EAAU3B,KAAKa,SAASqD,KAAMC,GAA6BA,EAAWP,MAAQK,GACpF,OAAItC,EACKA,EAAQA,QAGV,KAGD,WAAWyC,EAAeC,EAAaC,GAC7CtE,KAAKD,cAAcwE,KAAKF,EAAQC,EAAS,CACvCF,WACAC,WAIJ,OACErE,KAAKH,OAAO2B,SAAS,CAAC,aAAc,CAAEC,WAAYzB,KAAKF,MAAO0E,YAAY,IAG5E,cACExE,KAAKL,kBAAkB8E,sB,6CAhQdnF,GAAuB,yV,mDAAvBA,EAAuB,4D,MAAA,M,w7FFpBpC,2CACE,kDACE,4CAAmE,qDAAS,EAAAsB,UAC1E,kCACF,8BACA,wCACE,yB,qCACF,8BACF,8BACA,gDACE,kDACE,8CACE,2CAAe,sDAAU,EAAA8D,6BACvB,uCAAI,gDAAmB,8BACvB,0CACE,0CACE,0CACE,4CAAyC,qCAAQ,8BACjD,iDAeE,iDAAoB,2CAAc,8BAClC,mDAGF,8BACA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAuC,mCAAM,8BAC7C,wCAgBA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAkD,6CAAgB,8BAClE,wCAeA,sDAaF,8BACF,8BAEA,2CACE,0CACE,6CAA6C,yCAAY,8BACzD,2CAiBA,sDAaF,8BACF,8BAEA,0CACE,0CACE,4CAAyC,wCAAW,8BACpD,gDAQE,uDAAU,EAAAC,aAAA,MARZ,8BAYA,kDACE,8CAME,oHAAS,WAGT,0CACF,8BACA,6CAME,oHAAS,WANX,8BASA,gDAYF,8BAEA,sDAKF,8BACF,8BAEA,0CACE,0CACE,6CAA4D,6CAAgB,8BAC5E,wCAeA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAyD,0CAAa,8BACtE,wCAgBA,sDAmBF,8BACF,8BACF,8BAEA,kCAEA,0CACE,2CACE,8CACE,yCAAM,iCAAI,8BACV,0CACF,8BACF,8BACF,8BACF,8BACF,8BAEA,+CACE,2CACE,2CACE,6CACE,0CACE,uCACE,uCAAI,kCAAK,8BACT,uCAAI,0BAAuC,8BAC7C,8BACA,uCACE,uCAAI,oCAAO,8BACX,uCAAI,0BAAyD,8BAC/D,8BACA,uCACE,uCAAI,iCAAI,8BACR,uCAAI,0BAA8D,8BACpE,8BACA,uCACE,uCAAI,4CAAe,8BACnB,uCAAI,0BAAwE,8BAC9E,8BACA,uCACE,uCAAI,0CAAY,8BAChB,wCAAI,2BAA6C,8BACnD,8BACA,wCACE,wCAAI,yCAAW,8BACf,wCAAI,2BAA6C,8BACnD,8BACA,wCACE,wCAAI,yCAAW,8BACf,wCAAI,2BAAwC,8BAC9C,8BACF,8BACF,8BACF,8BAEA,mCAEA,2CACE,4CACE,+CACE,2CACA,0CAAM,kCAAI,8BACZ,8BACF,8BACA,4CACE,+CAGE,qDAAS,EAAAX,oBAMT,0CAAM,oCAAM,8BACd,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8B,MA5WM,gLAImB,mEACV,6FAC6C,2FAa1C,yLASW,4EAKX,6JA0BA,qLASA,yJAyBA,mLASA,uJA0BA,iMAUA,qKA8CE,2EAaA,4GAMU,4EAkBZ,uMASA,2KA0BA,iMASA,qKA0CI,mGAIA,sHAIA,2HAIA,qIAIA,wGAIA,wGAIA,iGAUiD,2EAUvD,2EAAmB,wB,uJEjV5B,IDVL,CACE5E,KAAM,iBACNwF,aAAc,IACZ,iCAAkEC,KAC/DC,GAAMA,EAAEC,qBAIf,CAAE3F,KAAM,KAAM4F,WAAY,mBAOrB,Y,MAAMC,G,yDAAAA,I,+EAAAA,IAA2B,SAH7B,CAAC,IAAaC,SAAS/F,IACtB,O,GAEL,GEUA,Q,MAAMgG,G,yDAAAA,I,+EAAAA,IAAoB,SAftB,CACP,IACA,EACA,IACA,IACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,Q,GAGG","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n      Back\n    </button>\n    <h3 class=\"\">\n      {{ !assignment ? 'Add New Assignment' : 'Edit Assignment ' + (assignment.topic | uppercase) }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\">\n      <nb-step [stepControl]=\"assignmentDetailsForm\" label=\"Basic Details\">\n        <form class=\"\" (submit)=\"submitAssignmentDetails()\" [formGroup]=\"assignmentDetailsForm\">\n          <h6>Assignment Details:</h6>\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-subject\">Subject:</label>\n                <nb-select\n                  type=\"text\"\n                  id=\"input-subject\"\n                  name=\"subject\"\n                  formControlName=\"subject\"\n                  placeholder=\"Subject\"\n                  fullWidth\n                  [status]=\"\n                    assignmentDetailsForm.get('subject').touched\n                      ? assignmentDetailsForm.get('subject').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Subject</nb-option>\n                  <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n                    subject.subject\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    assignmentDetailsForm.get('subject').invalid &&\n                    assignmentDetailsForm.get('subject').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('subject').errors?.required\"\n                  >\n                    Subject is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-topic\">Topic:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-topic\"\n                  name=\"topic\"\n                  formControlName=\"topic\"\n                  placeholder=\"Topic\"\n                  fullWidth\n                  [status]=\"\n                    assignmentDetailsForm.get('topic').touched\n                      ? assignmentDetailsForm.get('topic').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    assignmentDetailsForm.get('topic').invalid &&\n                    assignmentDetailsForm.get('topic').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('topic').errors?.required\"\n                  >\n                    Topic is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input -assignment-date\">Assignment Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-assignment-date\"\n                  name=\"date\"\n                  formControlName=\"date\"\n                  fullWidth\n                  [status]=\"\n                    assignmentDetailsForm.get('date').touched\n                      ? assignmentDetailsForm.get('date').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    assignmentDetailsForm.get('date').invalid &&\n                    assignmentDetailsForm.get('date').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('date').errors?.required\"\n                  >\n                    Assignment Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-description\">Description:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-description\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  placeholder=\"Description\"\n                  fullWidth\n                  [status]=\"\n                    assignmentDetailsForm.get('description').touched\n                      ? assignmentDetailsForm.get('description').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                ></textarea>\n\n                <ng-container\n                  *ngIf=\"\n                    assignmentDetailsForm.get('description').invalid &&\n                    assignmentDetailsForm.get('description').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('description').errors?.required\"\n                  >\n                    Assignment Description is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-subject\">Attach File</label>\n                <input\n                  type=\"file\"\n                  nbInput\n                  id=\"input-file\"\n                  name=\"file\"\n                  placeholder=\"Select File\"\n                  fullWidth\n                  #filePicker\n                  (change)=\"onFilePicked($event)\"\n                  hidden\n                />\n\n                <nb-form-field>\n                  <button\n                    type=\"button\"\n                    nbPrefix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    (click)=\"filePicker.click()\"\n                    nbTooltip=\"Attach File\"\n                  >\n                    <nb-icon icon=\"attach-outline\" pack=\"eva\"> </nb-icon>\n                  </button>\n                  <input\n                    type=\"text\"\n                    nbInput\n                    fullWidth\n                    [value]=\"fileName\"\n                    placeholder=\"Attach File\"\n                    (click)=\"filePicker.click()\"\n                    disabled\n                  />\n                  <button\n                    type=\"button\"\n                    nbSuffix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    (click)=\"clearFile()\"\n                    nbTooltip=\"Remove File\"\n                    *ngIf=\"uploadAssignment || (!assignment && fileName)\"\n                  >\n                    <nb-icon icon=\"close-outline\" status=\"danger\" pack=\"eva\"> </nb-icon>\n                  </button>\n                </nb-form-field>\n\n                <ng-container *ngIf=\"invalidFile\">\n                  <p class=\"caption status-danger\">\n                    *Please Select a Valid File (*.pdf, '*.jpg, *.png, *.jpeg, *.mp4)\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-assignment-submission-date\">Submission Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-assignment-submission-date\"\n                  name=\"submissionDate\"\n                  formControlName=\"submissionDate\"\n                  fullWidth\n                  [status]=\"\n                    assignmentDetailsForm.get('submissionDate').touched\n                      ? assignmentDetailsForm.get('submissionDate').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    assignmentDetailsForm.get('submissionDate').invalid &&\n                    assignmentDetailsForm.get('submissionDate').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('submissionDate').errors?.required\"\n                  >\n                    Assignment Submission Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-assignment-total-grades\">Total Grades:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-assignment-total-grades\"\n                  name=\"totalGrades\"\n                  min=\"0\"\n                  formControlName=\"totalGrades\"\n                  fullWidth\n                  [status]=\"\n                    assignmentDetailsForm.get('totalGrades').touched\n                      ? assignmentDetailsForm.get('totalGrades').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    assignmentDetailsForm.get('totalGrades').invalid &&\n                    assignmentDetailsForm.get('totalGrades').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('totalGrades').errors?.required\"\n                  >\n                    Assignment Total Grades is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"assignmentDetailsForm.get('totalGrades').errors?.min\"\n                  >\n                    Assignment Total Grades Should be more than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Topic</th>\n                  <td>{{ assignmentDetailsForm.value.topic }}</td>\n                </tr>\n                <tr>\n                  <th>Subject</th>\n                  <td>{{ getSubjectName(assignmentDetailsForm.value.subject) }}</td>\n                </tr>\n                <tr>\n                  <th>Date</th>\n                  <td>{{ dateService.formatDate(assignmentDetailsForm.value.date) }}</td>\n                </tr>\n                <tr>\n                  <th>Submission Date</th>\n                  <td>{{ dateService.formatDate(assignmentDetailsForm.value.submissionDate) }}</td>\n                </tr>\n                <tr>\n                  <th>Total Grades</th>\n                  <td>{{ assignmentDetailsForm.value.totalGrades }}</td>\n                </tr>\n                <tr>\n                  <th>Description</th>\n                  <td>{{ assignmentDetailsForm.value.description }}</td>\n                </tr>\n                <tr>\n                  <th>Attach File</th>\n                  <td>{{ uploadAssignment ? fileName : '--' }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveAssignment()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SaveAssignmentComponent } from './save-assignment.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SaveAssignmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SaveAssignmentRoutingModule {}\n","import { SubjectService } from './../../../../services/subject.service';\nimport { DateService } from './../../../../services/shared-services/date.service';\nimport { BatchModel } from './../../../../models/batch.model';\nimport { CategoryModel } from './../../../../models/branch.model';\nimport { BatchService } from './../../../../services/batch.service';\nimport { CourseService } from './../../../../services/course.service';\nimport { SubjectModel, CourseModel } from './../../../../models/course.model';\nimport { AssignmentModel } from './../../../../models/assignment.model';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { AssignmentService } from './../../../../services/assignment.service';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../services/branch.service';\n\n@Component({\n  selector: 'ngx-save-assignment',\n  templateUrl: './save-assignment.component.html',\n  styleUrls: ['./save-assignment.component.scss'],\n})\nexport class SaveAssignmentComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n  @ViewChild('filePicker') private fileInput: any;\n\n  loading: boolean;\n  submit: boolean;\n  private branchId: string;\n  private assignmentId: string;\n  assignment: AssignmentModel;\n\n  uploadAssignment: File;\n  fileName: string;\n  invalidFile: boolean;\n\n  batch: BatchModel;\n  course: CourseModel;\n  category: CategoryModel;\n\n  subjects: SubjectModel[];\n\n  assignmentDetailsForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private subjectService: SubjectService,\n    private assignmentService: AssignmentService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastrService: NbToastrService,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      if (param.mode) {\n        this.ngOnInit();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.invalidFile = false;\n    this.fileName = null;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.subjects = [];\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.subjectService.getSubjectsData().subscribe((subjects: SubjectModel[]) => {\n      this.subjects = subjects;\n    });\n\n    this.assignmentId = this.assignmentService.getAssignmentId();\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.assignmentId) {\n      this.showToastr('top-right', 'danger', 'Assignment Not Available');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.assignmentDetailsForm = new FormGroup({\n      subject: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      topic: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      date: new FormControl(this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n      submissionDate: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      totalGrades: new FormControl(null, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n      description: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n    });\n\n    if (this.assignmentId) {\n      this.assignmentService\n        .getAssignment(this.assignmentId)\n        .subscribe((assignment: AssignmentModel) => {\n          if (!assignment) {\n            this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n            return;\n          }\n          this.assignment = assignment;\n\n          this.assignmentDetailsForm.patchValue({\n            subject: assignment.subject,\n            topic: assignment.topic,\n            date: assignment.date,\n            submissionDate: assignment.submissionDate,\n            totalGrades: assignment.totalGrades,\n            description: assignment.description,\n          });\n\n          this.fileName = assignment.fileName;\n\n          this.loading = false;\n        });\n    } else {\n      this.loading = false;\n    }\n  }\n\n  onFilePicked(event: Event) {\n    this.invalidFile = false;\n    const files = (event.target as HTMLInputElement).files;\n    const fileExt: string[] = ['pdf', 'jpg', 'png', 'jpeg', 'mp4'];\n    let ext: string = null;\n    ext = files[0].name.substring(files[0].name.lastIndexOf('.') + 1).toLowerCase();\n    if (!(fileExt.indexOf(ext) !== -1)) {\n      this.invalidFile = true;\n      this.fileName = files[0].name;\n      this.fileInput.nativeElement.value = '';\n      return;\n    }\n    this.invalidFile = false;\n    this.uploadAssignment = files[0];\n    this.fileName = files[0].name;\n    this.fileInput.nativeElement.value = '';\n  }\n\n  clearFile() {\n    this.uploadAssignment = null;\n    this.fileName = null;\n    this.fileInput.nativeElement.value = '';\n    this.invalidFile = false;\n  }\n\n  submitAssignmentDetails() {\n    this.assignmentDetailsForm.markAllAsTouched();\n    if (this.assignmentDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Assignment details are required');\n      return;\n    } else if (this.invalidFile) {\n      this.showToastr('top-right', 'danger', 'Select Valid File');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveAssignment() {\n    this.assignmentDetailsForm.markAllAsTouched();\n\n    if (this.assignmentDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Assignment details are required');\n      return;\n    } else if (this.invalidFile) {\n      this.showToastr('top-right', 'danger', 'Select Valid File');\n      return;\n    }\n\n    this.submit = true;\n\n    const assignment = new FormData();\n\n    assignment.append('branch', this.branchId);\n    assignment.append('category', this.course.basicDetails.category);\n    assignment.append('course', this.course._id);\n    assignment.append('batch', this.batch._id);\n    assignment.append('subject', this.assignmentDetailsForm.value.subject);\n    assignment.append('topic', this.assignmentDetailsForm.value.topic);\n    assignment.append('date', this.assignmentDetailsForm.value.date);\n    assignment.append('description', this.assignmentDetailsForm.value.description);\n    assignment.append('submissionDate', this.assignmentDetailsForm.value.submissionDate);\n    assignment.append('totalGrades', this.assignmentDetailsForm.value.totalGrades);\n\n    if (this.uploadAssignment) {\n      assignment.append(\n        'assignment',\n        this.uploadAssignment,\n        this.uploadAssignment.name.substring(0, this.uploadAssignment.name.lastIndexOf('.')),\n      );\n    }\n\n    if (!this.assignment) {\n      this.assignmentService.saveAssignment(assignment).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Assignment Added Successfully!');\n          this.router.navigate(['../manage'], { relativeTo: this.route });\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      assignment.append('_id', this.assignment._id);\n\n      this.assignmentService.updateAssignment(assignment).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Assignment Updated Successfully!');\n          this.router.navigate(['../manage'], { relativeTo: this.route });\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  getSubjectName(id: string) {\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === id);\n    if (subject) {\n      return subject.subject;\n    }\n\n    return '--';\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../manage'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {\n    this.assignmentService.deleteAssignmentId();\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbInputModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n  NbStepperModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SaveAssignmentRoutingModule } from './save-assignment-routing.module';\nimport { SaveAssignmentComponent } from './save-assignment.component';\n\n@NgModule({\n  declarations: [SaveAssignmentComponent],\n  imports: [\n    CommonModule,\n    SaveAssignmentRoutingModule,\n    NbFormFieldModule,\n    NbCardModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbSpinnerModule,\n    NbIconModule,\n    NbInputModule,\n    NbTooltipModule,\n    NbStepperModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class SaveAssignmentModule {}\n"]}