{"version":3,"sources":["webpack:///src/app/employee/branch/lead/add-lead/add-lead.component.html","webpack:///src/app/employee/branch/lead/add-lead/add-lead-routing.module.ts","webpack:///src/app/employee/branch/lead/add-lead/add-lead.component.ts","webpack:///src/app/employee/branch/lead/add-lead/add-lead.module.ts"],"names":["AddLeadComponent","AddLeadModule","AddLeadRoutingModule","routes","path","component","branchService","toastrService","leadService","dateService","courseService","router","route","mode","this","loading","submit","branchId","getBranchId","queryParams","subscribe","param","leadId","getLeadId","showToastr","navigate","relativeTo","categories","courses","myCourses","modes","strengths","sources","statuses","getCategories","getCourses","leadForm","leadName","validators","required","leadContact","min","max","leadEmail","email","category","course","address","date","getDateString","followUpDate","strength","source","status","comment","getLeadForEditing","res","lead","patchValue","onSelectCategory","err","back","filter","basicDetails","getBranchData","branch","getBranch","setBranchData","error","getCoursesData","stepper","previous","markAllAsTouched","invalid","next","value","_id","editLead","saveLead","leadType","getLeadType","type","replaceUrl","categoryId","find","curCategory","courseId","curCourse","courseName","position","message","show","deleteLeadId","submitLeadForm","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n      Back\n    </button>\n    <h3 class=\"\">\n      {{ !lead ? 'Add New Lead' : 'Edit Lead ' + (lead.leadName | uppercase) }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\">\n      <nb-step [stepControl]=\"leadForm\" label=\"Basic Details\">\n        <form class=\"\" (submit)=\"submitLeadForm()\" [formGroup]=\"leadForm\">\n          <div class=\"row\">\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-lead-name\">Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-lead-name\"\n                  name=\"leadName\"\n                  formControlName=\"leadName\"\n                  placeholder=\"Lead Name\"\n                  minlength=\"3\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('leadName').touched\n                      ? leadForm.get('leadName').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n\n                <ng-container\n                  *ngIf=\"leadForm.get('leadName').invalid && leadForm.get('leadName').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('leadName').errors?.required\"\n                  >\n                    Lead Name is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('leadName').errors?.minlength\"\n                  >\n                    Lead Name should contain minimum 3 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-email\">Email address:</label>\n                <input\n                  type=\"email\"\n                  nbInput\n                  id=\"input-email\"\n                  name=\"email\"\n                  formControlName=\"leadEmail\"\n                  placeholder=\"Email address\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('leadEmail').touched\n                      ? leadForm.get('leadEmail').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"leadForm.get('leadEmail').invalid && leadForm.get('leadEmail').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('leadEmail').errors?.required\"\n                  >\n                    Email is required!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('leadEmail').errors?.email\">\n                    Email should be the real one!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-phone\">Phone:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-phone\"\n                  name=\"phone\"\n                  formControlName=\"leadContact\"\n                  placeholder=\"phone\"\n                  minlength=\"10\"\n                  maxlength=\"10\"\n                  min=\"1000000000\"\n                  max=\"9999999999\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('leadContact').touched\n                      ? leadForm.get('leadContact').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"leadForm.get('leadContact').invalid && leadForm.get('leadContact').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('leadContact').errors?.required\"\n                  >\n                    Phone is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      leadForm.get('leadContact').errors?.minlength ||\n                      leadForm.get('leadContact').errors?.maxlength ||\n                      leadForm.get('leadContact').errors?.min ||\n                      leadForm.get('leadContact').errors?.max\n                    \"\n                  >\n                    Phone should contain 10 digits\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address\">Address:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address\"\n                  name=\"address\"\n                  formControlName=\"address\"\n                  placeholder=\"address (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-date\">Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-date\"\n                  name=\"date\"\n                  [min]=\"dateService.getDateString()\"\n                  formControlName=\"date\"\n                  placeholder=\"date\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('date').touched\n                      ? leadForm.get('date').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container *ngIf=\"leadForm.get('date').invalid && leadForm.get('date').touched\">\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('date').errors?.required\">\n                    Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-follow-up-date\">Follow Up Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-follow-up-date\"\n                  name=\"followUpDate\"\n                  [min]=\"dateService.getDateString()\"\n                  formControlName=\"followUpDate\"\n                  placeholder=\"followUpDate\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('followUpDate').touched\n                      ? leadForm.get('followUpDate').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    leadForm.get('followUpDate').invalid && leadForm.get('followUpDate').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('followUpDate').errors?.required\"\n                  >\n                    Follow Up Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-category\">Category:</label>\n                <nb-select\n                  id=\"input-category\"\n                  name=\"category\"\n                  formControlName=\"category\"\n                  placeholder=\"Select Category\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('category').touched\n                      ? leadForm.get('category').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (selectedChange)=\"onSelectCategory($event)\"\n                >\n                  <nb-option value=\"\">Select Category</nb-option>\n                  <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n                    category.category\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"leadForm.get('category').invalid && leadForm.get('category').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('category').errors?.required\"\n                  >\n                    Category is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-course\">Course:</label>\n                <nb-select\n                  id=\"input-course\"\n                  name=\"course\"\n                  formControlName=\"course\"\n                  placeholder=\"Select Course\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('course').touched\n                      ? leadForm.get('course').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Course</nb-option>\n                  <nb-option *ngFor=\"let course of myCourses\" [value]=\"course._id\">{{\n                    course.basicDetails.courseName\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"leadForm.get('course').invalid && leadForm.get('course').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('course').errors?.required\">\n                    Course is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-source\">Source:</label>\n                <nb-select\n                  id=\"input-source\"\n                  name=\"source\"\n                  formControlName=\"source\"\n                  placeholder=\"Select Source\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('source').touched\n                      ? leadForm.get('source').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Source</nb-option>\n                  <nb-option *ngFor=\"let source of sources\" [value]=\"source\">{{\n                    source | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"leadForm.get('source').invalid && leadForm.get('source').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('source').errors?.required\">\n                    Source is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-strength\">Strength:</label>\n                <nb-select\n                  id=\"input-strength\"\n                  name=\"strength\"\n                  formControlName=\"strength\"\n                  placeholder=\"Select Strength\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('strength').touched\n                      ? leadForm.get('strength').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Strength</nb-option>\n                  <nb-option *ngFor=\"let strength of strengths\" [value]=\"strength\">{{\n                    strength | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"leadForm.get('strength').invalid && leadForm.get('strength').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leadForm.get('strength').errors?.required\"\n                  >\n                    Strength is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-mode\">Mode:</label>\n                <nb-select\n                  id=\"input-mode\"\n                  name=\"mode\"\n                  formControlName=\"mode\"\n                  placeholder=\"Select Mode\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('mode').touched\n                      ? leadForm.get('mode').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Mode</nb-option>\n                  <nb-option *ngFor=\"let mode of modes\" [value]=\"mode\">{{\n                    mode | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container *ngIf=\"leadForm.get('mode').invalid && leadForm.get('mode').touched\">\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('mode').errors?.required\">\n                    Mode is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-status\">Status:</label>\n                <nb-select\n                  id=\"input-status\"\n                  name=\"status\"\n                  formControlName=\"status\"\n                  placeholder=\"Select Status\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('status').touched\n                      ? leadForm.get('status').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Status</nb-option>\n                  <nb-option *ngFor=\"let status of statuses\" [value]=\"status\">{{\n                    status | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"leadForm.get('status').invalid && leadForm.get('status').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('status').errors?.required\">\n                    Status is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-comment\">Comment:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-comment\"\n                  name=\"comment\"\n                  formControlName=\"comment\"\n                  placeholder=\"Comment\"\n                  maxlength=\"50\"\n                  fullWidth\n                  [status]=\"\n                    leadForm.get('comment').touched\n                      ? leadForm.get('comment').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n\n                <ng-container\n                  *ngIf=\"leadForm.get('comment').invalid && leadForm.get('comment').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('comment').errors?.required\">\n                    Comment is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Name</th>\n                  <td>{{ leadForm.value.leadName }}</td>\n                </tr>\n                <tr>\n                  <th>Email</th>\n                  <td>{{ leadForm.value.leadEmail }}</td>\n                </tr>\n                <tr>\n                  <th>Phone</th>\n                  <td>{{ leadForm.value.leadContact }}</td>\n                </tr>\n                <tr>\n                  <th>Address</th>\n                  <td>{{ leadForm.value.address }}</td>\n                </tr>\n                <tr>\n                  <th>Date</th>\n                  <td>{{ leadForm.value.date }}</td>\n                </tr>\n                <tr>\n                  <th>Follow Up Date</th>\n                  <td>{{ leadForm.value.followUpDate }}</td>\n                </tr>\n                <tr>\n                  <th>Category</th>\n                  <td>{{ getCategory(leadForm.value.category) }}</td>\n                </tr>\n                <tr>\n                  <th>Course</th>\n                  <td>{{ getCourse(leadForm.value.course) }}</td>\n                </tr>\n                <tr>\n                  <th>Source</th>\n                  <td>{{ leadForm.value.source | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Mode</th>\n                  <td>{{ leadForm.value.mode | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Strength</th>\n                  <td>{{ leadForm.value.strength | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Status</th>\n                  <td>{{ leadForm.value.status | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Comment</th>\n                  <td>{{ leadForm.value.comment }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveLead()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddLeadComponent } from './add-lead.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddLeadComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddLeadRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\nimport { CourseModel } from './../../../../models/course.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LeadService } from './../../../../services/lead.service';\nimport { LeadModel } from './../../../../models/lead.model';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { BranchService } from './../../../../services/branch.service';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { CourseService } from '../../../../services/course.service';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-add-lead',\n  templateUrl: './add-lead.component.html',\n  styleUrls: ['./add-lead.component.scss'],\n})\nexport class AddLeadComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n\n  private leadId: string;\n  lead: LeadModel;\n\n  sources: string[];\n  strengths: string[];\n  modes: string[];\n  statuses: string[];\n\n  categories: CategoryModel[];\n  private courses: CourseModel[];\n  myCourses: CourseModel[];\n\n  leadForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private leadService: LeadService,\n    public dateService: DateService,\n    private courseService: CourseService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    // route.queryParams.subscribe((param: Params) => {\n    //   this.ngOnInit();\n    // });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    this.leadId = this.leadService.getLeadId();\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.leadId) {\n      this.showToastr('top-right', 'danger', 'Lead Not Found');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.categories = [];\n    this.courses = [];\n    this.myCourses = [];\n\n    this.modes = ['walk in', 'telephonic', 'email', 'digital'];\n    this.strengths = ['hot', 'cold'];\n    this.sources = [\n      'referral',\n      'seminar',\n      'advertisement',\n      'digital media',\n      'classifieds',\n      'others',\n    ];\n    this.statuses = ['open', 'lost', 'won'];\n\n    this.getCategories();\n    this.getCourses();\n\n    this.leadForm = new FormGroup({\n      leadName: new FormControl(null, { validators: [Validators.required] }),\n      leadContact: new FormControl(null, {\n        validators: [Validators.required, Validators.min(1000000000), Validators.max(9999999999)],\n      }),\n      leadEmail: new FormControl(null, { validators: [Validators.required, Validators.email] }),\n      category: new FormControl(null, { validators: [Validators.required] }),\n      course: new FormControl(null, { validators: [Validators.required] }),\n      address: new FormControl(null, { validators: [] }),\n      date: new FormControl(this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n      followUpDate: new FormControl(null, { validators: [Validators.required] }),\n      strength: new FormControl(null, { validators: [Validators.required] }),\n      mode: new FormControl(null, { validators: [Validators.required] }),\n      source: new FormControl(null, { validators: [Validators.required] }),\n      status: new FormControl(null, { validators: [Validators.required] }),\n      comment: new FormControl(null, { validators: [Validators.required] }),\n    });\n\n    if (mode && this.leadId) {\n      this.leadService.getLeadForEditing(this.leadId).subscribe(\n        (res: any) => {\n          this.lead = res;\n          this.leadForm.patchValue({\n            leadName: this.lead.leadName,\n            leadEmail: this.lead.leadEmail,\n            leadContact: this.lead.leadContact,\n            category: this.lead.category,\n            address: this.lead.address,\n            date: this.lead.date,\n            followUpDate: this.lead.followUpDate,\n            status: this.lead.status,\n            strength: this.lead.strength,\n            mode: this.lead.mode,\n            source: this.lead.source,\n            comment: this.lead.comment,\n          });\n\n          this.onSelectCategory(this.lead.category);\n\n          this.leadForm.patchValue({\n            course: this.lead.course,\n          });\n\n          this.loading = false;\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.back();\n        },\n      );\n    } else {\n      this.loading = false;\n    }\n  }\n\n  onSelectCategory(category: string) {\n    this.myCourses = this.courses.filter(\n      (course: CourseModel) => course.basicDetails.category === category,\n    );\n  }\n\n  private getCategories() {\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\n      if (branch) {\n        this.categories = branch.categories;\n      }\n    });\n\n    if (!this.categories) {\n      this.branchService.getBranch(this.branchId).subscribe(\n        (branch: BranchModel) => {\n          this.branchService.setBranchData(branch);\n          this.categories = branch.categories;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n    }\n  }\n\n  private getCourses() {\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\n      this.courses = courses;\n    });\n  }\n\n  previousStep() {\n    this.stepper.previous();\n  }\n\n  submitLeadForm() {\n    this.leadForm.markAllAsTouched();\n    if (this.leadForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fill all Details Correctly');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveLead() {\n    this.leadForm.markAllAsTouched();\n    if (this.leadForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fill all Details Correctly');\n      return;\n    }\n    this.submit = true;\n\n    const lead = this.leadForm.value;\n    lead.branch = this.branchId;\n\n    if (!this.lead) {\n      this.leadService.saveLead(lead).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Lead Added Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      lead._id = this.leadId;\n      this.leadService.editLead(lead).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Lead Updated Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  back() {\n    const leadType = this.leadService.getLeadType();\n    this.router.navigate(['../'], {\n      relativeTo: this.route,\n      queryParams: { type: leadType },\n      replaceUrl: true,\n    });\n  }\n\n  getCategory(categoryId: string) {\n    const category = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\n    );\n\n    if (category) {\n      return category.category;\n    }\n\n    return '--';\n  }\n\n  getCourse(courseId: string) {\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\n\n    if (course) {\n      return course.basicDetails.courseName;\n    }\n\n    return '--';\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {\n    this.leadService.deleteLeadId();\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbInputModule,\n} from '@nebular/theme';\nimport { AddLeadComponent } from './add-lead.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddLeadRoutingModule } from './add-lead-routing.module';\n\n@NgModule({\n  declarations: [AddLeadComponent],\n  imports: [\n    CommonModule,\n    AddLeadRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n    NbSelectModule,\n    NbIconModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbInputModule,\n  ],\n})\nexport class AddLeadModule {}\n"]}