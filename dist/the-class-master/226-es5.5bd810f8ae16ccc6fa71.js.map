{"version":3,"sources":["webpack:///src/app/institute/profile/profile.component.html","webpack:///src/app/institute/profile/profile.component.ts","webpack:///src/app/institute/profile/profile-routing.module.ts","webpack:///src/app/institute/profile/profile.module.ts"],"names":["ProfileComponent","ProfileRoutingModule","ProfileModule","userService","toastrService","authService","encryptService","this","loading","profileForm","name","validators","required","minLength","phone","maxLength","min","max","address","changePasswordForm","oldPassword","password","confirmPassword","passwordValidator","bind","getProfile","group","value","invalidConfirmPassword","subscribe","res","profile","patchValue","error","markAllAsTouched","invalid","showToastr","saveProfile","hasError","email","getUserData","encrypt","environment","encKey","newPassword","changePassword","reset","position","status","message","show","routes","path","component","canActivate","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"row\">\n  <div class=\"col-md-6 col-12\">\n    <nb-card>\n      <nb-card-header>\n        <h4 *ngIf=\"profile\">\n          User Profile\n          <small class=\"float-right\">{{ profile.imsMasterId | uppercase }}</small>\n        </h4>\n      </nb-card-header>\n      <nb-card-body>\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <h5 id=\"title\" class=\"title\">\n              <small class=\"float-right\" *ngIf=\"profile\">\n                <em>{{ profile.email | lowercase }}</em>\n              </small>\n            </h5>\n\n            <form (ngSubmit)=\"saveProfile()\" [formGroup]=\"profileForm\">\n              <p class=\"sub-title\">Personal Details</p>\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-name\">User Name:</label>\n                    <input\n                      type=\"text\"\n                      nbInput\n                      id=\"input-name\"\n                      name=\"name\"\n                      formControlName=\"name\"\n                      placeholder=\"User Name\"\n                      minlength=\"5\"\n                      maxlength=\"20\"\n                      fullWidth\n                      [status]=\"\n                        profileForm.get('name').touched\n                          ? profileForm.get('name').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"profileForm.get('name').invalid && profileForm.get('name').touched\"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"profileForm.get('name').errors?.required\"\n                      >\n                        User Name is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"profileForm.get('name').errors?.minlength\"\n                      >\n                        User Name should contain minimum 5 characters\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-phone\">User phone:</label>\n                    <input\n                      type=\"text\"\n                      pattern=\"\\d*\"\n                      nbInput\n                      id=\"input-phone\"\n                      name=\"phone\"\n                      formControlName=\"phone\"\n                      placeholder=\"User phone\"\n                      minlength=\"10\"\n                      maxlength=\"10\"\n                      min=\"1000000000\"\n                      max=\"9999999999\"\n                      fullWidth\n                      [status]=\"\n                        profileForm.get('phone').touched\n                          ? profileForm.get('phone').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"profileForm.get('phone').invalid && profileForm.get('phone').touched\"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"profileForm.get('phone').errors?.required\"\n                      >\n                        User phone is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"\n                          profileForm.get('phone').errors?.minlength ||\n                          profileForm.get('phone').errors?.maxlength ||\n                          profileForm.get('phone').errors?.pattern ||\n                          profileForm.get('phone').errors?.min ||\n                          profileForm.get('phone').errors?.max\n                        \"\n                      >\n                        User phone should be 10 digits\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-12\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-address\">User Address:</label>\n                    <textarea\n                      type=\"text\"\n                      nbInput\n                      id=\"input-address\"\n                      name=\"address\"\n                      formControlName=\"address\"\n                      placeholder=\"User Address\"\n                      rows=\"2\"\n                      minlength=\"10\"\n                      maxlength=\"150\"\n                      fullWidth\n                      [status]=\"\n                        profileForm.get('address').touched\n                          ? profileForm.get('address').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    ></textarea>\n                    <ng-container\n                      *ngIf=\"\n                        profileForm.get('address').invalid && profileForm.get('address').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"profileForm.get('address').errors?.required\"\n                      >\n                        User address is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"profileForm.get('address').errors?.minlength\"\n                      >\n                        User address should be 10 characters\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n\n              <br />\n\n              <div class=\"row\">\n                <div class=\"col-12 text-right\">\n                  <button type=\"submit\" nbButton size=\"small\" status=\"primary\">Save Profile</button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n\n  <div class=\"col-md-6 col-12\">\n    <nb-card>\n      <nb-card-header>\n        <h4 id=\"title\" class=\"title\">Change password</h4>\n      </nb-card-header>\n      <nb-card-body>\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <p class=\"sub-title\">Please set a new password</p>\n\n            <form (ngSubmit)=\"changePassword()\" [formGroup]=\"changePasswordForm\">\n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-old-password\">Old Password:</label>\n                    <input\n                      type=\"password\"\n                      nbInput\n                      id=\"input-old-password\"\n                      name=\"oldPassword\"\n                      formControlName=\"oldPassword\"\n                      placeholder=\"Old Password\"\n                      minlength=\"7\"\n                      maxlength=\"20\"\n                      fullWidth\n                      [status]=\"\n                        changePasswordForm.get('oldPassword').touched\n                          ? changePasswordForm.get('oldPassword').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        changePasswordForm.get('oldPassword').invalid &&\n                        changePasswordForm.get('oldPassword').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"changePasswordForm.get('oldPassword').errors?.required\"\n                      >\n                        Old Password is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"changePasswordForm.get('oldPassword').errors?.minlength\"\n                      >\n                        Old Password should contain minimum 7 characters\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-12\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-password\">Password:</label>\n                    <input\n                      type=\"password\"\n                      nbInput\n                      id=\"input-password\"\n                      name=\"password\"\n                      formControlName=\"password\"\n                      placeholder=\"New Password\"\n                      minlength=\"7\"\n                      maxlength=\"20\"\n                      fullWidth\n                      [status]=\"\n                        changePasswordForm.get('password').touched\n                          ? changePasswordForm.get('password').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        changePasswordForm.get('password').invalid &&\n                        changePasswordForm.get('password').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"changePasswordForm.get('password').errors?.required\"\n                      >\n                        Password is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"changePasswordForm.get('password').errors?.minlength\"\n                      >\n                        Password should contain minimum 7 characters\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-12\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n                    <input\n                      nbInput\n                      type=\"password\"\n                      id=\"input-re-password\"\n                      name=\"rePass\"\n                      formControlName=\"confirmPassword\"\n                      placeholder=\"Confirm Password\"\n                      minlength=\"5\"\n                      maxlength=\"30\"\n                      fullWidth\n                      [status]=\"\n                        changePasswordForm.get('confirmPassword').touched\n                          ? changePasswordForm.get('confirmPassword').invalid ||\n                            changePasswordForm.get('password').value !=\n                              changePasswordForm.get('confirmPassword').value\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        changePasswordForm.get('confirmPassword').invalid &&\n                        changePasswordForm.get('confirmPassword').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"changePasswordForm.get('confirmPassword').errors?.required\"\n                      >\n                        Password confirmation is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"\n                          changePasswordForm.get('password').value !=\n                            changePasswordForm.get('confirmPassword').value &&\n                          !changePasswordForm.hasError('invalidConfirmPassword')\n                        \"\n                      >\n                        Password does not match the confirm password.\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n\n              <br />\n\n              <div class=\"row\">\n                <div class=\"col-md-12 text-right\">\n                  <button type=\"submit\" nbButton size=\"small\" status=\"primary\">\n                    Change password\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import { NbToastrService } from '@nebular/theme';\nimport { environment } from './../../../environments/environment';\nimport { AuthService } from './../../authentication/auth/auth-service/auth.service';\nimport { InstituteModel } from './../../models/institute.model';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { UserService } from './../../services/shared-services/user.service';\nimport { Component, OnInit } from '@angular/core';\nimport { EncryptService } from '../../services/shared-services/encrypt.service';\n\n@Component({\n  selector: 'ngx-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent implements OnInit {\n  loading: boolean;\n  profileForm: FormGroup;\n  changePasswordForm: FormGroup;\n  profile: InstituteModel;\n  constructor(\n    private userService: UserService,\n    private toastrService: NbToastrService,\n    private authService: AuthService,\n    private encryptService: EncryptService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.profileForm = new FormGroup({\n      name: new FormControl(null, { validators: [Validators.required, Validators.minLength(5)] }),\n      phone: new FormControl(null, {\n        validators: [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(10),\n          Validators.min(1000000000),\n          Validators.max(9999999999),\n        ],\n      }),\n      address: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(10)],\n      }),\n    });\n\n    this.changePasswordForm = new FormGroup(\n      {\n        oldPassword: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n        password: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n        confirmPassword: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n      },\n      {\n        validators: this.passwordValidator.bind(this),\n      },\n    );\n\n    this.getProfile();\n  }\n\n  private passwordValidator(group: FormGroup): { [s: string]: boolean } {\n    if (group.value.password !== group.value.confirmPassword) {\n      return { invalidConfirmPassword: true };\n    }\n    return null;\n  }\n\n  private getProfile() {\n    this.userService.getProfile().subscribe(\n      (res: any) => {\n        this.profile = res;\n        this.profileForm.patchValue({\n          name: this.profile.name,\n          phone: this.profile.phone,\n          address: this.profile.address,\n        });\n\n        this.loading = false;\n      },\n      (error: any) => {\n        this.loading = false;\n      },\n    );\n  }\n\n  saveProfile() {\n    this.profileForm.markAllAsTouched();\n    if (this.profileForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fill Profile Details Correctly');\n      return;\n    }\n\n    this.loading = true;\n\n    const profile = this.profileForm.value;\n\n    this.userService.saveProfile(profile).subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', 'Profile updated Successfully!');\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  changePassword() {\n    this.changePasswordForm.markAllAsTouched();\n    if (this.changePasswordForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fill change Password Data Correctly');\n      return;\n    } else if (this.changePasswordForm.hasError('invalidPassword')) {\n      this.showToastr('top-right', 'danger', 'New Password and Confirm Password Does Noy Match');\n      return;\n    }\n    this.loading = true;\n    const password = {\n      email: this.authService.getUserData().email,\n      password: this.encryptService.encrypt(\n        this.changePasswordForm.value.oldPassword,\n        environment.encKey,\n      ),\n      newPassword: this.encryptService.encrypt(\n        this.changePasswordForm.value.password,\n        environment.encKey,\n      ),\n    };\n\n    this.userService.changePassword(password).subscribe(\n      (res: any) => {\n        this.changePasswordForm.reset();\n        this.showToastr('top-right', 'success', 'Password Changed Successfully!');\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ProfileComponent } from './profile.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: ProfileComponent, canActivate: [] },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { ProfileComponent } from './profile.component';\nimport { NgModule } from '@angular/core';\n\nimport { ProfileRoutingModule } from './profile-routing.module';\n\nimport { CommonModule } from '@angular/common';\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbUserModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbTooltipModule,\n} from '@nebular/theme';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [ProfileComponent],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    ThemeModule,\n    ReactiveFormsModule,\n    NbCardModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbTooltipModule,\n  ],\n})\nexport class ProfileModule {}\n"]}