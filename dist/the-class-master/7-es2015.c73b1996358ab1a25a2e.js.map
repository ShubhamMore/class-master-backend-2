{"version":3,"sources":["webpack:///src/app/services/shared-services/country.service.ts","webpack:///src/app/institute/manage-institute/add-institute/add-institute.component.html","webpack:///src/app/institute/manage-institute/add-institute/add-institute-routing.module.ts","webpack:///src/app/institute/manage-institute/add-institute/add-institute.component.ts","webpack:///src/app/institute/manage-institute/add-institute/add-institute.module.ts"],"names":["CountryService","this","country","default","states","name","state","find","curState","cities","routes","path","component","AddInstituteComponent","menuService","countryService","branchService","paymentService","toastrService","dialogService","router","route","queryParams","subscribe","param","mode","ngOnInit","loading","submit","hideMenu","paymentDetails","getPaymentDetails","branchId","getBranchId","showToastr","navigate","relativeTo","back","getStates","branchBasicDetailsForm","branchName","validators","required","email","phone","minLength","maxLength","branchAddressForm","city","address1","address2","pinCode","branchCategoriesForm","categories","getBranchForEditing","branch","patchValue","basicDetails","address","changeState","getCategories","controls","forEach","category","addCategory","err","generateCategory","get","categoryData","_id","toString","status","push","newCategory","i","removeAt","filter","toLowerCase","includes","of","pipe","map","filterState","filterCity","e","filteredStates","getStateFilteredOptions","filteredCities","getCityFilteredOptions","getCities","id","orderId","ReceiptId","activateBranch","amount","planType","packageType","receiptId","res","error","markAllAsTouched","invalid","stepper","next","order","receipt","deleteBranch","checkout","open","context","closeOnBackdropClick","closeOnEsc","onClose","onClosePayment","value","editBranch","addBranch","setBranchId","onCheckout","deleteBranchId","join","position","message","show","replaceUrl","deletePaymentDetails","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddInstituteRoutingModule","forChild","AddInstituteModule"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as country from '../../../assets/country.json';\n@Injectable({\n  providedIn: 'root',\n})\nexport class CountryService {\n  private country: any;\n\n  constructor() {\n    this.country = country;\n  }\n\n  getCountry() {\n    return this.country.default;\n  }\n\n  getStates() {\n    return this.country.default.states;\n  }\n\n  getCities(name: string) {\n    const state = this.country.default.states.find((curState: any) => curState.name === name);\n    if (state) {\n      return state.cities;\n    }\n    return [];\n  }\n}\n","<nb-card *ngIf=\"!loading\">\n  <nb-card-header>\n    <h4>\n      <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n        Back\n      </button>\n\n      {{ !branch ? 'Create New Branch' : 'Edit Branch' }}\n    </h4>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\">\n      <nb-step [stepControl]=\"branchBasicDetailsForm\" label=\"Basic Details\">\n        <form\n          [formGroup]=\"branchBasicDetailsForm\"\n          (ngSubmit)=\"submitBasicDetails()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-name\">Branch Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-name\"\n                  name=\"branchName\"\n                  placeholder=\"Branch name\"\n                  formControlName=\"branchName\"\n                  minlength=\"5\"\n                  maxlength=\"100\"\n                  autofocus\n                  fullWidth\n                  [status]=\"\n                    branchBasicDetailsForm.get('branchName').touched\n                      ? branchBasicDetailsForm.get('branchName').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    branchBasicDetailsForm.get('branchName').invalid &&\n                    branchBasicDetailsForm.get('branchName').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchBasicDetailsForm.get('branchName').errors?.required\"\n                  >\n                    Branch name is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchBasicDetailsForm.get('branchName').errors?.minlength\"\n                  >\n                    Branch name should contains minimum 5\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-email\">Email address:</label>\n                <input\n                  type=\"email\"\n                  nbInput\n                  id=\"input-email\"\n                  name=\"email\"\n                  formControlName=\"email\"\n                  placeholder=\"Email address\"\n                  fullWidth\n                  [status]=\"\n                    branchBasicDetailsForm.get('email').touched\n                      ? branchBasicDetailsForm.get('email').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    branchBasicDetailsForm.get('email').invalid &&\n                    branchBasicDetailsForm.get('email').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchBasicDetailsForm.get('email').errors?.required\"\n                  >\n                    Email is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchBasicDetailsForm.get('email').errors?.email\"\n                  >\n                    Email should be the real one!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-password\">Phone:</label>\n                <input\n                  type=\"text\"\n                  pattern=\"\\d*\"\n                  nbInput\n                  id=\"input-phone\"\n                  name=\"phone\"\n                  formControlName=\"phone\"\n                  placeholder=\"phone\"\n                  minlength=\"10\"\n                  maxlength=\"10\"\n                  fullWidth\n                  [status]=\"\n                    branchBasicDetailsForm.get('phone').touched\n                      ? branchBasicDetailsForm.get('phone').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    branchBasicDetailsForm.get('phone').invalid &&\n                    branchBasicDetailsForm.get('phone').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchBasicDetailsForm.get('phone').errors?.required\"\n                  >\n                    Phone is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      branchBasicDetailsForm.get('phone').errors?.pattern ||\n                      branchBasicDetailsForm.get('phone').errors?.minlength\n                    \"\n                  >\n                    Phone should contain 10 digits\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"branchAddressForm\" label=\"Address Details\">\n        <form [formGroup]=\"branchAddressForm\" (ngSubmit)=\"submitAddress()\" class=\"step-container\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address-1\">Address 1:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address-1\"\n                  name=\"address1\"\n                  placeholder=\"Address 1\"\n                  formControlName=\"address1\"\n                  autofocus\n                  fullWidth\n                  [status]=\"\n                    branchAddressForm.get('address1').touched\n                      ? branchAddressForm.get('address1').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    branchAddressForm.get('address1').invalid &&\n                    branchAddressForm.get('address1').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchAddressForm.get('address1').errors?.required\"\n                  >\n                    Address 1 is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address-2\">Address 2:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address-2\"\n                  name=\"address2\"\n                  placeholder=\"Address 2\"\n                  formControlName=\"address2\"\n                  autofocus\n                  fullWidth\n                />\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address-2\">State:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address-2\"\n                  name=\"state\"\n                  placeholder=\"State\"\n                  formControlName=\"state\"\n                  autofocus\n                  fullWidth\n                  [nbAutocomplete]=\"autoState\"\n                  [status]=\"\n                    branchAddressForm.get('state').touched\n                      ? branchAddressForm.get('state').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"onChangeStateInput($event.target.value)\"\n                />\n                <nb-autocomplete #autoState (selectedChange)=\"changeState($event)\">\n                  <nb-option *ngFor=\"let state of filteredStates | async\" [value]=\"state.name\">\n                    {{ state.name }}\n                  </nb-option>\n                </nb-autocomplete>\n                <ng-container\n                  *ngIf=\"\n                    branchAddressForm.get('state').invalid && branchAddressForm.get('state').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchAddressForm.get('state').errors?.required\"\n                  >\n                    State is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-city\">City:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-city\"\n                  name=\"city\"\n                  placeholder=\"city\"\n                  formControlName=\"city\"\n                  autofocus\n                  fullWidth\n                  [nbAutocomplete]=\"autoCity\"\n                  [status]=\"\n                    branchAddressForm.get('city').touched\n                      ? branchAddressForm.get('city').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"onChangeCityInput($event.target.value)\"\n                />\n                <nb-autocomplete #autoCity>\n                  <nb-option *ngFor=\"let city of filteredCities | async\" [value]=\"city.name\">\n                    {{ city.name }}\n                  </nb-option>\n                </nb-autocomplete>\n                <ng-container\n                  *ngIf=\"\n                    branchAddressForm.get('city').invalid && branchAddressForm.get('city').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchAddressForm.get('city').errors?.required\"\n                  >\n                    City is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-pin-code\">Pin Code:</label>\n                <input\n                  type=\"text\"\n                  pattern=\"\\d*\"\n                  nbInput\n                  id=\"input-pin-code\"\n                  name=\"pinCode\"\n                  placeholder=\"Pin Code\"\n                  formControlName=\"pinCode\"\n                  autofocus\n                  fullWidth\n                  [status]=\"\n                    branchAddressForm.get('pinCode').touched\n                      ? branchAddressForm.get('pinCode').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n\n                <ng-container\n                  *ngIf=\"\n                    branchAddressForm.get('pinCode').invalid &&\n                    branchAddressForm.get('pinCode').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchAddressForm.get('pinCode').errors?.required\"\n                  >\n                    Pin Code is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"branchCategoriesForm\" label=\"Branch Categories\">\n        <form\n          [formGroup]=\"branchCategoriesForm\"\n          (ngSubmit)=\"submitCategories()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-9 col-sm-8\">\n              <p>Click on following button to add more Categories</p>\n            </div>\n            <div class=\"col-md-3 col-sm-4 mb-3\">\n              <button type=\"button\" nbButton size=\"small\" fullWidth (click)=\"generateCategory()\">\n                Add Category\n              </button>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div\n              class=\"col-md-6\"\n              *ngFor=\"\n                let category of branchCategoriesForm.get('categories')['controls'];\n                let i = index\n              \"\n            >\n              <div class=\"form-control-group\" [formGroup]=\"category\">\n                <label class=\"label\" for=\"input-category-{{ i }}\">Category {{ i + 1 }}:</label>\n\n                <nb-form-field>\n                  <input\n                    type=\"text\"\n                    nbInput\n                    id=\"input-category-{{ i }}\"\n                    name=\"category-{{ i }}\"\n                    placeholder=\"Category {{ i + 1 }}\"\n                    formControlName=\"category\"\n                    autofocus\n                    fullWidth\n                    [status]=\"\n                      category.get('category').touched\n                        ? category.get('category').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n\n                  <button\n                    type=\"button\"\n                    nbSuffix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    *ngIf=\"i !== 0\"\n                    (click)=\"deleteCategory(i)\"\n                  >\n                    <nb-icon\n                      nbTooltip=\"Remove Category {{ i + 1 }}\"\n                      icon=\"minus-outline\"\n                      status=\"danger\"\n                      pack=\"eva\"\n                    >\n                    </nb-icon>\n                  </button>\n                </nb-form-field>\n\n                <ng-container\n                  *ngIf=\"category.get('category').invalid && category.get('category').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"category.get('category').errors?.required\"\n                  >\n                    Category {{ i + 1 }} is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <span>\n                  <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n                </span>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"{{ !branch ? 'Payment' : 'Submit' }}\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Branch Name</th>\n                  <td>{{ branchBasicDetailsForm.value.branchName }}</td>\n                </tr>\n                <tr>\n                  <th>Current Plan Type</th>\n                  <td>\n                    {{\n                      this.paymentDetails\n                        ? this.paymentDetails.packageType\n                        : branch.currentPlanDetails.planType\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Email</th>\n                  <td>{{ branchBasicDetailsForm.value.email }}</td>\n                </tr>\n                <tr>\n                  <th>Contact</th>\n                  <td>{{ branchBasicDetailsForm.value.phone }}</td>\n                </tr>\n                <tr>\n                  <th>Address 1</th>\n                  <td>{{ branchAddressForm.value.address1 }}</td>\n                </tr>\n                <tr>\n                  <th>Address 2</th>\n                  <td>{{ branchAddressForm.value.address2 }}</td>\n                </tr>\n                <tr>\n                  <th>City</th>\n                  <td>{{ branchAddressForm.value.city }}</td>\n                </tr>\n                <tr>\n                  <th>Pincode</th>\n                  <td>{{ branchAddressForm.value.pinCode }}</td>\n                </tr>\n                <tr>\n                  <th>State</th>\n                  <td>{{ branchAddressForm.value.state }}</td>\n                </tr>\n                <tr>\n                  <th>Categories</th>\n                  <td>{{ getCategoriesData() }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveBranch()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddInstituteComponent } from './add-institute.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddInstituteComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddInstituteRoutingModule {}\n","import { PaymentComponent } from './../../payment/payment.component';\nimport { map } from 'rxjs/operators';\nimport { CountryService } from './../../../services/shared-services/country.service';\nimport { PaymentService } from './../../../services/payment.service';\nimport { NbToastrService, NbStepperComponent, NbDialogService } from '@nebular/theme';\nimport { BranchService } from './../../../services/branch.service';\nimport { MenuService } from './../../menu.service';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { BranchModel, CategoryModel } from './../../../models/branch.model';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { ObjectId } from 'bson';\n\nimport { of, Observable } from 'rxjs';\nimport { CheckoutComponent } from '../../checkout/checkout.component';\n// declare const Razorpay: any;\n\n@Component({\n  selector: 'ngx-add-institute',\n  templateUrl: './add-institute.component.html',\n  styleUrls: ['./add-institute.component.scss'],\n})\nexport class AddInstituteComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  submit: boolean;\n  loading: boolean;\n\n  branchBasicDetailsForm: FormGroup;\n  branchAddressForm: FormGroup;\n  branchCategoriesForm: FormGroup;\n\n  private branchId: string;\n  branch: BranchModel;\n\n  private states: any[];\n  private cities: any[];\n\n  filteredStates: Observable<any[]>;\n  filteredCities: Observable<any[]>;\n\n  paymentDetails: any;\n  constructor(\n    private menuService: MenuService,\n    private countryService: CountryService,\n    private branchService: BranchService,\n    private paymentService: PaymentService,\n    private toastrService: NbToastrService,\n    private dialogService: NbDialogService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      if (param.mode) {\n        this.ngOnInit();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loading = true;\n    this.submit = false;\n\n    this.menuService.hideMenu();\n    this.paymentDetails = this.paymentService.getPaymentDetails();\n\n    let mode: string;\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    this.branchId = this.branchService.getBranchId();\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (!mode && !this.paymentDetails) {\n      this.showToastr('top-right', 'danger', 'Invalid Payment Details');\n      this.back();\n\n      return;\n    } else if (mode && !this.branchId) {\n      this.showToastr('top-right', 'danger', 'Branch not Available');\n      this.back();\n\n      return;\n    }\n\n    this.states = this.countryService.getStates();\n    this.cities = [];\n\n    this.branchBasicDetailsForm = new FormGroup({\n      branchName: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      email: new FormControl(null, {\n        validators: [Validators.required, Validators.email],\n      }),\n      phone: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(10), Validators.maxLength(10)],\n      }),\n    });\n\n    this.branchAddressForm = new FormGroup({\n      state: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      city: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      address1: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      address2: new FormControl(null, {\n        validators: [],\n      }),\n      pinCode: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n    });\n\n    this.branchCategoriesForm = new FormGroup({\n      categories: new FormArray([]),\n    });\n\n    if (this.branchId) {\n      this.branchService.getBranchForEditing(this.branchId).subscribe(\n        (branch: BranchModel) => {\n          if (!branch) {\n            this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n            return;\n          }\n          this.branch = branch;\n          this.branchBasicDetailsForm.patchValue({\n            branchName: this.branch.basicDetails.branchName,\n            email: this.branch.basicDetails.email,\n            phone: this.branch.basicDetails.phone,\n          });\n\n          this.branchAddressForm.patchValue({\n            state: this.branch.address.state,\n            address1: this.branch.address.address1,\n            address2: this.branch.address.address2,\n            pinCode: this.branch.address.pinCode,\n          });\n\n          this.changeState(this.branch.address.state);\n\n          this.branchAddressForm.patchValue({\n            city: this.branch.address.city,\n          });\n\n          const categories = this.getCategories();\n          categories.controls = [];\n          this.branch.categories.forEach((category: CategoryModel) => {\n            this.addCategory(category);\n          });\n\n          this.loading = false;\n        },\n        (err: any) => {\n          this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n          this.loading = false;\n        },\n      );\n    } else {\n      this.generateCategory();\n      this.loading = false;\n    }\n  }\n\n  private getCategories() {\n    return this.branchCategoriesForm.get('categories') as FormArray;\n  }\n\n  private newCategory(categoryData: any) {\n    return new FormGroup({\n      _id: new FormControl(categoryData._id ? categoryData._id : new ObjectId().toString(), {\n        validators: [Validators.required],\n      }),\n      category: new FormControl(categoryData.category ? categoryData.category : null, {\n        validators: [Validators.required],\n      }),\n      status: new FormControl(categoryData.status, {\n        validators: [],\n      }),\n    });\n  }\n\n  private addCategory(category: any) {\n    const categories = this.getCategories();\n    categories.push(this.newCategory(category));\n  }\n\n  generateCategory() {\n    const category = {\n      _id: new ObjectId().toString(),\n      category: '',\n      status: true,\n    };\n    this.addCategory(category);\n  }\n\n  deleteCategory(i: number) {\n    if (i !== 0) {\n      const categories = this.getCategories();\n      categories.removeAt(i);\n    }\n  }\n\n  private filterState(name: string): any[] {\n    return this.states.filter((state: any) =>\n      state.name.toLowerCase().includes(name.toLowerCase()),\n    );\n  }\n\n  private filterCity(name: string): any[] {\n    return this.cities.filter((city: any) => city.name.toLowerCase().includes(name.toLowerCase()));\n  }\n\n  private getStateFilteredOptions(name: string): Observable<any[]> {\n    return of(name).pipe(map((filterState) => this.filterState(filterState)));\n  }\n\n  private getCityFilteredOptions(name: string): Observable<string[]> {\n    return of(name).pipe(map((filterCity) => this.filterCity(filterCity)));\n  }\n\n  onChangeStateInput(e: any) {\n    this.filteredStates = this.getStateFilteredOptions(e);\n  }\n\n  onChangeCityInput(e: any) {\n    this.filteredCities = this.getCityFilteredOptions(e);\n  }\n\n  changeState(name: string) {\n    this.cities = this.countryService.getCities(name);\n  }\n\n  private activateBranch(id: string, orderId: string, ReceiptId: string) {\n    this.submit = true;\n\n    const paymentDetails = {\n      amount: this.paymentDetails.amount,\n      planType: this.paymentDetails.planType,\n      packageType: this.paymentDetails.packageType,\n      orderId: orderId,\n      receiptId: ReceiptId,\n    };\n    this.branchService.activateBranch(id, paymentDetails).subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', 'New Institute Added Successfully');\n        this.router.navigate(['/institute']);\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.submit = false;\n      },\n    );\n  }\n\n  submitBasicDetails() {\n    this.branchBasicDetailsForm.markAllAsTouched();\n    if (this.branchBasicDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Basic details are required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  submitAddress() {\n    this.branchAddressForm.markAllAsTouched();\n    if (this.branchAddressForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Address details are required');\n\n      return;\n    }\n    this.stepper.next();\n  }\n\n  submitCategories() {\n    this.branchCategoriesForm.markAllAsTouched();\n    if (this.branchCategoriesForm.invalid) {\n      this.showToastr('top-right', 'danger', 'At least 1 Category is required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  onClosePayment(order: any) {\n    if (order.status) {\n      this.activateBranch(this.branchId, order.order, order.receipt);\n    } else {\n      this.deleteBranch();\n    }\n  }\n\n  onCheckout(checkout: any) {\n    if (checkout.status) {\n      this.dialogService\n        .open(PaymentComponent, {\n          context: {},\n          closeOnBackdropClick: false,\n          closeOnEsc: false,\n        })\n        .onClose.subscribe((order: any) => order && this.onClosePayment(order));\n    } else {\n      this.deleteBranch();\n    }\n  }\n\n  saveBranch() {\n    this.branchBasicDetailsForm.markAllAsTouched();\n    this.branchAddressForm.markAllAsTouched();\n    this.branchCategoriesForm.markAllAsTouched();\n\n    if (this.branchBasicDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Basic details are required');\n      return;\n    } else if (this.branchAddressForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Address details are required');\n\n      return;\n    } else if (this.branchCategoriesForm.invalid) {\n      this.showToastr('top-right', 'danger', 'At least 1 Category is required');\n      return;\n    }\n\n    this.submit = true;\n\n    const branch: any = {\n      basicDetails: this.branchBasicDetailsForm.value,\n      address: this.branchAddressForm.value,\n      categories: this.branchCategoriesForm.value.categories,\n    };\n\n    if (!this.branch) {\n      this.branchService.addBranch(branch).subscribe(\n        (res: any) => {\n          this.submit = false;\n          this.branchId = res.branchId;\n          this.branchService.setBranchId(this.branchId);\n          this.dialogService\n            .open(CheckoutComponent, {\n              context: {},\n              closeOnBackdropClick: false,\n              closeOnEsc: false,\n            })\n            .onClose.subscribe((checkout: any) => checkout && this.onCheckout(checkout));\n        },\n        (error: any) => {\n          this.submit = false;\n          this.showToastr('top-right', 'danger', error);\n        },\n      );\n    } else {\n      branch._id = this.branch._id;\n      this.branchService.editBranch(branch).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Branch Updated Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n        },\n      );\n    }\n  }\n\n  private deleteBranch() {\n    if (this.branchId) {\n      this.branchService.deleteBranch(this.branchId).subscribe(\n        (res: any) => {\n          this.branchId = null;\n          this.branchService.deleteBranchId();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n        },\n      );\n    }\n  }\n\n  getCategoriesData() {\n    const categories: string[] = [];\n    this.branchCategoriesForm.value.categories.forEach((category: CategoryModel) => {\n      categories.push(category.category);\n    });\n\n    return categories.join(', ');\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {\n    this.branchService.deleteBranchId();\n    this.paymentService.deletePaymentDetails();\n  }\n}\n","import { AddInstituteComponent } from './add-institute.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddInstituteRoutingModule } from './add-institute-routing.module';\n\nimport { ThemeModule } from './../../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbUserModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n  NbStepperModule,\n  NbAutocompleteModule,\n} from '@nebular/theme';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [AddInstituteComponent],\n  imports: [\n    CommonModule,\n    AddInstituteRoutingModule,\n    ThemeModule,\n    ReactiveFormsModule,\n    NbCardModule,\n    NbIconModule,\n    NbSpinnerModule,\n    NbInputModule,\n    NbFormFieldModule,\n    NbStepperModule,\n    NbAutocompleteModule,\n    NbButtonModule,\n    NbTooltipModule,\n  ],\n})\nexport class AddInstituteModule {}\n"]}