{"version":3,"sources":["webpack:///src/app/institute/branch/lecture/attendance/attendance.component.html","webpack:///src/app/institute/branch/lecture/attendance/attendance-routing.module.ts","webpack:///src/app/institute/branch/lecture/attendance/attendance.component.ts","webpack:///src/app/institute/branch/lecture/attendance/attendance.module.ts"],"names":["AttendanceComponent","AttendanceModule","AttendanceRoutingModule","routes","path","component","branchService","courseService","batchService","dateService","lectureService","attendanceService","toastrService","router","route","this","loading","branchId","getBranchId","getLectureData","subscribe","lecture","getCourseData","course","getBatchData","batch","students","getStudents","showToastr","back","branch","category","_id","map","student","attendance","error","i","saveAttendance","date","subject","res","startTime","endTime","formatTime","teacher","mySubject","subjects","find","curSubject","navigate","relativeTo","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <span><strong>Date: </strong>{{ dateService.formatDate(lecture.date) }}</span>\n      </div>\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <span><strong>Time: </strong>{{ getTime(lecture.startTime, lecture.endTime) }}</span>\n      </div>\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <span><strong>Course: </strong>{{ course.basicDetails.courseName }}</span>\n      </div>\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <span><strong>Batch: </strong>{{ batch.basicDetails.batchName }}</span>\n      </div>\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <span><strong>Subject: </strong>{{ getSubject(lecture.subject) }}</span>\n      </div>\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <span><strong>Lecture Topic: </strong>{{ lecture.topic }}</span>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <h4>ATTENDANCE RECORDING</h4>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\" *ngIf=\"students.length > 0; else noStudents\">\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Student Name</th>\n                <th>Roll Number</th>\n                <th>Mark Attendance</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let student of students; let i = index\">\n                <td>{{ student.name }}</td>\n                <td>{{ student.rollNumber }}</td>\n                <td class=\"text-center\">\n                  <div class=\"mark-attendance-selector\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        [id]=\"student.student\"\n                        class=\"mark-attendance\"\n                        [checked]=\"student.attendance\"\n                        (change)=\"onChangeAttendance($event.target.checked, i)\"\n                      />\n                      <label [for]=\"student.student\">{{ student.attendance ? 'P' : 'A' }}</label>\n                    </label>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"col-12 text-right\">\n        <button type=\"button\" nbButton size=\"small\" status=\"primary\" (click)=\"saveAttendance()\">\n          Save\n        </button>\n      </div>\n    </div>\n    <ng-template #noStudents>\n      <p class=\"text-center pt-5 pb-5\">No Students Found</p>\n    </ng-template>\n  </nb-card-body>\n</nb-card>\n","import { AttendanceComponent } from './attendance.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AttendanceComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AttendanceRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { BatchModel } from './../../../../models/batch.model';\nimport { CourseModel, SubjectModel } from './../../../../models/course.model';\nimport { CourseService } from './../../../../services/course.service';\nimport { BatchService } from './../../../../services/batch.service';\nimport { LectureService } from './../../../../services/lecture.service';\nimport { AttendanceService } from './../../../../services/attendance.service';\nimport { BranchService } from './../../../../services/branch.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ScheduleModel as LectureModel } from './../../../../models/schedule.model';\n\ninterface StudentAttendance {\n  name: string;\n  student: string;\n  rollNumber: string;\n  attendance?: boolean;\n}\n\n@Component({\n  selector: 'ngx-attendance',\n  templateUrl: './attendance.component.html',\n  styleUrls: ['./attendance.component.scss'],\n})\nexport class AttendanceComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n  course: CourseModel;\n  batch: BatchModel;\n  lecture: LectureModel;\n  students: StudentAttendance[];\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    public dateService: DateService,\n    private lectureService: LectureService,\n    private attendanceService: AttendanceService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.showToastr('top-right', 'danger', 'Branch Not Found');\n      this.back();\n      return;\n    }\n\n    this.lectureService.getLectureData().subscribe((lecture: LectureModel) => {\n      this.lecture = lecture;\n    });\n\n    if (!this.lecture) {\n      this.showToastr('top-right', 'danger', 'Lecture Not Found');\n      this.back();\n      return;\n    }\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.students = [];\n\n    this.getStudents();\n  }\n\n  private getStudents() {\n    this.loading = true;\n    this.attendanceService\n      .getStudents(\n        this.lecture.branch,\n        this.lecture.category,\n        this.lecture.course,\n        this.lecture.batch,\n        this.lecture._id,\n      )\n      .subscribe(\n        (students: StudentAttendance[]) => {\n          students.map((student: any) => {\n            return (student.attendance = student.attendance ? student.attendance : false);\n          });\n          this.students = students;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n  }\n\n  onChangeAttendance(attendance: boolean, i: number) {\n    this.students[i].attendance = attendance;\n  }\n\n  saveAttendance() {\n    const attendance = {\n      date: this.lecture.date,\n      branch: this.lecture.branch,\n      category: this.lecture.category,\n      course: this.lecture.course,\n      batch: this.lecture.batch,\n      subject: this.lecture.subject,\n      lecture: this.lecture._id,\n      attendance: this.students,\n    };\n\n    this.attendanceService.saveAttendance(attendance).subscribe(\n      (res: any) => {\n        this.showToastr(\n          'top-right',\n          'success',\n          `Attendance ${res ? 'Updated' : 'Marked'} Successfully`,\n        );\n        this.back();\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  getTime(startTime: string, endTime: string) {\n    startTime = this.dateService.formatTime(startTime);\n    endTime = this.dateService.formatTime(endTime);\n    return startTime + ' - ' + endTime;\n  }\n\n  getTeacher(teacher: string) {\n    return teacher;\n  }\n\n  getSubject(subject: string) {\n    const mySubject = this.course.subjects.find(\n      (curSubject: SubjectModel) => curSubject._id === subject,\n    );\n\n    if (!mySubject) {\n      return '--';\n    }\n    return mySubject.subject;\n  }\n\n  back() {\n    this.router.navigate(['../manage'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AttendanceRoutingModule } from './attendance-routing.module';\nimport { AttendanceComponent } from './attendance.component';\n\n@NgModule({\n  declarations: [AttendanceComponent],\n  imports: [CommonModule, AttendanceRoutingModule, NbCardModule, NbButtonModule, NbIconModule],\n})\nexport class AttendanceModule {}\n"]}