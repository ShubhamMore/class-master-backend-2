{"version":3,"sources":["webpack:///src/app/employee/branch/my-leave/save-leave/save-leave.component.html","webpack:///src/app/employee/branch/my-leave/save-leave/save-leave.component.ts","webpack:///src/app/employee/branch/my-leave/my-leave.component.html","webpack:///src/app/employee/branch/my-leave/my-leave-routing.module.ts","webpack:///src/app/employee/branch/my-leave/my-leave.component.ts","webpack:///src/app/employee/branch/my-leave/my-leave.module.ts"],"names":["SaveLeaveComponent","branchService","dateService","leaveService","toastrService","ref","this","loading","submit","branchId","getBranchId","durations","leaveTypes","getEmployeeLeaveData","subscribe","leave","leaveForm","leaveType","validators","required","duration","date","getDateString","startDate","endDate","hours","reason","durationValidator","bind","onChangeDuration","value","onClose","group","invalidEndDate","invalidHours","patchValue","get","disable","enable","markAllAsTouched","invalid","showToastr","stepper","next","branch","getRawValue","_id","updateEmployeeLeave","res","close","type","error","createEmployeeLeave","resLeave","position","status","message","show","deleteEmployeeLeaveData","MyLeaveComponent","MyLeaveModule","MyLeaveRoutingModule","routes","path","component","router","route","employeeLeaveService","dialogService","approvedLeaves","pendingLeaves","rejectedLeaves","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getMyLeaves","back","getMyBranchLeaves","leaves","filter","formatDate","navigate","relativeTo","push","index","findIndex","curLeave","open","context","closeOnBackdropClick","closeOnEsc","myLeave","saveLeave","openLeaveDialog","setEmployeeLeaveId","setEmployeeLeaveData","id","deleteEmployeeLeave","splice","createLeave","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card class=\"leave-box\">\n  <nb-card-header>\n    <nb-icon class=\"float-right pointer\" icon=\"close-outline\" (click)=\"onClose()\"></nb-icon>\n    <h3 class=\"\">\n      {{ !leave ? 'Apply for Leave' : 'Edit Leave' }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\" *ngIf=\"!loading; else loadingData\">\n      <nb-step [stepControl]=\"leaveForm\" label=\"Leave Details\">\n        <form class=\"\" (submit)=\"submitLeave()\" [formGroup]=\"leaveForm\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-date\">Application Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-date\"\n                  name=\"date\"\n                  [min]=\"dateService.getDateString()\"\n                  formControlName=\"date\"\n                  placeholder=\"Date\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('date').touched\n                      ? leaveForm.get('date').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n              </div>\n              <ng-container *ngIf=\"leaveForm.get('date').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"leaveForm.get('date').errors?.required\">\n                  Application Date is required!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-leave-type\">Leave Type:</label>\n                <nb-select\n                  id=\"input-leave-type\"\n                  name=\"leaveType\"\n                  formControlName=\"leaveType\"\n                  placeholder=\"Select Leave Type\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('leaveType').touched\n                      ? leaveForm.get('leaveType').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Leave Type</nb-option>\n                  <nb-option *ngFor=\"let leaveType of leaveTypes\" [value]=\"leaveType\">{{\n                    leaveType\n                  }}</nb-option>\n                </nb-select>\n                <ng-container *ngIf=\"leaveForm.get('leaveType').touched\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leaveForm.get('leaveType').errors?.required\"\n                  >\n                    Leave Type is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-duration\">Duration:</label>\n                <nb-select\n                  id=\"input-duration\"\n                  name=\"duration\"\n                  formControlName=\"duration\"\n                  placeholder=\"Select Duration\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('duration').touched\n                      ? leaveForm.get('duration').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (selectedChange)=\"onChangeDuration($event)\"\n                >\n                  <nb-option *ngFor=\"let duration of durations\" [value]=\"duration\">{{\n                    duration | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container *ngIf=\"leaveForm.get('duration').touched\">\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"leaveForm.get('duration').errors?.required\"\n                  >\n                    Duration is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-start-date\">Start Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-start-date\"\n                  name=\"startDate\"\n                  [min]=\"dateService.getDateString()\"\n                  formControlName=\"startDate\"\n                  placeholder=\"Start Date\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('startDate').touched\n                      ? leaveForm.get('startDate').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n              </div>\n              <ng-container *ngIf=\"leaveForm.get('startDate').touched\">\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"leaveForm.get('startDate').errors?.required\"\n                >\n                  Start Date is required!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-end-date\">End Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-end-date\"\n                  name=\"endDate\"\n                  [min]=\"dateService.getDateString()\"\n                  formControlName=\"endDate\"\n                  placeholder=\"End Date\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('startDate').touched\n                      ? leaveForm.hasError('invalidEndDate')\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n              </div>\n              <ng-container *ngIf=\"leaveForm.get('endDate').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"leaveForm.hasError('invalidEndDate')\">\n                  End Date is required!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-hours\">Hours:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-hours\"\n                  name=\"hours\"\n                  min=\"0\"\n                  formControlName=\"hours\"\n                  placeholder=\"Hours\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('hours').touched\n                      ? leaveForm.hasError('invalidHours')\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container *ngIf=\"leaveForm.get('hours').touched\">\n                  <p class=\"caption status-danger\" *ngIf=\"leaveForm.hasError('invalidHours')\">\n                    Leave Hours are required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-reason\">Reason:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-reason\"\n                  name=\"reason\"\n                  formControlName=\"reason\"\n                  placeholder=\"Reason\"\n                  fullWidth\n                  [status]=\"\n                    leaveForm.get('reason').touched\n                      ? leaveForm.get('reason').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                ></textarea>\n              </div>\n              <ng-container *ngIf=\"leaveForm.get('reason').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"leaveForm.get('reason').errors?.required\">\n                  Leave Reason is required!\n                </p>\n              </ng-container>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Application Date</th>\n                  <td>{{ dateService.formatDate(leaveForm.value.date) }}</td>\n                </tr>\n                <tr>\n                  <th>Leave Type</th>\n                  <td>{{ leaveForm.value.leaveType }}</td>\n                </tr>\n                <tr>\n                  <th>Duration</th>\n                  <td>{{ leaveForm.value.duration }}</td>\n                </tr>\n                <tr>\n                  <th>Start Date</th>\n                  <td>\n                    {{ dateService.formatDate(leaveForm.value.startDate) }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>End Date</th>\n                  <td>\n                    {{\n                      leaveForm.value.endDate\n                        ? dateService.formatDate(leaveForm.value.endDate)\n                        : '--'\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Hours</th>\n                  <td>{{ leaveForm.value.hours ? leaveForm.value.hours + ' Hour/s' : '--' }}</td>\n                </tr>\n                <tr>\n                  <th>Reason</th>\n                  <td>{{ leaveForm.value.reason }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveLeave()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"text-center pt-5 pb-5\">Loading...</p>\n</ng-template>\n","import { BranchService } from './../../../../services/branch.service';\nimport { EmployeeLeaveService } from './../../../../services/employee-leave.service';\nimport { EmployeeLeaveModel } from './../../../../models/employee-leave.model';\nimport { DateService } from './../../../../services/shared-services/date.service';\nimport { NbDialogRef, NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'ngx-save-leave',\n  templateUrl: './save-leave.component.html',\n  styleUrls: ['./save-leave.component.scss'],\n})\nexport class SaveLeaveComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n\n  durations: string[];\n\n  leaveTypes: string[];\n\n  leave: EmployeeLeaveModel;\n  leaveForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    public dateService: DateService,\n    private leaveService: EmployeeLeaveService,\n    private toastrService: NbToastrService,\n    protected ref: NbDialogRef<SaveLeaveComponent>,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.onClose();\n      return;\n    }\n\n    this.durations = ['single', 'multiple', 'hourly'];\n    this.leaveTypes = [\n      'Emergency Leave',\n      'No Call No Show',\n      'Planned Leave',\n      'Sick Leave',\n      'Unplanned Leave',\n    ];\n\n    this.leaveService.getEmployeeLeaveData().subscribe((leave: EmployeeLeaveModel) => {\n      this.leave = leave;\n\n      this.leaveForm = new FormGroup(\n        {\n          leaveType: new FormControl(leave ? leave.leaveType : '', {\n            validators: [Validators.required],\n          }),\n          duration: new FormControl(leave ? leave.duration : this.durations[0], {\n            validators: [Validators.required],\n          }),\n          date: new FormControl(leave ? leave.date : this.dateService.getDateString(), {\n            validators: [Validators.required],\n          }),\n          startDate: new FormControl(leave ? leave.startDate : null, {\n            validators: [Validators.required],\n          }),\n          endDate: new FormControl(leave ? leave.endDate : null, {\n            validators: [],\n          }),\n          hours: new FormControl(leave ? leave.hours : null, {\n            validators: [],\n          }),\n          reason: new FormControl(leave ? leave.reason : null, {\n            validators: [Validators.required],\n          }),\n        },\n        {\n          validators: this.durationValidator.bind(this),\n        },\n      );\n\n      this.onChangeDuration(this.leaveForm.value.duration);\n\n      this.loading = false;\n    });\n  }\n\n  durationValidator(group: FormGroup): { [s: string]: boolean } {\n    const duration = group.value.duration;\n    if (duration === 'multiple') {\n      const endDate = group.value.endDate;\n      if (!endDate) {\n        return { invalidEndDate: true };\n      } else {\n        return null;\n      }\n    } else if (duration === 'hourly') {\n      const hours = group.value.hours;\n      if (!hours) {\n        return { invalidHours: true };\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  onChangeDuration(duration: string) {\n    if (duration === 'single') {\n      this.leaveForm.patchValue({ endDate: null, hours: null });\n      this.leaveForm.get('endDate').disable();\n      this.leaveForm.get('hours').disable();\n    } else if (duration === 'multiple') {\n      this.leaveForm.patchValue({ hours: null });\n      this.leaveForm.get('endDate').enable();\n      this.leaveForm.get('hours').disable();\n    } else if (duration === 'hourly') {\n      this.leaveForm.patchValue({ endDate: null });\n      this.leaveForm.get('endDate').disable();\n      this.leaveForm.get('hours').enable();\n    } else {\n      this.leaveForm.get('endDate').enable();\n      this.leaveForm.get('hours').enable();\n    }\n  }\n\n  submitLeave() {\n    this.leaveForm.markAllAsTouched();\n    if (this.leaveForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Leave Details are required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveLeave() {\n    this.leaveForm.markAllAsTouched();\n\n    if (this.leaveForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Leave Details are required');\n      return;\n    }\n\n    this.submit = true;\n\n    const leave: any = { branch: this.branchId, ...this.leaveForm.getRawValue() };\n\n    if (!this.leave) {\n      this.leaveService.createEmployeeLeave(leave).subscribe(\n        (resLeave: EmployeeLeaveModel) => {\n          this.ref.close({ leave: resLeave, type: 'new' });\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      leave._id = this.leave._id;\n\n      this.leaveService.updateEmployeeLeave(leave).subscribe(\n        (res: any) => {\n          this.ref.close({ leave: leave, type: 'edit' });\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  onClose() {\n    this.ref.close();\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {\n    this.leaveService.deleteEmployeeLeaveData();\n  }\n}\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>My Leaves</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <button\n          type=\"button\"\n          nbButton\n          size=\"small\"\n          status=\"primary\"\n          fullWidth\n          (click)=\"createLeave()\"\n        >\n          Apply For Leave\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-6 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <nb-tabset fullWidth>\n          <nb-tab tabTitle=\"pending\">\n            <ng-container *ngIf=\"!loading; else loadingData\">\n              <div class=\"table-responsive\" *ngIf=\"pendingLeaves.length > 0; else noPendingLeaves\">\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>Date</th>\n                      <th>Leave Type</th>\n                      <th>Duration</th>\n                      <th>Reason</th>\n                      <th colspan=\"2\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let employeeLeave of pendingLeaves; let i = index\">\n                      <td>{{ i + 1 }}</td>\n                      <td>{{ dateService.formatDate(employeeLeave.date) }}</td>\n                      <td>{{ employeeLeave.leaveType }}</td>\n                      <td>\n                        {{\n                          getLeaveDuration(\n                            employeeLeave.duration,\n                            employeeLeave.startDate,\n                            employeeLeave.endDate,\n                            employeeLeave.hours\n                          )\n                        }}\n                      </td>\n                      <td>\n                        {{ employeeLeave.reason }}\n                      </td>\n                      <td>\n                        <button\n                          nbButton\n                          size=\"small\"\n                          status=\"basic\"\n                          (click)=\"editLeave(employeeLeave)\"\n                        >\n                          Edit\n                        </button>\n                      </td>\n\n                      <td>\n                        <button\n                          nbButton\n                          size=\"small\"\n                          status=\"danger\"\n                          (click)=\"deleteLeave(employeeLeave._id)\"\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <ng-template #noPendingLeaves>\n                <p class=\"text-center pt-5 pb-5\">No Pending Leaves</p>\n              </ng-template>\n            </ng-container>\n          </nb-tab>\n          <nb-tab tabTitle=\"approved\">\n            <ng-container *ngIf=\"!loading; else loadingData\">\n              <div\n                class=\"table-responsive\"\n                *ngIf=\"approvedLeaves.length > 0; else noApprovedLeaves\"\n              >\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>Date</th>\n                      <th>Leave Type</th>\n                      <th>Duration</th>\n                      <th>Reason</th>\n                      <th>Approved By</th>\n                      <th>Comment</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let employeeLeave of approvedLeaves; let i = index\">\n                      <td>{{ i + 1 }}</td>\n                      <td>{{ dateService.formatDate(employeeLeave.date) }}</td>\n                      <td>{{ employeeLeave.leaveType }}</td>\n                      <td>\n                        {{\n                          getLeaveDuration(\n                            employeeLeave.duration,\n                            employeeLeave.startDate,\n                            employeeLeave.endDate,\n                            employeeLeave.hours\n                          )\n                        }}\n                      </td>\n                      <td>\n                        {{ employeeLeave.reason }}\n                      </td>\n\n                      <td>\n                        {{ employeeLeave.monitoredBy }}\n                        <br />\n                        on {{ dateService.formatDate(employeeLeave.monitoredDate) }}\n                      </td>\n\n                      <td>\n                        {{ employeeLeave.comment ? employeeLeave.comment : '--' }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <ng-template #noApprovedLeaves>\n                <p class=\"text-center pt-5 pb-5\">No Approved Leaves</p>\n              </ng-template>\n            </ng-container>\n          </nb-tab>\n          <nb-tab tabTitle=\"Rejected\">\n            <ng-container *ngIf=\"!loading; else loadingData\">\n              <div\n                class=\"table-responsive\"\n                *ngIf=\"rejectedLeaves.length > 0; else noRejectedLeaves\"\n              >\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>Date</th>\n                      <th>Leave Type</th>\n                      <th>Duration</th>\n                      <th>Reason</th>\n                      <th>Rejected By</th>\n                      <th>Comment</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let employeeLeave of rejectedLeaves; let i = index\">\n                      <td>{{ i + 1 }}</td>\n                      <td>{{ dateService.formatDate(employeeLeave.date) }}</td>\n                      <td>{{ employeeLeave.leaveType }}</td>\n                      <td>\n                        {{\n                          getLeaveDuration(\n                            employeeLeave.duration,\n                            employeeLeave.startDate,\n                            employeeLeave.endDate,\n                            employeeLeave.hours\n                          )\n                        }}\n                      </td>\n                      <td>\n                        {{ employeeLeave.reason }}\n                      </td>\n                      <td>\n                        {{ employeeLeave.monitoredBy }}\n                        <br />\n                        on {{ dateService.formatDate(employeeLeave.monitoredDate) }}\n                      </td>\n\n                      <td>\n                        {{ employeeLeave.comment ? employeeLeave.comment : '--' }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <ng-template #noRejectedLeaves>\n                <p class=\"text-center pt-5 pb-5\">No Rejected Leaves</p>\n              </ng-template>\n            </ng-container>\n          </nb-tab>\n        </nb-tabset>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"text-center pt-5 pb-5\">Loading...</p>\n</ng-template>\n","import { MyLeaveComponent } from './my-leave.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MyLeaveComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MyLeaveRoutingModule {}\n","import { SaveLeaveComponent } from './save-leave/save-leave.component';\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\nimport { Month, DateService } from './../../../services/shared-services/date.service';\nimport { EmployeeLeaveService } from './../../../services/employee-leave.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BranchService } from './../../../services/branch.service';\nimport { EmployeeLeaveModel } from './../../../models/employee-leave.model';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-my-leave',\n  templateUrl: './my-leave.component.html',\n  styleUrls: ['./my-leave.component.scss'],\n})\nexport class MyLeaveComponent implements OnInit {\n  loading: boolean;\n\n  branchId: string;\n\n  pendingLeaves: EmployeeLeaveModel[];\n  approvedLeaves: EmployeeLeaveModel[];\n  rejectedLeaves: EmployeeLeaveModel[];\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  constructor(\n    private branchService: BranchService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private employeeLeaveService: EmployeeLeaveService,\n    private toastrService: NbToastrService,\n    private dialogService: NbDialogService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.branchId = this.branchService.getBranchId();\n\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.approvedLeaves = [];\n    this.pendingLeaves = [];\n    this.rejectedLeaves = [];\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.getMyLeaves();\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getMyLeaves();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n\n    this.getMyLeaves();\n  }\n\n  getMyLeaves() {\n    this.loading = true;\n    this.employeeLeaveService.getMyBranchLeaves(this.branchId, this.month, this.year).subscribe(\n      (leaves: EmployeeLeaveModel[]) => {\n        this.pendingLeaves = leaves.filter(\n          (leave: EmployeeLeaveModel) => leave.status === 'pending',\n        );\n        this.approvedLeaves = leaves.filter(\n          (leave: EmployeeLeaveModel) => leave.status === 'accepted',\n        );\n        this.rejectedLeaves = leaves.filter(\n          (leave: EmployeeLeaveModel) => leave.status === 'rejected',\n        );\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  getLeaveDuration(duration: string, startDate: string, endDate: string, hours: string) {\n    if (duration === 'single') {\n      return `Single Day Leave on ${this.dateService.formatDate(startDate)}`;\n    } else if (duration === 'multiple') {\n      return `Multiple Days Leave from ${this.dateService.formatDate(\n        startDate,\n      )} to ${this.dateService.formatDate(endDate)}`;\n    } else if ('hourly') {\n      return `Hourly Leave on ${this.dateService.formatDate(startDate)} for ${hours} Hours`;\n    } else {\n      return duration + ' leave';\n    }\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  saveLeave(type: string, leave: EmployeeLeaveModel) {\n    if (type === 'new') {\n      this.pendingLeaves.push(leave);\n    } else {\n      const index = this.pendingLeaves.findIndex(\n        (curLeave: EmployeeLeaveModel) => curLeave._id === leave._id,\n      );\n      if (index >= 0) {\n        this.pendingLeaves[index] = leave;\n      }\n    }\n  }\n\n  openLeaveDialog() {\n    this.dialogService\n      .open(SaveLeaveComponent, {\n        context: {},\n        closeOnBackdropClick: false,\n        closeOnEsc: false,\n      })\n      .onClose.subscribe(\n        (myLeave: { type: string; leave: EmployeeLeaveModel }) =>\n          myLeave && this.saveLeave(myLeave.type, myLeave.leave),\n      );\n  }\n\n  createLeave() {\n    this.openLeaveDialog();\n  }\n\n  editLeave(leave: EmployeeLeaveModel) {\n    this.employeeLeaveService.setEmployeeLeaveId(leave._id);\n    this.employeeLeaveService.setEmployeeLeaveData(leave);\n    this.openLeaveDialog();\n  }\n\n  deleteLeave(id: string) {\n    this.loading = true;\n    this.employeeLeaveService.deleteEmployeeLeave(id).subscribe(\n      (res: any) => {\n        const index = this.pendingLeaves.findIndex(\n          (curLeave: EmployeeLeaveModel) => curLeave._id === id,\n        );\n        if (index >= 0) {\n          this.pendingLeaves.splice(index, 1);\n        }\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbSelectModule,\n  NbButtonModule,\n  NbTooltipModule,\n  NbIconModule,\n  NbInputModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbTabsetModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MyLeaveRoutingModule } from './my-leave-routing.module';\nimport { MyLeaveComponent } from './my-leave.component';\nimport { SaveLeaveComponent } from './save-leave/save-leave.component';\n\n@NgModule({\n  declarations: [MyLeaveComponent, SaveLeaveComponent],\n  imports: [\n    CommonModule,\n    MyLeaveRoutingModule,\n    NbCardModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbTabsetModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbTooltipModule,\n    NbIconModule,\n    NbInputModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class MyLeaveModule {}\n"]}