{"version":3,"sources":["webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score.component.html","webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score-routing.module.ts","webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score.component.ts","webpack:///src/app/employee/branch/exam/test/batch-test/add-test-score/add-test-score.module.ts"],"names":["AddTestScoreComponent","AddTestScoreModule","AddTestScoreRoutingModule","routes","path","component","branchService","toastrService","courseService","batchService","router","examService","dateService","route","this","loading","branchId","getBranchId","getExamData","subscribe","exam","showToastr","back","examMarksForm","marks","getCategoryData","category","getCourseData","course","getBatchData","batch","getStudents","getStudentsForExam","_id","students","map","student","getStudentsScore","controls","forEach","addStudentScore","error","get","push","newStudentScore","name","validators","required","rollNumber","min","max","outOfMarks","number","Number","isInteger","markAllAsTouched","invalid","saveStudentsMarks","value","res","subject","mySubject","subjects","find","curSubject","navigate","relativeTo","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>Exam Score</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n          Back\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body>\n    <nb-card>\n      <nb-card-header>\n        <div class=\"row\">\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Exam Title: </strong>{{ exam.examTitle }}</span>\n            <br />\n            <span><strong>Date: </strong>{{ dateService.formatDate(exam.date) }}</span>\n            <br />\n            <span><strong>Time: </strong>{{ dateService.formatTime(exam.time) }}</span>\n            <br />\n            <span><strong>Duration: </strong>{{ exam.duration }} Min</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Category: </strong>{{ category.category }}</span>\n            <br />\n            <span><strong>Course: </strong>{{ course.basicDetails.courseName }}</span>\n            <br />\n            <span><strong>Batch: </strong>{{ batch.basicDetails.batchName }}</span>\n            <br />\n            <span><strong>Subject: </strong>{{ getSubject(exam.subject) }}</span>\n          </div>\n        </div>\n      </nb-card-header>\n      <nb-card-body>\n        <ng-container *ngIf=\"examMarksForm.get('marks')['controls'].length > 0; else noStudents\">\n          <form class=\"\" (submit)=\"saveMarks()\" [formGroup]=\"examMarksForm\">\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <div class=\"table-responsive\">\n                  <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>Student Name</th>\n                        <th>Roll Number</th>\n                        <th>Marks</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <ng-container\n                        *ngFor=\"\n                          let studentScore of examMarksForm.get('marks')['controls'];\n                          let i = index\n                        \"\n                      >\n                        <tr [formGroup]=\"studentScore\">\n                          <td>{{ studentScore.value.name }}</td>\n                          <td>{{ studentScore.value.rollNumber }}</td>\n                          <td>\n                            <div class=\"form-control-group\">\n                              <input\n                                type=\"number\"\n                                nbInput\n                                fullWidth\n                                [id]=\"studentScore.student\"\n                                [name]=\"studentScore.student\"\n                                class=\"input-marks\"\n                                formControlName=\"marks\"\n                                placeholder=\"Marks of {{ studentScore.value.name }}\"\n                                min=\"0\"\n                                [max]=\"exam.outOfMarks\"\n                                [status]=\"\n                                  studentScore.get('marks').touched\n                                    ? studentScore.get('marks').invalid\n                                      ? 'danger'\n                                      : 'success'\n                                    : 'basic'\n                                \"\n                              />\n                              <ng-container\n                                *ngIf=\"\n                                  studentScore.get('marks').invalid &&\n                                  studentScore.get('marks').touched\n                                \"\n                              >\n                                <p\n                                  class=\"caption status-danger\"\n                                  *ngIf=\"studentScore.get('marks').errors?.required\"\n                                >\n                                  Enter valid Marks of {{ studentScore.value.name }}\n                                </p>\n                                <p\n                                  class=\"caption status-danger\"\n                                  *ngIf=\"studentScore.get('marks').errors?.min\"\n                                >\n                                  Minimum marks should be 0\n                                </p>\n                                <p\n                                  class=\"caption status-danger\"\n                                  *ngIf=\"studentScore.get('marks').errors?.max\"\n                                >\n                                  Maximum marks should be {{ exam.outOfMarks }}\n                                </p>\n                              </ng-container>\n                            </div>\n                          </td>\n                        </tr>\n                      </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              <div class=\"col-12\">\n                <hr />\n              </div>\n\n              <div class=\"col-12 text-right\">\n                <button type=\"submit\" nbButton size=\"small\" status=\"primary\">Save</button>\n              </div>\n            </div>\n          </form>\n        </ng-container>\n        <ng-template #noStudents>\n          <p class=\"text-center pt-5 pb-5\">No Students Found</p>\n        </ng-template>\n      </nb-card-body>\n    </nb-card>\n    <ng-template #noStudentMarks>\n      <p class=\"text-center mt-5 mb-5\">No Students Found</p>\n    </ng-template>\n  </nb-card-body>\n</nb-card>\n","import { AddTestScoreComponent } from './add-test-score.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddTestScoreComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddTestScoreRoutingModule {}\n","import { FormGroup, FormArray, Validators, FormControl } from '@angular/forms';\nimport { BatchService } from './../../../../../../services/batch.service';\nimport { CourseService } from './../../../../../../services/course.service';\nimport { BatchModel } from './../../../../../../models/batch.model';\nimport { CategoryModel } from './../../../../../../models/branch.model';\nimport { SubjectModel, CourseModel } from './../../../../../../models/course.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { DateService } from './../../../../../../services/shared-services/date.service';\nimport { ExamService } from './../../../../../../services/exam.service';\nimport { ExamModel } from './../../../../../../models/exam.model';\nimport { Component, OnInit } from '@angular/core';\nimport { BranchService } from './../../../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\ninterface StudentScore {\n  name: string;\n  student: string;\n  rollNumber: string;\n  marks?: number;\n}\n\n@Component({\n  selector: 'ngx-add-test-score',\n  templateUrl: './add-test-score.component.html',\n  styleUrls: ['./add-test-score.component.scss'],\n})\nexport class AddTestScoreComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  exam: ExamModel;\n\n  category: CategoryModel;\n  course: CourseModel;\n  batch: BatchModel;\n\n  examMarksForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private router: Router,\n    private examService: ExamService,\n    public dateService: DateService,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.examService.getExamData().subscribe((exam: ExamModel) => {\n      this.exam = exam;\n    });\n\n    if (!this.exam) {\n      this.showToastr('top-right', 'danger', 'Exam Not Found');\n      this.back();\n      return;\n    }\n\n    this.examMarksForm = new FormGroup({\n      marks: new FormArray([]),\n    });\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.getStudents();\n  }\n\n  private getStudents() {\n    this.loading = true;\n    this.examService.getStudentsForExam(this.exam._id).subscribe(\n      (students: StudentScore[]) => {\n        students.map((student: any) => {\n          return (student.marks = student.marks ? student.marks : 0);\n        });\n\n        const examScore = this.getStudentsScore();\n        examScore.controls = [];\n\n        students.forEach((student: any) => {\n          this.addStudentScore(student);\n        });\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private getStudentsScore() {\n    return this.examMarksForm.get('marks') as FormArray;\n  }\n\n  private addStudentScore(student: StudentScore) {\n    const examScore = this.getStudentsScore();\n    examScore.push(this.newStudentScore(student));\n  }\n\n  private newStudentScore(student: StudentScore) {\n    return new FormGroup({\n      name: new FormControl(student.name, { validators: [Validators.required] }),\n      student: new FormControl(student.student, { validators: [Validators.required] }),\n      rollNumber: new FormControl(student.rollNumber, { validators: [Validators.required] }),\n      marks: new FormControl(student.marks ? student.marks : 0, {\n        validators: [Validators.required, Validators.min(0), Validators.max(this.exam.outOfMarks)],\n      }),\n    });\n  }\n\n  isNumber(number: any): boolean {\n    return Number.isInteger(number);\n  }\n\n  saveMarks() {\n    this.examMarksForm.markAllAsTouched();\n\n    if (this.examMarksForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Enter Valid Marks for All Students');\n      return;\n    }\n\n    const studentScore = this.examMarksForm.value.marks;\n\n    this.examService.saveStudentsMarks(this.exam._id, studentScore).subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', `Exam Marks Updated Successfully`);\n        this.back();\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  getSubject(subject: string) {\n    const mySubject = this.course.subjects.find(\n      (curSubject: SubjectModel) => curSubject._id === subject,\n    );\n\n    if (!mySubject) {\n      return '--';\n    }\n    return mySubject.subject;\n  }\n\n  back() {\n    this.router.navigate(['../manage'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbInputModule, NbButtonModule } from '@nebular/theme';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AddTestScoreComponent } from './add-test-score.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddTestScoreRoutingModule } from './add-test-score-routing.module';\n\n@NgModule({\n  declarations: [AddTestScoreComponent],\n  imports: [\n    CommonModule,\n    AddTestScoreRoutingModule,\n    NbCardModule,\n    NbInputModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AddTestScoreModule {}\n"]}