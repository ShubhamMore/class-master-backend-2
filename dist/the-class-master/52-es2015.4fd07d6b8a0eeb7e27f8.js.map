{"version":3,"sources":["webpack:///src/app/institute/transaction/transaction.component.html","webpack:///src/app/institute/transaction/transaction-routing.module.ts","webpack:///src/app/institute/transaction/transaction.component.ts","webpack:///src/app/institute/transaction/transaction.module.ts","webpack:///src/app/services/transaction.service.ts"],"names":["routes","path","component","TransactionComponent","transactionService","router","route","dateService","toastrService","this","loading","getInstituteTransactions","subscribe","transactions","error","showToastr","transaction","setInstituteTransactionData","navigate","relativeTo","amount","parseFloat","toString","toFixed","position","status","message","show","canActivate","loadChildren","then","m","ViewTransactionModule","PageNotFoundModule","redirectTo","pathMatch","TransactionRoutingModule","forChild","TransactionModule","TransactionService","httpService","instituteTransaction","studentTransaction","next","httpPost","api","data","pipe","response","err","id"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <h3>Transactions</h3>\n  </nb-card-header>\n  <nb-card-body>\n    <div *ngIf=\"!loading; else loadingData\">\n      <div class=\"table-responsive\" *ngIf=\"transactions.length > 0; else noTransactions\">\n        <table class=\"table table-borderless\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Transaction Id</th>\n              <th>Date</th>\n              <th>Amount</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let transaction of transactions; let i = index\">\n              <td>{{ i + 1 }}</td>\n              <td>trans_{{ transaction._id }}</td>\n              <td>\n                {{ dateService.formatDate(dateService.convertToDateString(transaction.createdAt)) }}\n              </td>\n              <td>{{ getAmount(transaction.amount) }}/-</td>\n              <td>\n                <button\n                  type=\"button\"\n                  nbButton\n                  size=\"small\"\n                  status=\"success\"\n                  (click)=\"viewTransaction(transaction)\"\n                >\n                  View\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">Loading...</p>\n</ng-template>\n\n<ng-template #noTransactions>\n  <p class=\"pt-5 pb-5 text-center\">No Transactions Available</p>\n</ng-template>\n","import { TransactionComponent } from './transaction.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: TransactionComponent, canActivate: [] },\n\n  {\n    path: 'view',\n    loadChildren: () =>\n      import('./view-transaction/view-transaction.module').then((m) => m.ViewTransactionModule),\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TransactionRoutingModule {}\n","import { DateService } from './../../services/shared-services/date.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NbToastrService } from '@nebular/theme';\nimport { TransactionService } from './../../services/transaction.service';\nimport { InstituteTransactionModel } from './../../models/institute-transaction.model';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-transaction',\n  templateUrl: './transaction.component.html',\n  styleUrls: ['./transaction.component.scss'],\n})\nexport class TransactionComponent implements OnInit {\n  loading: boolean;\n  transactions: InstituteTransactionModel[];\n\n  constructor(\n    private transactionService: TransactionService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public dateService: DateService,\n    private toastrService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.transactionService.getInstituteTransactions().subscribe(\n      (transactions: InstituteTransactionModel[]) => {\n        this.transactions = transactions;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  viewTransaction(transaction: InstituteTransactionModel) {\n    this.transactionService.setInstituteTransactionData(transaction);\n    this.router.navigate(['./view'], { relativeTo: this.route });\n  }\n\n  getAmount(amount: any) {\n    amount = parseFloat(amount.toString());\n    return amount.toFixed(2).toString();\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbButtonModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TransactionRoutingModule } from './transaction-routing.module';\nimport { TransactionComponent } from './transaction.component';\n\n@NgModule({\n  declarations: [TransactionComponent],\n  imports: [CommonModule, NbCardModule, NbButtonModule, TransactionRoutingModule],\n})\nexport class TransactionModule {}\n","import { StudentTransactionModel } from './../models/student-transaction.model';\nimport { InstituteTransactionModel } from './../models/institute-transaction.model';\nimport { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransactionService {\n  private instituteTransaction = new BehaviorSubject<InstituteTransactionModel>(null);\n\n  private studentTransaction = new BehaviorSubject<StudentTransactionModel>(null);\n\n  setInstituteTransactionData(instituteTransaction: InstituteTransactionModel) {\n    this.instituteTransaction.next(instituteTransaction);\n  }\n\n  getInstituteTransactionData() {\n    return this.instituteTransaction;\n  }\n\n  deleteInstituteTransactionData() {\n    this.instituteTransaction.next(null);\n  }\n\n  setStudentTransactionData(studentTransaction: StudentTransactionModel) {\n    this.studentTransaction.next(studentTransaction);\n  }\n\n  getStudentTransactionData() {\n    return this.studentTransaction;\n  }\n\n  deleteStudentTransactionData() {\n    this.studentTransaction.next(null);\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getTransactionHistory() {\n    const data = {\n      api: 'getTransactionHistory',\n      data: {},\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getInstituteTransaction(id: string) {\n    const data = {\n      api: 'getInstituteTransaction',\n      data: { id },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getInstituteTransactions() {\n    const data = {\n      api: 'getInstituteTransactions',\n      data: {},\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentTransaction(id: string) {\n    const data = {\n      api: 'getStudentTransaction',\n      data: { id },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentTransactions() {\n    const data = {\n      api: 'getStudentTransactions',\n      data: {},\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n"]}