{"version":3,"sources":["webpack:///src/app/admin/institutes/branches/history/plan-type/plan-type.component.html","webpack:///src/app/admin/institutes/branches/history/plan-type/plan-type.component.ts","webpack:///src/app/admin/institutes/branches/history/history.component.html","webpack:///src/app/admin/institutes/branches/history/history-routing.module.ts","webpack:///src/app/admin/institutes/branches/history/history.component.ts","webpack:///src/app/admin/institutes/branches/history/history.module.ts"],"names":["PlanTypeComponent","membershipService","toastrService","ref","this","loading","memberships","getMemberships","subscribe","i","membership","newMembership","find","curMembership","name","error","showToastr","amount","parseFloat","toString","toFixed","membershipPlan","close","position","status","message","show","HistoryComponent","HistoryModule","HistoryRoutingModule","routes","path","component","instituteService","dialogService","dateService","router","route","getInstitute","institute","getBranch","branch","getInstituteBranchHistory","_id","history","address","address1","address2","city","pinCode","state","openPlanTypeDialog","deactivateBranch","open","context","onClose","activateBranch","activateInstituteBranch","price","res","deactivateInstituteBranch","navigate","relativeTo","back","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>Membership Plans</h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\" *ngIf=\"!loading; else loadingData\">\n      <div class=\"col-12\">\n        <div class=\"table-responsive\" *ngIf=\"memberships.length > 0; else noMemberships\">\n          <table class=\"table\">\n            <thead>\n              <th>#</th>\n              <th>Membership Type</th>\n              <th>Duration</th>\n              <th>Price</th>\n              <th>Action</th>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let membership of memberships; let i = index\">\n                <td>{{ i + 1 }}</td>\n                <td>{{ membership.name | uppercase }}</td>\n                <td>{{ membership.duration }} Month/s</td>\n                <td>{{ getAmount(membership.price) }}/-</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    nbButton\n                    size=\"small\"\n                    status=\"primary\"\n                    (click)=\"selectPlanType(membership)\"\n                  >\n                    Select\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">Loading...</p>\n</ng-template>\n\n<ng-template #noMemberships>\n  <p class=\"pt-5 pb-5 text-center\">No Membership Plans Available</p>\n</ng-template>\n","import { MembershipPlanModel } from './../../../../../models/membership-plan.model';\nimport { NbToastrService, NbDialogRef } from '@nebular/theme';\nimport { MembershipService } from './../../../../../services/membership.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-plan-type',\n  templateUrl: './plan-type.component.html',\n  styleUrls: ['./plan-type.component.scss'],\n})\nexport class PlanTypeComponent implements OnInit {\n  loading: boolean;\n\n  memberships: MembershipPlanModel[];\n\n  constructor(\n    private membershipService: MembershipService,\n    private toastrService: NbToastrService,\n    protected ref: NbDialogRef<PlanTypeComponent>,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.memberships = [\n      new MembershipPlanModel(null, 'monthly', '1', '1999', true),\n      new MembershipPlanModel(null, 'quarterly', '3', '4999', true),\n      new MembershipPlanModel(null, 'half-yearly', '6', '7999', true),\n      new MembershipPlanModel(null, 'yearly', '12', '11999', true),\n    ];\n\n    this.getMemberships();\n  }\n\n  getMemberships() {\n    this.loading = true;\n    this.membershipService.getMemberships().subscribe(\n      (memberships: MembershipPlanModel[]) => {\n        for (let i = 0; i < 4; i++) {\n          const membership = this.memberships[i];\n\n          const newMembership = memberships.find(\n            (curMembership: MembershipPlanModel) => curMembership.name === membership.name,\n          );\n\n          if (newMembership) {\n            this.memberships[i] = newMembership;\n          }\n        }\n\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  getAmount(amount: any) {\n    amount = parseFloat(amount.toString());\n    return amount.toFixed(2).toString();\n  }\n\n  selectPlanType(membershipPlan: MembershipPlanModel) {\n    this.ref.close(membershipPlan);\n  }\n\n  onClose() {\n    this.ref.close();\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <button\n          type=\"button\"\n          class=\"float-right\"\n          size=\"small\"\n          nbButton\n          status=\"warning\"\n          (click)=\"back()\"\n        >\n          Back\n        </button>\n        <h3>Branch Details</h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\" *ngIf=\"!loading; else loadingData\">\n      <div class=\"col-sm-6 col-12\">\n        <p><strong>Branch Name: </strong>{{ branch.basicDetails.branchName }}</p>\n      </div>\n\n      <div class=\"col-sm-6 col-12\">\n        <button\n          class=\"\"\n          nbButton\n          size=\"small\"\n          [status]=\"branch.status ? 'danger' : 'success'\"\n          fullWidth\n          (click)=\"changeBranchStatus(!branch.status)\"\n        >\n          {{ branch.status ? 'Deactivate' : 'Activate Now' }}\n        </button>\n      </div>\n\n      <div class=\"col-md-6 col-12\">\n        <p><strong>Email: </strong>{{ branch.basicDetails.email }}</p>\n      </div>\n\n      <div class=\"col-md-6 col-12\">\n        <p><strong>Contact: </strong>{{ branch.basicDetails.phone }}</p>\n      </div>\n\n      <div class=\"col-12\">\n        <p><strong>Address: </strong> {{ getAddress(branch.address) }}</p>\n      </div>\n\n      <div class=\"col-md-3 col-sm-5 col-12\">\n        <p>\n          <strong>Category: </strong>\n        </p>\n      </div>\n\n      <div class=\"col-md-9 col-sm-7 col-12\" *ngIf=\"branch.categories.length > 0\">\n        <div class=\"table-responsive\">\n          <table class=\"table table-sm\">\n            <thead>\n              <th>#</th>\n              <th>Category</th>\n              <th>Status</th>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let category of branch.categories; let i = index\">\n                <td>{{ i + 1 }}</td>\n                <td>{{ category.category }}</td>\n                <td>{{ category.status ? 'Active' : 'Inactive' }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div class=\"col-12\">\n        <h5>History:</h5>\n        <div class=\"table-responsive\" *ngIf=\"history.length > 0; else noHistory\">\n          <table class=\"table\">\n            <thead>\n              <th>#</th>\n              <th>Plan Type</th>\n              <th>Amount</th>\n              <th>Activation Date</th>\n              <th>Expiry Date</th>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let curHistory of history; let i = index\">\n                <td>{{ i + 1 }}</td>\n                <td>{{ curHistory.planType }}</td>\n                <td>{{ curHistory.amount }}/-</td>\n                <td>{{ dateService.formatDate(curHistory.activationDate) }}</td>\n                <td>{{ dateService.formatDate(curHistory.expiryDate) }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">Loading...</p>\n</ng-template>\n\n<ng-template #noHistory>\n  <p class=\"pt-5 pb-5 text-center\">No Branch History Available</p>\n</ng-template>\n","import { HistoryComponent } from './history.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HistoryComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HistoryRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\nimport { MembershipPlanModel } from './../../../../models/membership-plan.model';\nimport { PlanTypeComponent } from './plan-type/plan-type.component';\nimport { BranchHistoryModel } from './../../../../models/branch-history.model';\nimport { BranchModel, BranchAddressModel, CategoryModel } from './../../../../models/branch.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\nimport { InstituteModel } from './../../../../models/institute.model';\nimport { Component, OnInit } from '@angular/core';\nimport { InstituteService } from '../../../services/institute.service';\n\n@Component({\n  selector: 'ngx-history',\n  templateUrl: './history.component.html',\n  styleUrls: ['./history.component.scss'],\n})\nexport class HistoryComponent implements OnInit {\n  loading: boolean;\n  institute: InstituteModel;\n  branch: BranchModel;\n\n  history: BranchHistoryModel[];\n\n  constructor(\n    private instituteService: InstituteService,\n    private toastrService: NbToastrService,\n    private dialogService: NbDialogService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.instituteService.getInstitute().subscribe((institute: InstituteModel) => {\n      if (!institute) {\n        this.showToastr('top right', 'danger', 'Invalid Institute');\n        return;\n      }\n\n      this.institute = institute;\n\n      this.instituteService.getBranch().subscribe((branch: BranchModel) => {\n        if (!branch) {\n          this.showToastr('top right', 'danger', 'Invalid Institute');\n          return;\n        }\n\n        this.branch = branch;\n\n        this.instituteService.getInstituteBranchHistory(branch._id).subscribe(\n          (history: BranchHistoryModel[]) => {\n            this.history = history;\n            this.loading = false;\n          },\n          (error: any) => {\n            this.showToastr('top right', 'danger', error);\n            this.loading = false;\n          },\n        );\n      });\n    });\n  }\n\n  getAddress(address: BranchAddressModel) {\n    const address2 = address.address2 ? address.address2 + ', ' : '';\n\n    return (\n      address.address1 +\n      ', ' +\n      address2 +\n      address.city +\n      ' - ' +\n      address.pinCode +\n      ', ' +\n      address.state\n    );\n  }\n\n  changeBranchStatus(status: boolean) {\n    if (status) {\n      this.openPlanTypeDialog();\n    } else {\n      this.deactivateBranch();\n    }\n  }\n\n  openPlanTypeDialog() {\n    this.dialogService\n      .open(PlanTypeComponent, {\n        context: {},\n      })\n      .onClose.subscribe(\n        (membershipPlan: MembershipPlanModel) =>\n          membershipPlan && this.activateBranch(membershipPlan),\n      );\n  }\n\n  private activateBranch(membershipPlan: MembershipPlanModel) {\n    if (!membershipPlan) {\n      this.showToastr('top right', 'danger', 'Invalid Membership Plan');\n      return;\n    }\n\n    this.loading = true;\n\n    this.instituteService\n      .activateInstituteBranch(this.branch._id, membershipPlan.name, membershipPlan.price)\n      .subscribe(\n        (res: any) => {\n          this.branch.status = true;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top right', 'danger', error);\n          this.loading = false;\n        },\n      );\n  }\n\n  private deactivateBranch() {\n    this.loading = true;\n\n    this.instituteService.deactivateInstituteBranch(this.branch._id).subscribe(\n      (res: any) => {\n        this.branch.status = false;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n}\n","import {\n  NbTooltipModule,\n  NbInputModule,\n  NbButtonModule,\n  NbIconModule,\n  NbCardModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HistoryRoutingModule } from './history-routing.module';\nimport { HistoryComponent } from './history.component';\nimport { PlanTypeComponent } from './plan-type/plan-type.component';\n\n@NgModule({\n  declarations: [HistoryComponent, PlanTypeComponent],\n  imports: [\n    CommonModule,\n    NbTooltipModule,\n    NbInputModule,\n    NbButtonModule,\n    NbIconModule,\n    NbCardModule,\n    HistoryRoutingModule,\n  ],\n})\nexport class HistoryModule {}\n"]}