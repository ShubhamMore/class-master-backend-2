{"version":3,"sources":["webpack:///src/app/employee/branch/manage-branch/course/batch/add-batch/add-batch.component.html","webpack:///src/app/employee/branch/manage-branch/course/batch/add-batch/add-batch-routing.module.ts","webpack:///src/app/employee/branch/manage-branch/course/batch/add-batch/add-batch.component.ts","webpack:///src/app/employee/branch/manage-branch/course/batch/add-batch/add-batch.module.ts"],"names":["AddBatchComponent","AddBatchModule","AddBatchRoutingModule","routes","path","component","branchService","branchEmployeeService","batchService","courseService","toastrService","router","route","this","queryParams","subscribe","param","mode","ngOnInit","loading","submit","branchId","getBranchId","getCourseData","course","back","batchId","getBatchId","showToastr","navigate","relativeTo","batchBasicDetailsForm","batchName","validators","required","startDate","rollNoPrefix","description","batchSubjectForm","subjects","atLeastOneSubjectValidator","bind","teachers","filter","subject","status","forEach","batchSubject","_id","teacher","addBatchSubject","getBranchEmployeeNameIdsForBatch","getBatchForEditing","batch","patchValue","basicDetails","duration","batchSubjects","curSubject","i","find","curBatchSubject","changeSubjectStatus","getBatchSubjects","controls","get","setValue","curTeacher","employee","err","error","group","value","atLeastOneSubjectError","toString","push","newBatchSubject","enable","disable","id","name","markAllAsTouched","invalid","stepper","next","branch","category","editBatch","res","addBatch","position","message","show","replaceUrl","deleteBatchId","submitBasicDetails","submitSubjects","saveBatch","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" s (click)=\"back()\">\n      Back\n    </button>\n    <h3 class=\"\">\n      {{ !batch ? 'Add New Batch' : 'Edit Batch ' + (batch.basicDetails.batchName | uppercase) }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\">\n      <nb-step [stepControl]=\"batchBasicDetailsForm\" label=\"Basic Details\">\n        <form class=\"\" (submit)=\"submitBasicDetails()\" [formGroup]=\"batchBasicDetailsForm\">\n          <h6>Batch Details:</h6>\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input -batch-name\">Batch Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-batch-name\"\n                  name=\"batchName\"\n                  formControlName=\"batchName\"\n                  placeholder=\"Batch Name\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    batchBasicDetailsForm.get('batchName').touched\n                      ? batchBasicDetailsForm.get('batchName').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    batchBasicDetailsForm.get('batchName').invalid &&\n                    batchBasicDetailsForm.get('batchName').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"batchBasicDetailsForm.get('batchName').errors?.required\"\n                  >\n                    Batch Name is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input -batch-start-date\">Batch Start Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-batch-start-date\"\n                  name=\"startDate\"\n                  formControlName=\"startDate\"\n                  fullWidth\n                  [status]=\"\n                    batchBasicDetailsForm.get('startDate').touched\n                      ? batchBasicDetailsForm.get('startDate').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    batchBasicDetailsForm.get('startDate').invalid &&\n                    batchBasicDetailsForm.get('startDate').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"batchBasicDetailsForm.get('startDate').errors?.required\"\n                  >\n                    Batch Start Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-rollNoPrefix\">Roll No Prefix:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-rollNoPrefix\"\n                  name=\"rollNoPrefix\"\n                  maxlength=\"15\"\n                  formControlName=\"rollNoPrefix\"\n                  placeholder=\"Roll No Prefix\"\n                  fullWidth\n                />\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-billing-description\">Description:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-description\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  placeholder=\"Description (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"batchSubjectForm\" label=\"Subject Details\">\n        <form [formGroup]=\"batchSubjectForm\" (ngSubmit)=\"submitSubjects()\" class=\"step-container\">\n          <ng-container\n            *ngFor=\"let subject of batchSubjectForm.get('subjects')['controls']; let i = index\"\n          >\n            <div class=\"row mb-3\" [formGroup]=\"subject\">\n              <div class=\"col-md-4 col-sm-6 mx-auto\">\n                <div class=\"form-control-group\">\n                  <nb-checkbox\n                    id=\"status-{{ i }}\"\n                    name=\"status\"\n                    [checked]=\"subject.value.status\"\n                    formControlName=\"status\"\n                    (checkedChange)=\"changeSubjectStatus($event, i)\"\n                  >\n                    <label for=\"status-{{ i }}\">{{ getSubjectName(subject.value.subject) }}</label>\n                  </nb-checkbox>\n                </div>\n              </div>\n\n              <div class=\"col-md-4 col-sm-6 mx-auto\">\n                <div class=\"form-control-group\">\n                  <nb-select\n                    id=\"teacher-{{ i }}\"\n                    name=\"teacher\"\n                    formControlName=\"teacher\"\n                    placeholder=\"Select Teacher\"\n                    fullWidth\n                  >\n                    <nb-option value=\"\">Select Teacher </nb-option>\n                    <nb-option *ngFor=\"let teacher of teachers\" [value]=\"teacher.employee\">{{\n                      teacher.name\n                    }}</nb-option>\n                  </nb-select>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Batch Name</th>\n                  <td>{{ batchBasicDetailsForm.value.batchName }}</td>\n                </tr>\n                <tr>\n                  <th>Batch Roll No Prefix</th>\n                  <td>{{ batchBasicDetailsForm.value.rollNoPrefix }}</td>\n                </tr>\n\n                <tr>\n                  <th>Description</th>\n                  <td>{{ batchBasicDetailsForm.value.description }}</td>\n                </tr>\n                <tr>\n                  <th>Subjects</th>\n                  <td>\n                    <table class=\"table table-sm table-borderless\">\n                      <tbody>\n                        <ng-container\n                          *ngFor=\"let subject of batchSubjectForm.get('subjects')['controls']\"\n                        >\n                          <tr *ngIf=\"subject.value.status\">\n                            <th>{{ getSubjectName(subject.value.subject) }}</th>\n                            <td>{{ getTeacherName(subject.value.teacher) }}</td>\n                          </tr>\n                        </ng-container>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveBatch()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddBatchComponent } from './add-batch.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddBatchComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddBatchRoutingModule {}\n","import { EmployeeNameIdModel } from './../../../../../../models/branch-employee.model'; // To be removed\nimport { CourseService } from './../../../../../../services/course.service';\nimport { SubjectModel, CourseModel } from './../../../../../../models/course.model';\nimport { BatchModel, BatchSubjectModel } from './../../../../../../models/batch.model';\nimport { FormGroup, Validators, FormControl, FormArray } from '@angular/forms';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { BatchService } from './../../../../../../services/batch.service';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../../../services/branch.service';\n\nimport { ObjectId } from 'bson';\nimport { BranchEmployeeService } from '../../../../../../services/branch-employee.service';\n\ninterface Teacher {\n  imsMasterId: string;\n  name: string;\n}\n\n@Component({\n  selector: 'ngx-add-batch',\n  templateUrl: './add-batch.component.html',\n  styleUrls: ['./add-batch.component.scss'],\n})\nexport class AddBatchComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n  private batchId: string;\n  batch: BatchModel;\n  course: CourseModel;\n  teachers: EmployeeNameIdModel[];\n  subjects: SubjectModel[];\n  batchBasicDetailsForm: FormGroup;\n  batchSubjectForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private branchEmployeeService: BranchEmployeeService,\n    private batchService: BatchService,\n    private courseService: CourseService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      if (param.mode) {\n        this.ngOnInit();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n      if (!this.course) {\n        this.back();\n        return;\n      }\n    });\n\n    this.batchId = this.batchService.getBatchId();\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.batchId) {\n      this.showToastr('top-right', 'danger', 'Batch Not Available');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.batchBasicDetailsForm = new FormGroup({\n      batchName: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      startDate: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      rollNoPrefix: new FormControl(null, {\n        validators: [],\n      }),\n      description: new FormControl(null, {\n        validators: [],\n      }),\n    });\n\n    this.batchSubjectForm = new FormGroup(\n      {\n        subjects: new FormArray([]),\n      },\n      { validators: this.atLeastOneSubjectValidator.bind(this) },\n    );\n\n    this.teachers = [];\n    this.subjects = this.course.subjects.filter((subject: SubjectModel) => subject.status);\n\n    this.subjects.forEach((subject: SubjectModel) => {\n      const batchSubject = {\n        _id: new ObjectId(),\n        subject: subject._id,\n        teacher: '',\n        status: true,\n      };\n      this.addBatchSubject(batchSubject);\n    });\n\n    this.branchEmployeeService.getBranchEmployeeNameIdsForBatch(this.branchId, 'teacher').subscribe(\n      (teachers: EmployeeNameIdModel[]) => {\n        this.teachers = teachers;\n\n        if (this.batchId) {\n          this.batchService.getBatchForEditing(this.batchId).subscribe(\n            (batch: BatchModel) => {\n              if (!batch) {\n                this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n                return;\n              }\n              this.batch = batch;\n              this.batchBasicDetailsForm.patchValue({\n                batchName: batch.basicDetails.batchName,\n                startDate: batch.basicDetails.startDate,\n                duration: batch.basicDetails.rollNoPrefix,\n                description: batch.basicDetails.description,\n              });\n\n              const batchSubjects = batch.subjects;\n\n              this.subjects.forEach((curSubject: SubjectModel, i: number) => {\n                const subject = batchSubjects.find(\n                  (curBatchSubject: BatchSubjectModel) =>\n                    curBatchSubject.subject === curSubject._id,\n                );\n\n                let teacher: string = '';\n                if (subject) {\n                  this.changeSubjectStatus(subject.status, i);\n                  this.getBatchSubjects().controls[i].get('_id').setValue(subject._id);\n                  if (\n                    teachers.find(\n                      (curTeacher: EmployeeNameIdModel) => curTeacher.employee === subject.teacher,\n                    )\n                  ) {\n                    teacher = subject.teacher;\n                  }\n                }\n                this.getBatchSubjects().controls[i].get('teacher').setValue(teacher);\n              });\n              this.loading = false;\n            },\n            (err: any) => {\n              this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n              return;\n            },\n          );\n        } else {\n          this.loading = false;\n        }\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private atLeastOneSubjectValidator(group: FormGroup): { [s: string]: boolean } {\n    const subjects = group.value.subjects;\n    let status = false;\n    subjects.forEach((subject: any) => {\n      if (subject.status) {\n        status = true;\n      }\n    });\n\n    if (!status) {\n      return { atLeastOneSubjectError: true };\n    }\n    return null;\n  }\n\n  private getBatchSubjects() {\n    return this.batchSubjectForm.get('subjects') as FormArray;\n  }\n\n  private newBatchSubject(batchSubject: any) {\n    return new FormGroup({\n      _id: new FormControl(batchSubject._id ? batchSubject._id : new ObjectId().toString(), {\n        validators: [Validators.required],\n      }),\n      subject: new FormControl(batchSubject.subject ? batchSubject.subject : null, {\n        validators: [Validators.required],\n      }),\n      teacher: new FormControl(batchSubject.teacher ? batchSubject.teacher : '', {\n        validators: [],\n      }),\n      status: new FormControl(batchSubject.status ? batchSubject.status : true, {\n        validators: [],\n      }),\n    });\n  }\n\n  private addBatchSubject(batchSubject: any) {\n    const subjects = this.getBatchSubjects();\n    subjects.push(this.newBatchSubject(batchSubject));\n  }\n\n  changeSubjectStatus(status: boolean, i: number) {\n    const batchSubject = this.getBatchSubjects().controls[i];\n    batchSubject.get('status').setValue(status);\n    if (status) {\n      batchSubject.get('teacher').enable();\n    } else {\n      batchSubject.get('teacher').setValue('');\n      batchSubject.get('teacher').disable();\n    }\n  }\n\n  getSubjectName(id: string) {\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === id);\n    if (subject) {\n      return subject.subject;\n    }\n\n    return '--';\n  }\n\n  getTeacherName(id: string) {\n    const teacher = this.teachers.find(\n      (curTeacher: EmployeeNameIdModel) => curTeacher.employee === id,\n    );\n    if (teacher) {\n      return teacher.name;\n    }\n\n    return '--';\n  }\n\n  submitBasicDetails() {\n    this.batchBasicDetailsForm.markAllAsTouched();\n    if (this.batchBasicDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Basic details are required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  submitSubjects() {\n    this.batchSubjectForm.markAllAsTouched();\n    if (this.batchSubjectForm.invalid) {\n      this.showToastr('top-right', 'danger', 'At least 1 Subject is required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveBatch() {\n    this.batchBasicDetailsForm.markAllAsTouched();\n    this.batchSubjectForm.markAllAsTouched();\n\n    if (this.batchBasicDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Basic details are required');\n      return;\n    } else if (this.batchSubjectForm.invalid) {\n      this.showToastr('top-right', 'danger', 'At least 1 Subject is required');\n      return;\n    }\n    this.submit = true;\n\n    const batch: any = {\n      branch: this.branchId,\n      category: this.course.basicDetails.category,\n      course: this.course._id,\n      basicDetails: this.batchBasicDetailsForm.value,\n      subjects: this.batchSubjectForm.value.subjects,\n    };\n    if (!this.batch) {\n      this.batchService.addBatch(batch).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Batch Added Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      batch._id = this.batch._id;\n\n      this.batchService.editBatch(batch).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Batch Updated Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {\n    this.batchService.deleteBatchId();\n  }\n}\n","import { AddBatchComponent } from './add-batch.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddBatchRoutingModule } from './add-batch-routing.module';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbIconModule,\n  NbInputModule,\n  NbCheckboxModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbFormFieldModule,\n} from '@nebular/theme';\n@NgModule({\n  declarations: [AddBatchComponent],\n  imports: [\n    CommonModule,\n    AddBatchRoutingModule,\n\n    NbCardModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbIconModule,\n    NbInputModule,\n    NbFormFieldModule,\n    NbCheckboxModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbFormFieldModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddBatchModule {}\n"]}