{"version":3,"sources":["webpack:///src/app/services/budget.service.ts","webpack:///src/app/employee/branch/budget/add-budget/add-budget.component.html","webpack:///src/app/employee/branch/budget/add-budget/add-budget-routing.module.ts","webpack:///src/app/employee/branch/budget/add-budget/add-budget.component.ts","webpack:///src/app/employee/branch/budget/add-budget/add-budget.module.ts"],"names":["BudgetService","httpService","month","this","searchMonth","year","searchYear","branch","httpPost","api","data","pipe","response","err","budget","id","routes","path","component","AddBudgetComponent","budgetService","branchService","toastrService","dateService","router","route","loading","submit","branchId","getBranchId","budgetForm","type","validators","required","generatedBy","title","amount","min","date","getDateString","back","stepper","previous","markAllAsTouched","invalid","showToastr","next","value","saveBudget","subscribe","res","error","position","status","message","show","navigate","relativeTo","budgetFormSubmit","previousStep","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddBudgetRoutingModule","forChild","AddBudgetModule"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BudgetService {\n  private searchMonth: string;\n  private searchYear: string;\n\n  setMonth(month: string) {\n    this.searchMonth = month;\n  }\n  getMonth() {\n    return this.searchMonth;\n  }\n\n  setYear(year: string) {\n    this.searchYear = year;\n  }\n\n  getYear() {\n    return this.searchYear;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getBudgetForBranch(branch: string, month: string, year: string) {\n    const data = { api: 'getBudgetForBranch', data: { branch, month, year } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBudgetForBranchDashboard(branch: string, year: string) {\n    const data = { api: 'getBudgetForBranchDashboard', data: { branch, year } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBudgetSummery(branch: string, month: string, year: string) {\n    const data = { api: 'getBudgetSummery', data: { branch, month, year } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveBudget(budget: any) {\n    const data = { api: 'saveBudget', data: budget };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteBudget(id: string) {\n    const data = { api: 'deleteBudget', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","<nb-card>\n  <nb-card-header>\n    <button\n      title=\"button\"\n      class=\"float-right\"\n      nbButton\n      size=\"small\"\n      status=\"warning\"\n      (click)=\"back()\"\n    >\n      Back\n    </button>\n    <h3 class=\"\">Add {{ budgetForm.value.type | uppercase }}</h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n      <nb-step [stepControl]=\"budgetForm\" label=\"{{ budgetForm.value.type | uppercase }} Details\">\n        <form class=\"\" (submit)=\"budgetFormSubmit()\" [formGroup]=\"budgetForm\">\n          <div class=\"row\">\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-type\">Type:</label>\n                <nb-select\n                  id=\"input-type\"\n                  name=\"type\"\n                  formControlName=\"type\"\n                  placeholder=\"Select Type\"\n                  fullWidth\n                  [status]=\"\n                    budgetForm.get('type').touched\n                      ? budgetForm.get('type').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"income\">INCOME</nb-option>\n                  <nb-option value=\"expense\">EXPENSE</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"budgetForm.get('type').invalid && budgetForm.get('type').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"budgetForm.get('type').errors?.required\">\n                    Type is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-8 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-generated-by\">Generated By:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-generated-by\"\n                  name=\"generatedBy\"\n                  formControlName=\"generatedBy\"\n                  placeholder=\"Generated By\"\n                  minlength=\"3\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    budgetForm.get('generatedBy').touched\n                      ? budgetForm.get('generatedBy').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    budgetForm.get('generatedBy').invalid && budgetForm.get('generatedBy').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"budgetForm.get('generatedBy').errors?.required\"\n                  >\n                    Generated By is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"budgetForm.get('generatedBy').errors?.minlength\"\n                  >\n                    Generated By should contain minimum 3 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-title\">Title:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-title\"\n                  name=\"title\"\n                  formControlName=\"title\"\n                  placeholder=\"Title\"\n                  fullWidth\n                  [status]=\"\n                    budgetForm.get('title').touched\n                      ? budgetForm.get('title').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"budgetForm.get('title').invalid && budgetForm.get('title').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"budgetForm.get('title').errors?.required\">\n                    Title is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-amount\">Amount:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-amount\"\n                  name=\"amount\"\n                  formControlName=\"amount\"\n                  placeholder=\"Amount\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    budgetForm.get('amount').touched\n                      ? budgetForm.get('amount').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"budgetForm.get('amount').invalid && budgetForm.get('amount').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"budgetForm.get('amount').errors?.required\"\n                  >\n                    Amount is required!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"budgetForm.get('amount').errors?.min\">\n                    Enter Valid Amount.\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-date\">Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-date\"\n                  name=\"date\"\n                  formControlName=\"date\"\n                  placeholder=\"Date\"\n                  fullWidth\n                />\n              </div>\n              <ng-container\n                *ngIf=\"budgetForm.get('date').invalid && budgetForm.get('date').touched\"\n              >\n                <p class=\"caption status-danger\" *ngIf=\"budgetForm.get('date').errors?.required\">\n                  Date is required!\n                </p>\n              </ng-container>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" title=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Type</th>\n                  <td>{{ budgetForm.value.type | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Generated By</th>\n                  <td>{{ budgetForm.value.generatedBy }}</td>\n                </tr>\n                <tr>\n                  <th>Title</th>\n                  <td>{{ budgetForm.value.title }}</td>\n                </tr>\n                <tr>\n                  <th>Amount</th>\n                  <td>{{ budgetForm.value.amount }}</td>\n                </tr>\n                <tr>\n                  <th>Date</th>\n                  <td>{{ dateService.formatDate(budgetForm.value.date) }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button\n                title=\"button\"\n                class=\"\"\n                nbButton\n                size=\"small\"\n                (click)=\"previousStep()\"\n                [disabled]=\"submit\"\n              >\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveBudget()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddBudgetComponent } from './add-budget.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddBudgetComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddBudgetRoutingModule {}\n","import { NbStepperComponent, NbToastrService } from '@nebular/theme';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DateService } from './../../../../services/shared-services/date.service';\nimport { BranchService } from './../../../../services/branch.service';\nimport { BudgetService } from './../../../../services/budget.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'ngx-add-budget',\n  templateUrl: './add-budget.component.html',\n  styleUrls: ['./add-budget.component.scss'],\n})\nexport class AddBudgetComponent implements OnInit {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n\n  budgetForm: FormGroup;\n\n  constructor(\n    private budgetService: BudgetService,\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.budgetForm = new FormGroup({\n      type: new FormControl('income', {\n        validators: [Validators.required],\n      }),\n      generatedBy: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      title: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      amount: new FormControl(null, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n      date: new FormControl(this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n    });\n  }\n\n  previousStep() {\n    this.stepper.previous();\n  }\n\n  budgetFormSubmit() {\n    this.budgetForm.markAllAsTouched();\n    if (this.budgetForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Please Fill All data Correctly');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveBudget() {\n    if (this.budgetForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Please Fill All data Correctly');\n      return;\n    }\n    this.submit = true;\n\n    const budget: any = this.budgetForm.value;\n    budget.branch = this.branchId;\n\n    this.budgetService.saveBudget(budget).subscribe(\n      (res: any) => {\n        this.back();\n      },\n      (error: any) => {\n        this.submit = false;\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbSelectModule,\n  NbSpinnerModule,\n  NbInputModule,\n  NbButtonModule,\n  NbIconModule,\n  NbStepperModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddBudgetRoutingModule } from './add-budget-routing.module';\nimport { AddBudgetComponent } from './add-budget.component';\n\n@NgModule({\n  declarations: [AddBudgetComponent],\n  imports: [\n    CommonModule,\n    AddBudgetRoutingModule,\n    NbCardModule,\n    NbSpinnerModule,\n    NbSelectModule,\n    NbInputModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n    NbIconModule,\n    NbStepperModule,\n  ],\n})\nexport class AddBudgetModule {}\n"]}