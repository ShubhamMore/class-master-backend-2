{"version":3,"sources":["webpack:///src/app/institute/branch/student/student-course/student-course-performance/student-course-performance.component.html","webpack:///src/app/institute/branch/student/student-course/student-course-performance/student-course-performance-routing.module.ts","webpack:///src/app/institute/branch/student/student-course/student-course-performance/student-course-performance.component.ts","webpack:///src/app/institute/branch/student/student-course/student-course-performance/student-course-performance.module.ts"],"names":["routes","path","component","StudentCoursePerformanceComponent","dateService","branchService","batchService","toastrService","studentService","studentCourseService","examService","router","route","this","loading","branchId","getBranchId","categoryId","getCategoryId","studentCourseId","getStudentCourseId","studentId","getStudentId","getStudentCourseData","subscribe","studentCourse","showToastr","back","scores","subjects","subject","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getBatchSubjects","course","batch","getStudentCourseScore","error","navigate","relativeTo","position","status","message","show","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","StudentCoursePerformanceRoutingModule","forChild","StudentCoursePerformanceModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n          Back\n        </button>\n        <h3>Exam Score</h3>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-3 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-subject\"\n          name=\"subject\"\n          [selected]=\"subject\"\n          fullWidth\n          placeholder=\"All Subjects\"\n          (selectedChange)=\"onSelectSubject($event)\"\n        >\n          <nb-option value=\"\">All Subjects</nb-option>\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n            subject.subject\n          }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"scores.length > 0; else noScores\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Date</th>\n                  <th>Subject</th>\n                  <th>Title</th>\n                  <th>Score</th>\n                  <th>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let score of scores; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ dateService.formatDate(score.date) }}</td>\n                  <td>{{ score.subject }}</td>\n                  <td>{{ score.examTitle }}</td>\n                  <td>{{ score.marks }}/{{ score.outOfMarks }}</td>\n                  <td>\n                    <span [ngClass]=\"score.marks >= score.passingMarks ? 'pass' : 'fail'\">{{\n                      score.marks >= score.passingMarks ? 'Pass' : 'Fail'\n                    }}</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noScores>\n            <p class=\"text-center pt-5 pb-5\">No Score Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { StudentCoursePerformanceComponent } from './student-course-performance.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StudentCoursePerformanceComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class StudentCoursePerformanceRoutingModule {}\n","import { ExamService } from './../../../../../services/exam.service';\nimport { BatchService } from './../../../../../services/batch.service';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { SubjectModel } from './../../../../../models/course.model';\nimport { AttendanceService } from './../../../../../services/attendance.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { StudentCourseService } from './../../../../../services/student-course.service';\nimport { StudentService } from './../../../../../services/student.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { DateService, Month } from './../../../../../services/shared-services/date.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-student-course-performance',\n  templateUrl: './student-course-performance.component.html',\n  styleUrls: ['./student-course-performance.component.scss'],\n})\nexport class StudentCoursePerformanceComponent implements OnInit {\n  private branchId: string;\n  private categoryId: string;\n  private studentCourseId: string;\n  private studentId: string;\n\n  private studentCourse: StudentCourseModel;\n\n  loading: boolean;\n\n  scores: any[];\n\n  subjects: SubjectModel[];\n  subject: string;\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  constructor(\n    public dateService: DateService,\n    private branchService: BranchService,\n    private batchService: BatchService,\n    private toastrService: NbToastrService,\n    private studentService: StudentService,\n    private studentCourseService: StudentCourseService,\n    private examService: ExamService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    this.categoryId = this.branchService.getCategoryId();\n    this.studentCourseId = this.studentCourseService.getStudentCourseId();\n    this.studentId = this.studentService.getStudentId();\n\n    if (!this.branchId || !this.categoryId || !this.studentCourseId || !this.studentId) {\n      this.back();\n      return;\n    }\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    if (!this.studentCourse) {\n      this.showToastr('top-right', 'danger', 'Student Course Not Found');\n      this.back();\n      return;\n    }\n\n    this.scores = [];\n\n    this.subjects = [];\n    this.subject = '';\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.batchService\n      .getBatchSubjects(this.studentCourse.course, this.studentCourse.batch)\n      .subscribe(\n        (subjects: SubjectModel[]) => {\n          this.subjects = subjects;\n          this.getStudentCourseScore();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.back();\n        },\n      );\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getStudentCourseScore();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n    this.getStudentCourseScore();\n  }\n\n  onSelectSubject(subject: string) {\n    this.subject = subject;\n    this.getStudentCourseScore();\n  }\n\n  getStudentCourseScore() {\n    this.loading = true;\n    this.examService\n      .getStudentCourseScore(\n        this.subject,\n        this.month,\n        this.year,\n        this.studentId,\n        this.studentCourseId,\n      )\n      .subscribe(\n        (scores: any[]) => {\n          this.scores = scores;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.back();\n        },\n      );\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbSelectModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StudentCoursePerformanceRoutingModule } from './student-course-performance-routing.module';\nimport { StudentCoursePerformanceComponent } from './student-course-performance.component';\n\n@NgModule({\n  declarations: [StudentCoursePerformanceComponent],\n  imports: [\n    CommonModule,\n    StudentCoursePerformanceRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class StudentCoursePerformanceModule {}\n"]}