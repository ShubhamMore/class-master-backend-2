{"version":3,"sources":["webpack:///src/app/employee/branch/dashboard/dashboard.component.html","webpack:///src/app/employee/branch/dashboard/dashboard-routing.module.ts","webpack:///src/app/employee/branch/dashboard/dashboard.component.ts","webpack:///src/app/employee/branch/dashboard/dashboard.module.ts"],"names":["routes","path","component","DashboardComponent","branchService","dashboardService","toastrService","storageService","router","route","dateService","budgetService","menuService","themeService","roleService","this","loading","branchId","getBranchId","getEmployeeRole","subscribe","role","upcomingLectures","getEmployeeDashboardData","currentYear","getCurrentYear","year","getBudgetData","themeSubscription","getJsTheme","config","colors","variables","chartjs","options","maintainAspectRatio","responsive","legend","labels","fontColor","textColor","scales","xAxes","gridLines","display","color","axisLineColor","ticks","yAxes","back","branchStorage","totalStorage","convertByteToUnit","totalStorageAssigned","usedStorage","totalStorageUsed","availableStorage","value","toFixed","unit","usedStorageInPercentage","parseInt","getBranchDashboardForEmployee","dashboardInfo","calculateStorage","showMenus","error","showToastr","navigate","relativeTo","queryParams","type","getBudgetForBranchDashboard","toString","budget","setBarChartData","income","expense","i","inc","find","curIncome","_id","push","amount","exp","curExpense","data","datasets","label","backgroundColor","warningLight","dangerLight","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","DashboardRoutingModule","forChild","DashboardModule","ChartModule"],"mappings":"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","file":"x","sourcesContent":["<div class=\"row\" *ngIf=\"!loading && role !== 'teacher'\">\n  <div class=\"col-md-4 col-sm-6 col-12\" *ngIf=\"role === 'manager'\">\n    <nb-card status=\"warning\">\n      <nb-card-header>\n        <button\n          class=\"float-right text-white\"\n          nbButton\n          size=\"small\"\n          outline\n          status=\"warning\"\n          nbTooltip=\"Add Course\"\n          shape=\"round\"\n          (click)=\"addCourse()\"\n        >\n          <nb-icon icon=\"plus\"></nb-icon>\n        </button>\n        <h3 class=\"text-white\"><span class=\"pointer\" (click)=\"manageCourse()\">Course</span></h3>\n      </nb-card-header>\n      <nb-card-body>\n        <nb-actions size=\"giant\" fullWidth>\n          <nb-action>\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <h4 class=\"text-center\">{{ dashboardInfo.activeCourses }}</h4>\n                <h6>Active</h6>\n              </div>\n            </div>\n          </nb-action>\n          <nb-action>\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <h4 class=\"text-center\">{{ dashboardInfo.inactiveCourses }}</h4>\n                <h6>Inactive</h6>\n              </div>\n            </div>\n          </nb-action>\n        </nb-actions>\n      </nb-card-body>\n    </nb-card>\n  </div>\n\n  <div class=\"col-md-4 col-sm-6 col-12\" *ngIf=\"role === 'manager'\">\n    <nb-card status=\"success\">\n      <nb-card-header>\n        <button\n          class=\"float-right text-white\"\n          nbButton\n          size=\"small\"\n          outline\n          status=\"success\"\n          nbTooltip=\"Add Student\"\n          shape=\"round\"\n          (click)=\"addStudent()\"\n        >\n          <nb-icon icon=\"plus\"></nb-icon>\n        </button>\n        <h3 class=\"text-white\"><span class=\"pointer\" (click)=\"manageStudent()\">Student</span></h3>\n      </nb-card-header>\n      <nb-card-body>\n        <nb-actions size=\"giant\" fullWidth>\n          <nb-action>\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <h4 class=\"text-center\">{{ dashboardInfo.activeStudents }}</h4>\n                <h6>Active</h6>\n              </div>\n            </div>\n          </nb-action>\n          <nb-action>\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <h4 class=\"text-center\">{{ dashboardInfo.inactiveStudents }}</h4>\n                <h6>Inactive</h6>\n              </div>\n            </div>\n          </nb-action>\n        </nb-actions>\n      </nb-card-body>\n    </nb-card>\n  </div>\n\n  <div class=\"col-md-4 col-sm-6 col-12\" *ngIf=\"role === 'manager'\">\n    <nb-card status=\"danger\">\n      <nb-card-header>\n        <button\n          class=\"float-right text-white\"\n          nbButton\n          size=\"small\"\n          outline\n          status=\"danger\"\n          nbTooltip=\"Add Employee\"\n          shape=\"round\"\n          (click)=\"addEmployee()\"\n        >\n          <nb-icon icon=\"plus\"></nb-icon>\n        </button>\n        <h3 class=\"text-white\">\n          <span class=\"pointer\" (click)=\"manageEmployee()\">Employee</span>\n        </h3>\n      </nb-card-header>\n      <nb-card-body>\n        <nb-actions size=\"giant\" fullWidth>\n          <nb-action>\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <h4 class=\"text-center\">{{ dashboardInfo.activeEmployees }}</h4>\n                <h6>Active</h6>\n              </div>\n            </div>\n          </nb-action>\n          <nb-action>\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <h4 class=\"text-center\">{{ dashboardInfo.inactiveEmployees }}</h4>\n                <h6>Inactive</h6>\n              </div>\n            </div>\n          </nb-action>\n        </nb-actions>\n      </nb-card-body>\n    </nb-card>\n  </div>\n\n  <div class=\"col-md-5 col-sm-6 col-12\" *ngIf=\"role !== 'teacher'\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <nb-card status=\"info\">\n          <nb-card-header>\n            <button\n              class=\"float-right text-white\"\n              nbButton\n              size=\"small\"\n              outline\n              status=\"info\"\n              nbTooltip=\"Add Lead\"\n              shape=\"round\"\n              (click)=\"addLead()\"\n            >\n              <nb-icon icon=\"plus\"></nb-icon>\n            </button>\n            <h3 class=\"text-white\"><span class=\"pointer\" (click)=\"manageLead()\">Lead</span></h3>\n          </nb-card-header>\n          <nb-card-body>\n            <nb-actions size=\"giant\" fullWidth>\n              <nb-action>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                    <h4 class=\"text-center\">{{ dashboardInfo.wonLeads }}</h4>\n                    <h6>Won</h6>\n                  </div>\n                </div>\n              </nb-action>\n              <nb-action>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                    <h4 class=\"text-center\">{{ dashboardInfo.openLeads }}</h4>\n                    <h6>Open</h6>\n                  </div>\n                </div>\n              </nb-action>\n              <nb-action>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                    <h4 class=\"text-center\">{{ dashboardInfo.lostLeads }}</h4>\n                    <h6>Lost</h6>\n                  </div>\n                </div>\n              </nb-action>\n            </nb-actions>\n          </nb-card-body>\n        </nb-card>\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"role === 'manager'\">\n      <div class=\"col-12\">\n        <nb-card>\n          <nb-card-header>\n            <h3>Branch Storage</h3>\n          </nb-card-header>\n          <nb-card-body>\n            <div class=\"progress-info\">\n              <h4>\n                {{ availableStorage }} <small>left of {{ totalStorage }}</small>\n              </h4>\n              <nb-progress-bar\n                [value]=\"usedStorageInPercentage\"\n                status=\"danger\"\n                [displayValue]=\"true\"\n              >\n                <span *ngIf=\"usedStorageInPercentage >= 25\">&nbsp;Used</span>\n              </nb-progress-bar>\n              <div class=\"caption description\">\n                <bdi>{{ usedStorage }} Used</bdi>\n              </div>\n            </div>\n          </nb-card-body>\n        </nb-card>\n      </div>\n    </div>\n\n    <!-- <div class=\"row\"  *ngIf=\"role === 'manager'\">\n      <div class=\"col-12\">\n        <nb-card status=\"\">\n          <nb-card-header>\n            <button\n              class=\"float-right\"\n              nbButton size=\"small\"  \n              outline\n\n              status=\"danger\"\n              nbTooltip=\"Manage Class Schedule\"\n              shape=\"round\"\n              (click)=\"manageClassSchedule()\"\n            >\n              <nb-icon icon=\"arrow-forward\"></nb-icon>\n            </button>\n            <h3 class=\"\">\n              <span class=\"pointer text-danger\" (click)=\"manageClassSchedule()\"\n                >Manage Class Schedule</span\n              >\n            </h3>\n          </nb-card-header>\n        </nb-card>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <nb-card status=\"\">\n          <nb-card-header>\n            <button\n              class=\"float-right\"\n              nbButton size=\"small\"  \n              outline\n\n              status=\"success\"\n              nbTooltip=\"Manage Reports\"\n              shape=\"round\"\n              (click)=\"manageStudentReports()\"\n            >\n              <nb-icon icon=\"arrow-forward\"></nb-icon>\n            </button>\n            <h3 class=\"\">\n              <span class=\"pointer text-success\" (click)=\"manageStudentReports()\"\n                >Manage Reports</span\n              >\n            </h3>\n          </nb-card-header>\n        </nb-card>\n      </div>\n    </div> -->\n  </div>\n\n  <div class=\"col-md-7 col-sm-6 col-12\" *ngIf=\"role === 'manager'\">\n    <nb-card>\n      <nb-card-header>\n        <div class=\"row\">\n          <div class=\"col-md-8 col-sm-7 col-12\">\n            <h3><span class=\"pointer\" (click)=\"manageBudget()\">Budget</span></h3>\n          </div>\n          <div class=\"col-md-4 col-sm-5 col-12\">\n            <div class=\"btn-group\">\n              <button\n                nbButton\n                size=\"small\"\n                status=\"primary\"\n                nbTooltip=\"Previous Year\"\n                (click)=\"previousYear()\"\n                *ngIf=\"year > 2018\"\n              >\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n              </button>\n              <button type=\"button\" nbButton size=\"small\">\n                <strong>{{ year }}</strong>\n              </button>\n              <button\n                nbButton\n                size=\"small\"\n                status=\"primary\"\n                nbTooltip=\"Next Year\"\n                (click)=\"nextYear()\"\n                *ngIf=\"year < currentYear\"\n              >\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-card-header>\n      <nb-card-body>\n        <chart class=\"bar-chart\" type=\"bar\" [data]=\"data\" [options]=\"options\"></chart>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\" *ngIf=\"role === 'teacher'\">\n  <div class=\"col-12\">\n    <nb-card>\n      <nb-card-header>\n        <h3>Upcoming Lectures</h3>\n      </nb-card-header>\n      <nb-card-body>\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"upcomingLectures.length > 0; else noUpcomingLectures\"\n          >\n            <table class=\"table table-sm\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Date</th>\n                  <th>Time</th>\n                  <th>Category</th>\n                  <th>Course/Batch</th>\n                  <th>Subject</th>\n                  <th>Teacher</th>\n                  <th>Topic</th>\n                  <th>Session Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let lecture of upcomingLectures; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ dateService.formatDate(lecture.date) }}</td>\n                  <td>{{ getTime(lecture.startTime, lecture.endTime) }}</td>\n                  <td>{{ lecture.categoryName }}</td>\n                  <td>{{ lecture.courseName }}/{{ lecture.batchName }}</td>\n                  <td>{{ lecture.subjectName }}</td>\n                  <td>{{ lecture.teacherName }}</td>\n                  <td>{{ lecture.topic }}</td>\n                  <td>{{ lecture.sessionType | uppercase }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">Loading...</p>\n</ng-template>\n\n<ng-template #noUpcomingLectures>\n  <p class=\"pt-5 pb-5 text-center\">No Upcoming Lectures</p>\n</ng-template>\n","import { DashboardComponent } from './dashboard.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n","import { MenuService } from './../../menu.service';\nimport { BranchStorageModel } from '../../../models/branch-storage.model';\nimport { StorageService } from './../../../services/shared-services/storage.service';\nimport { BudgetService } from './../../../services/budget.service';\nimport { DateService } from './../../../services/shared-services/date.service';\nimport { NbToastrService, NbThemeService } from '@nebular/theme';\nimport { DashboardService } from './../../../services/dashboard.service';\nimport { BranchService } from './../../../services/branch.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { RoleService } from './../../../services/role.service';\n\ninterface DashboardInfo {\n  openLeads: number;\n  lostLeads: number;\n  wonLeads: number;\n  branchStorage?: BranchStorageModel;\n  activeCourses?: number;\n  inactiveCourses?: number;\n  activeStudents?: number;\n  inactiveStudents?: number;\n  activeEmployees?: number;\n  inactiveEmployees?: number;\n}\n\ninterface Budget {\n  income: { _id: number; amount: number }[];\n  expense: { _id: number; amount: number }[];\n}\n\n@Component({\n  selector: 'ngx-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n  dashboardInfo: DashboardInfo;\n  upcomingLectures: any[];\n\n  role: string;\n\n  currentYear: number;\n  year: number;\n\n  data: any;\n  options: any;\n  themeSubscription: any;\n  colors: any;\n\n  totalStorage: string;\n  usedStorage: string;\n  availableStorage: string;\n  usedStorageInPercentage: number;\n\n  constructor(\n    private branchService: BranchService,\n    private dashboardService: DashboardService,\n    private toastrService: NbToastrService,\n    private storageService: StorageService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public dateService: DateService,\n    public budgetService: BudgetService,\n    private menuService: MenuService,\n    private themeService: NbThemeService,\n    private roleService: RoleService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.roleService.getEmployeeRole().subscribe((role: string) => {\n      this.role = role;\n    });\n\n    this.upcomingLectures = [];\n\n    this.getEmployeeDashboardData();\n\n    if (this.role === 'manager') {\n      this.currentYear = +this.dateService.getCurrentYear();\n      this.year = +this.dateService.getCurrentYear();\n\n      this.getBudgetData();\n\n      this.themeSubscription = this.themeService.getJsTheme().subscribe((config: any) => {\n        this.colors = config.variables;\n        const chartjs: any = config.variables.chartjs;\n\n        this.options = {\n          maintainAspectRatio: false,\n          responsive: true,\n          legend: {\n            labels: {\n              fontColor: chartjs.textColor,\n            },\n          },\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  display: false,\n                  color: chartjs.axisLineColor,\n                },\n                ticks: {\n                  fontColor: chartjs.textColor,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  display: true,\n                  color: chartjs.axisLineColor,\n                },\n                ticks: {\n                  fontColor: chartjs.textColor,\n                },\n              },\n            ],\n          },\n        };\n      });\n    }\n  }\n\n  calculateStorage(branchStorage: BranchStorageModel) {\n    const totalStorage: any = this.storageService.convertByteToUnit(\n      branchStorage.totalStorageAssigned,\n    );\n    const usedStorage: any = this.storageService.convertByteToUnit(branchStorage.totalStorageUsed);\n\n    const availableStorage: any = this.storageService.convertByteToUnit(\n      branchStorage.totalStorageAssigned - branchStorage.totalStorageUsed,\n    );\n\n    this.totalStorage = totalStorage.value.toFixed(1) + ' ' + totalStorage.unit;\n    this.usedStorage = usedStorage.value.toFixed(1) + ' ' + usedStorage.unit;\n    this.availableStorage = availableStorage.value.toFixed(1) + ' ' + availableStorage.unit;\n\n    // tslint:disable-next-line: radix\n    this.usedStorageInPercentage = parseInt(\n      ((branchStorage.totalStorageUsed * 100) / branchStorage.totalStorageAssigned).toFixed(1),\n    );\n  }\n\n  getEmployeeDashboardData() {\n    this.dashboardService.getBranchDashboardForEmployee(this.branchId, this.role).subscribe(\n      (dashboardInfo: DashboardInfo | any[]) => {\n        if (this.role === 'manager') {\n          this.dashboardInfo = <DashboardInfo>dashboardInfo;\n          this.calculateStorage(this.dashboardInfo.branchStorage);\n        } else if (this.role === 'teacher') {\n          this.upcomingLectures = <any[]>dashboardInfo;\n        } else {\n          this.dashboardInfo = <DashboardInfo>dashboardInfo;\n        }\n        this.menuService.showMenus();\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.router.navigate(['../../'], { relativeTo: this.route });\n      },\n    );\n  }\n\n  addStudent() {\n    this.router.navigate(['../student/add'], { relativeTo: this.route });\n  }\n\n  manageStudent() {\n    this.router.navigate(['../student'], {\n      relativeTo: this.route,\n      queryParams: { type: 'active' },\n    });\n  }\n\n  addEmployee() {\n    this.router.navigate(['../employee/add'], { relativeTo: this.route });\n  }\n\n  manageEmployee() {\n    this.router.navigate(['../employee'], {\n      relativeTo: this.route,\n      queryParams: { type: 'active' },\n    });\n  }\n\n  addCourse() {\n    this.router.navigate(['../manage-branch/course/add'], { relativeTo: this.route });\n  }\n\n  manageCourse() {\n    this.router.navigate(['../manage-branch/course'], { relativeTo: this.route });\n  }\n\n  addLead() {\n    this.router.navigate(['../lead/add'], { relativeTo: this.route });\n  }\n\n  manageLead() {\n    this.router.navigate(['../lead'], { relativeTo: this.route, queryParams: { type: 'active' } });\n  }\n\n  manageBudget() {\n    this.router.navigate(['../budget'], { relativeTo: this.route });\n  }\n\n  manageClassSchedule() {\n    this.router.navigate(['../schedule'], { relativeTo: this.route });\n  }\n\n  manageStudentReports() {\n    this.router.navigate(['../students-report'], { relativeTo: this.route });\n  }\n\n  previousYear() {\n    if (this.year >= 2018) {\n      this.year--;\n      this.getBudgetData();\n    }\n  }\n\n  nextYear() {\n    if (this.year <= this.currentYear) {\n      this.year++;\n      this.getBudgetData();\n    }\n  }\n\n  getBudgetData() {\n    this.budgetService.getBudgetForBranchDashboard(this.branchId, this.year.toString()).subscribe(\n      (budget: Budget) => {\n        this.setBarChartData(budget);\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n      },\n    );\n  }\n\n  setBarChartData(budget: Budget) {\n    const income: number[] = [];\n    const expense: number[] = [];\n\n    for (let i = 0; i < 12; i++) {\n      // Income\n      const inc = budget.income.find((curIncome: any) => curIncome._id === i + 1);\n      if (inc) {\n        income.push(inc.amount);\n      } else {\n        income.push(0);\n      }\n\n      // Expense\n      const exp = budget.expense.find((curExpense: any) => curExpense._id === i + 1);\n      if (exp) {\n        expense.push(exp.amount);\n      } else {\n        expense.push(0);\n      }\n    }\n\n    this.data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      datasets: [\n        {\n          data: income,\n          label: 'Income',\n          backgroundColor: this.colors.warningLight,\n        },\n        {\n          data: expense,\n          label: 'Expense',\n          backgroundColor: this.colors.dangerLight,\n        },\n      ],\n    };\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ChartModule } from 'angular2-chartjs';\n\nimport {\n  NbCardModule,\n  NbActionsModule,\n  NbButtonModule,\n  NbTooltipModule,\n  NbIconModule,\n  NbProgressBarModule,\n} from '@nebular/theme';\nimport { DashboardComponent } from './dashboard.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DashboardRoutingModule } from './dashboard-routing.module';\n\n@NgModule({\n  declarations: [DashboardComponent],\n  imports: [\n    CommonModule,\n    NbActionsModule,\n    ChartModule,\n    DashboardRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n    NbProgressBarModule,\n  ],\n})\nexport class DashboardModule {}\n"]}