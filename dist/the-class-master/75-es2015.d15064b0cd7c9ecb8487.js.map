{"version":3,"sources":["webpack:///src/app/employee/branch/assignment/batch-assignment/batch-assignment.component.html","webpack:///src/app/employee/branch/assignment/batch-assignment/batch-assignment-routing.module.ts","webpack:///src/app/employee/branch/assignment/batch-assignment/batch-assignment.component.ts","webpack:///src/app/employee/branch/assignment/batch-assignment/batch-assignment.module.ts"],"names":["routes","path","component","BatchAssignmentComponent","branchService","dateService","courseService","batchService","toastrService","router","route","this","loading","branchId","getBranchId","categories","courses","myCourses","batches","category","course","getCategories","getCourses","back","getBranchData","subscribe","branch","getBatches","getBranch","setBranchData","error","showToastr","getCoursesData","filter","basicDetails","batch","setBatchId","_id","setBatchData","setCourseId","myCourse","find","curCourse","setCourseData","setCategoryId","myCategory","curCategory","setCategoryData","navigate","relativeTo","categoryId","courseId","courseName","position","status","message","show","onSelectCategory","onSelectCourse","loadChildren","then","m","PageNotFoundModule","redirectTo","BatchAssignmentRoutingModule","forChild","BatchAssignmentModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-6 col-sm-4\">\n        <h3>Assignments</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-category\"\n          name=\"category\"\n          [selected]=\"category\"\n          fullWidth\n          placeholder=\"Select Category\"\n          (selectedChange)=\"onSelectCategory($event)\"\n        >\n          <nb-option value=\"\">All Categories</nb-option>\n          <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n            category.category\n          }}</nb-option>\n        </nb-select>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-course\"\n          name=\"course\"\n          [selected]=\"course\"\n          fullWidth\n          placeholder=\"Select Course\"\n          (selectedChange)=\"onSelectCourse($event)\"\n        >\n          <nb-option value=\"\">All Courses</nb-option>\n          <nb-option *ngFor=\"let course of myCourses\" [value]=\"course._id\">{{\n            course.basicDetails.courseName\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"batches.length > 0; else noBatches\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Category</th>\n                  <th>Course</th>\n                  <th>Start Date</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let batch of batches; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ batch.basicDetails.batchName }}</td>\n                  <td>{{ getCategory(batch.category) }}</td>\n                  <td>{{ getCourse(batch.course) }}</td>\n                  <td>{{ dateService.formatDate(batch.basicDetails.startDate) }}</td>\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"primary\"\n                      (click)=\"manageAssignment(batch)\"\n                    >\n                      Manage Assignment\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBatches>\n            <p class=\"text-center pt-5 pb-5\">No Batches Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BatchAssignmentComponent } from './batch-assignment.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BatchAssignmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BatchAssignmentRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\nimport { BatchService } from './../../../../services/batch.service';\nimport { CourseService } from './../../../../services/course.service';\nimport { BatchModel } from './../../../../models/batch.model';\nimport { CourseModel, SubjectModel } from './../../../../models/course.model';\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\nimport { Component, OnInit } from '@angular/core';\nimport { BranchService } from './../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NbToastrService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-batch-assignment',\n  templateUrl: './batch-assignment.component.html',\n  styleUrls: ['./batch-assignment.component.scss'],\n})\nexport class BatchAssignmentComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  categories: CategoryModel[];\n  category: string;\n  courses: CourseModel[];\n  myCourses: CourseModel[];\n  course: string;\n  batches: BatchModel[];\n\n  constructor(\n    private branchService: BranchService,\n    public dateService: DateService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n\n      return;\n    }\n    this.categories = [];\n    this.courses = [];\n    this.myCourses = [];\n    this.batches = [];\n\n    this.category = '';\n    this.course = '';\n\n    this.getCategories();\n    this.getCourses();\n  }\n\n  private getCategories() {\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\n      if (branch) {\n        this.categories = branch.categories;\n      }\n    });\n\n    if (!this.categories) {\n      this.branchService.getBranch(this.branchId).subscribe(\n        (branch: BranchModel) => {\n          this.branchService.setBranchData(branch);\n          this.categories = branch.categories;\n          this.getBatches(this.category, this.course);\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          // this.loading = false;\n        },\n      );\n    } else {\n      this.getBatches(this.category, this.course);\n    }\n  }\n\n  private getCourses() {\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\n      this.courses = courses;\n    });\n  }\n\n  onSelectCategory(category: string) {\n    this.category = category;\n    this.course = '';\n    this.myCourses = this.courses.filter(\n      (course: CourseModel) => course.basicDetails.category === category,\n    );\n    this.getBatches(this.category, this.course);\n  }\n\n  onSelectCourse(course: string) {\n    this.course = course;\n    this.getBatches(this.category, this.course);\n  }\n\n  getBatches(category: string, course: string) {\n    this.loading = true;\n    this.batchService.getBatches(this.branchId, category, course).subscribe(\n      (batches: BatchModel[]) => {\n        this.batches = batches;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  manageAssignment(batch: BatchModel) {\n    this.batchService.setBatchId(batch._id);\n    this.batchService.setBatchData(batch);\n\n    this.courseService.setCourseId(batch.course);\n    const myCourse = this.courses.find((curCourse: CourseModel) => curCourse._id === batch.course);\n    this.courseService.setCourseData(myCourse);\n\n    this.branchService.setCategoryId(batch.category);\n    const myCategory = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === batch.category,\n    );\n    this.branchService.setCategoryData(myCategory);\n\n    this.router.navigate(['../manage'], { relativeTo: this.route });\n  }\n\n  getCategory(categoryId: string) {\n    const category = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\n    );\n\n    if (category) {\n      return category.category;\n    }\n\n    return '--';\n  }\n\n  getCourse(courseId: string) {\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\n\n    if (course) {\n      return course.basicDetails.courseName;\n    }\n\n    return '--';\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import {\n  NbCardModule,\n  NbTooltipModule,\n  NbIconModule,\n  NbButtonModule,\n  NbInputModule,\n  NbAccordionModule,\n  NbFormFieldModule,\n  NbSelectModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BatchAssignmentRoutingModule } from './batch-assignment-routing.module';\nimport { BatchAssignmentComponent } from './batch-assignment.component';\n\n@NgModule({\n  declarations: [BatchAssignmentComponent],\n  imports: [\n    CommonModule,\n    BatchAssignmentRoutingModule,\n\n    NbCardModule,\n    NbTooltipModule,\n    NbIconModule,\n    NbButtonModule,\n    NbInputModule,\n    NbAccordionModule,\n    NbFormFieldModule,\n    NbSelectModule,\n  ],\n})\nexport class BatchAssignmentModule {}\n"]}