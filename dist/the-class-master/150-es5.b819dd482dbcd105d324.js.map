{"version":3,"sources":["webpack:///src/app/institute/branch/assignment/assignment-submission/submission-grading/submission-grading.component.html","webpack:///src/app/institute/branch/assignment/assignment-submission/submission-grading/submission-grading-routing.module.ts","webpack:///src/app/institute/branch/assignment/assignment-submission/submission-grading/submission-grading.component.ts","webpack:///src/app/institute/branch/assignment/assignment-submission/submission-grading/submission-grading.module.ts"],"names":["SubmissionGradingComponent","SubmissionGradingModule","SubmissionGradingRoutingModule","routes","path","component","branchService","assignmentSubmissionService","assignmentService","dateService","router","route","toastrService","this","loading","submit","branchId","getBranchId","getAssignmentData","subscribe","assignment","showToastr","back","getAssignmentSubmissionData","assignmentSubmission","assignmentSubmissionForm","grades","validators","required","min","max","totalGrades","remark","markAllAsTouched","invalid","submissionGrades","_id","value","saveAssignmentSubmissionGrades","res","error","position","status","message","show","navigate","relativeTo","deleteAssignmentSubmissionData","loadChildren","then","m","PageNotFoundModule","redirectTo","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div>\n      <strong>Assignment : </strong>\n      <span>{{ assignment.topic }}</span>\n      <br />\n      <strong>Submission Date : </strong>\n      <span>{{ dateService.formatDate(assignment.submissionDate) }}</span>\n      <br />\n      <strong>Description : </strong>\n      <br />\n      <span class=\"pl-3\">{{ assignment.description }}</span>\n    </div>\n  </nb-card-header>\n  <nb-card-body>\n    <form\n      (submit)=\"saveGrades()\"\n      [formGroup]=\"assignmentSubmissionForm\"\n      *ngIf=\"!loading; else loadingData\"\n    >\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <p>\n            <strong>Description : </strong>\n            <br />\n            <span>{{ assignmentSubmission.description }}</span>\n          </p>\n        </div>\n        <div class=\"col-md-6\">\n          <p>\n            <strong>Submitted On : </strong\n            >{{ dateService.millisecondsToDate(assignmentSubmission.createdAt) }}\n          </p>\n          <strong>Attachment : </strong>\n          <a\n            [href]=\"assignmentSubmission.secureUrl\"\n            target=\"_blank\"\n            download=\"{{ assignmentSubmission.studentName + '-' + assignmentSubmission.fileName }}\"\n          >\n            {{ assignmentSubmission.fileName }}\n          </a>\n        </div>\n\n        <div class=\"col-md-6\">\n          <div class=\"form-control-group\">\n            <label class=\"label\" for=\"input-submission-grades\">Grades:</label>\n            <input\n              type=\"number\"\n              nbInput\n              id=\"input-submission-grades\"\n              name=\"grades\"\n              formControlName=\"grades\"\n              min=\"0\"\n              [max]=\"assignment.totalGrades\"\n              fullWidth\n              [status]=\"\n                assignmentSubmissionForm.get('grades').touched\n                  ? assignmentSubmissionForm.get('grades').invalid\n                    ? 'danger'\n                    : 'success'\n                  : 'basic'\n              \"\n              [placeholder]=\"assignment.totalGrades\"\n            />\n            <ng-container\n              *ngIf=\"\n                assignmentSubmissionForm.get('grades').invalid &&\n                assignmentSubmissionForm.get('grades').touched\n              \"\n            >\n              <p\n                class=\"caption status-danger\"\n                *ngIf=\"assignmentSubmissionForm.get('grades').errors?.required\"\n              >\n                Assignment Grades are required!\n              </p>\n              <p\n                class=\"caption status-danger\"\n                *ngIf=\"assignmentSubmissionForm.get('totalGrades').errors?.min\"\n              >\n                Assignment Total Grades Should be more than equal to 0\n              </p>\n              <p\n                class=\"caption status-danger\"\n                *ngIf=\"assignmentSubmissionForm.get('totalGrades').errors?.max\"\n              >\n                Assignment Total Grades Should be less than equal to {{ assignment.totalGrades }}\n              </p>\n            </ng-container>\n          </div>\n        </div>\n\n        <div class=\"col-md-12\">\n          <div class=\"form-control-group\">\n            <label class=\"label\" for=\"input-submission-remark\">Remark:</label>\n            <textarea\n              type=\"text\"\n              nbInput\n              id=\"input-submission-remark\"\n              name=\"remark\"\n              rows=\"2\"\n              formControlName=\"remark\"\n              placeholder=\"Remark\"\n              fullWidth\n              [status]=\"\n                assignmentSubmissionForm.get('remark').touched\n                  ? assignmentSubmissionForm.get('remark').invalid\n                    ? 'danger'\n                    : 'success'\n                  : 'basic'\n              \"\n            ></textarea>\n            <ng-container\n              *ngIf=\"\n                assignmentSubmissionForm.get('remark').invalid &&\n                assignmentSubmissionForm.get('remark').touched\n              \"\n            >\n              <p\n                class=\"caption status-danger\"\n                *ngIf=\"assignmentSubmissionForm.get('remark').errors?.required\"\n              >\n                Assignment Remark is required!\n              </p>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <button\n            type=\"submit\"\n            class=\"float-right\"\n            nbButton\n            size=\"small\"\n            status=\"primary\"\n            [disabled]=\"submit\"\n            [nbSpinner]=\"submit\"\n            nbSpinnerStatus=\"primary\"\n            nbSpinnerSize=\"small\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </form>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">Loading...</p>\n</ng-template>\n","import { SubmissionGradingComponent } from './submission-grading.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SubmissionGradingComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SubmissionGradingRoutingModule {}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AssignmentSubmissionModel } from './../../../../../models/assignment-submission.model';\nimport { AssignmentSubmissionService } from './../../../../../services/assignment-submission.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DateService } from './../../../../../services/shared-services/date.service';\nimport { AssignmentService } from './../../../../../services/assignment.service';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { AssignmentModel } from './../../../../../models/assignment.model';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'ngx-submission-grading',\n  templateUrl: './submission-grading.component.html',\n  styleUrls: ['./submission-grading.component.scss'],\n})\nexport class SubmissionGradingComponent implements OnInit, OnDestroy {\n  loading: boolean;\n  submit: boolean;\n\n  branchId: string;\n\n  assignment: AssignmentModel;\n  assignmentSubmission: AssignmentSubmissionModel;\n\n  assignmentSubmissionForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private assignmentSubmissionService: AssignmentSubmissionService,\n    private assignmentService: AssignmentService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastrService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.assignmentService.getAssignmentData().subscribe((assignment: AssignmentModel) => {\n      this.assignment = assignment;\n\n      if (!assignment) {\n        this.showToastr('top-right', 'danger', 'Assignment Not Found');\n        this.back();\n        return;\n      }\n\n      this.assignmentSubmissionService\n        .getAssignmentSubmissionData()\n        .subscribe((assignmentSubmission: AssignmentSubmissionModel) => {\n          this.assignmentSubmission = assignmentSubmission;\n\n          if (!assignmentSubmission) {\n            this.back();\n            return;\n          }\n\n          this.assignmentSubmissionForm = new FormGroup({\n            grades: new FormControl(assignmentSubmission.grades, {\n              validators: [\n                Validators.required,\n                Validators.min(0),\n                Validators.max(+assignment.totalGrades),\n              ],\n            }),\n            remark: new FormControl(assignmentSubmission.remark, {\n              validators: [Validators.required],\n            }),\n          });\n\n          this.loading = false;\n        });\n    });\n  }\n\n  saveGrades() {\n    this.assignmentSubmissionForm.markAllAsTouched();\n\n    if (this.assignmentSubmissionForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All grading Fields are required');\n      return;\n    }\n    this.submit = true;\n\n    const submissionGrades = {\n      _id: this.assignmentSubmission._id,\n      ...this.assignmentSubmissionForm.value,\n    };\n\n    this.assignmentSubmissionService.saveAssignmentSubmissionGrades(submissionGrades).subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', 'Grades Updated Successfully');\n        this.back();\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.submit = false;\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  ngOnDestroy() {\n    this.assignmentSubmissionService.deleteAssignmentSubmissionData();\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbInputModule,\n} from '@nebular/theme';\nimport { SubmissionGradingComponent } from './submission-grading.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SubmissionGradingRoutingModule } from './submission-grading-routing.module';\n\n@NgModule({\n  declarations: [SubmissionGradingComponent],\n  imports: [\n    CommonModule,\n    SubmissionGradingRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n    NbSpinnerModule,\n    NbInputModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class SubmissionGradingModule {}\n"]}