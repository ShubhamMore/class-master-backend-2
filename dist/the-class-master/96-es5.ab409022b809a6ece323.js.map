{"version":3,"sources":["webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test.component.html","webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test-routing.module.ts","webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test.component.ts","webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test.module.ts"],"names":["ManageBatchTestComponent","ManageBatchTestModule","ManageBatchTestRoutingModule","routes","path","component","branchService","courseService","batchService","toastrService","dateService","examService","router","route","this","loading","branchId","getBranchId","getCategoryData","subscribe","category","getCourseData","course","getBatchData","batch","subjects","subject","forEach","curSubject","mySubject","find","_id","push","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getExams","navigate","relativeTo","exams","error","showToastr","exam","setExamData","setExamId","queryParams","mode","i","deleteExam","res","splice","status","position","message","show","addExam","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>Classroom Exams</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <button nbButton size=\"small\" fullWidth status=\"primary\" (click)=\"addExam()\">\n          Add Exam <nb-icon icon=\"plus-circle-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-3 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-subject\"\n          name=\"subject\"\n          [selected]=\"subject\"\n          fullWidth\n          placeholder=\"All Subjects\"\n          (selectedChange)=\"onSelectSubject($event)\"\n        >\n          <nb-option value=\"\">All Subjects</nb-option>\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n            subject.subject\n          }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"exams.length > 0; else noBatches\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Title</th>\n                  <th>Date</th>\n                  <th>Category</th>\n                  <th>Course</th>\n                  <th colspan=\"4\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let exam of exams; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ exam.examTitle }}</td>\n                  <td>{{ dateService.formatDate(exam.date) }}</td>\n                  <td>{{ category.category }}</td>\n                  <td>{{ course.basicDetails.courseName }}</td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"primary\" (click)=\"editExam(exam)\">\n                      Edit\n                    </button>\n                  </td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"warning\" (click)=\"addExamScore(exam)\">\n                      Score\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      [status]=\"exam.status ? 'success' : 'danger'\"\n                      (click)=\"changeExamStatus(exam._id, !exam.status, i)\"\n                    >\n                      {{ exam.status ? 'Inactive' : 'Active' }}\n                    </button>\n                  </td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"danger\" (click)=\"deleteExam(exam._id, i)\">\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBatches>\n            <p class=\"text-center pt-5 pb-5\">No Exams Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ManageBatchTestComponent } from './manage-batch-test.component';\n\nconst routes: Routes = [\n  { path: '', component: ManageBatchTestComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageBatchTestRoutingModule {}\n","import { DateService, Month } from './../../../../../../services/shared-services/date.service';\nimport { CategoryModel } from './../../../../../../models/branch.model';\nimport { CourseService } from './../../../../../../services/course.service';\nimport { BatchService } from './../../../../../../services/batch.service';\nimport { BatchModel } from './../../../../../../models/batch.model';\nimport { CourseModel, SubjectModel } from './../../../../../../models/course.model';\nimport { ExamService } from './../../../../../../services/exam.service';\nimport { ExamModel } from './../../../../../../models/exam.model';\nimport { Component, OnInit } from '@angular/core';\nimport { BranchService } from './../../../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NbToastrService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-manage-batch-test',\n  templateUrl: './manage-batch-test.component.html',\n  styleUrls: ['./manage-batch-test.component.scss'],\n})\nexport class ManageBatchTestComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n  exams: ExamModel[];\n\n  category: CategoryModel;\n  course: CourseModel;\n  batch: BatchModel;\n\n  subjects: SubjectModel[];\n  subject: string;\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    private toastrService: NbToastrService,\n    public dateService: DateService,\n    private examService: ExamService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.subjects = [];\n    this.subject = '';\n    this.batch.subjects.forEach((curSubject: any) => {\n      const mySubject = this.course.subjects.find(\n        (subject: SubjectModel) => subject._id === curSubject.subject,\n      );\n      this.subjects.push(mySubject);\n    });\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.getExams();\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getExams();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n    this.getExams();\n  }\n\n  onSelectSubject(subject: string) {\n    this.subject = subject;\n    this.getExams();\n  }\n\n  getExams() {\n    this.loading = true;\n\n    this.examService\n      .getExams(\n        this.branchId,\n        this.category._id,\n        this.course._id,\n        this.batch._id,\n        this.subject,\n        this.month,\n        this.year,\n      )\n      .subscribe(\n        (exams: ExamModel[]) => {\n          this.exams = exams;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n  }\n\n  addExam() {\n    this.router.navigate(['../add'], { relativeTo: this.route });\n  }\n\n  addExamScore(exam: ExamModel) {\n    this.examService.setExamData(exam);\n    this.router.navigate(['../score'], { relativeTo: this.route });\n  }\n\n  editExam(exam: ExamModel) {\n    this.examService.setExamId(exam._id);\n    this.examService.setExamData(exam);\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\n  }\n\n  deleteExam(exam: string, i: number) {\n    this.loading = true;\n    this.examService.deleteExam(exam).subscribe(\n      (res: any) => {\n        this.exams.splice(i, 1);\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  changeExamStatus(exam: string, status: boolean, i: number) {\n    // this.loading = true\n    // this.examService.changeExamStatus(exam, status).subscribe(\n    //   (res: any) => {\n    //     this.exams[i].status = status;\n    //     this.loading = false\n    //   },\n    //   (error: any) => {\n    //     this.showToastr('top-right', 'danger', error);\n    //     this.loading = false;\n    //   },\n    // );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbSelectModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageBatchTestRoutingModule } from './manage-batch-test-routing.module';\nimport { ManageBatchTestComponent } from './manage-batch-test.component';\n\n@NgModule({\n  declarations: [ManageBatchTestComponent],\n  imports: [\n    CommonModule,\n    ManageBatchTestRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class ManageBatchTestModule {}\n"]}