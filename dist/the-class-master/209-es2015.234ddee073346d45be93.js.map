{"version":3,"sources":["webpack:///src/app/institute/branch/student/student-course/student-course-attendance/student-course-attendance.component.html","webpack:///src/app/institute/branch/student/student-course/student-course-attendance/student-course-attendance-routing.module.ts","webpack:///src/app/institute/branch/student/student-course/student-course-attendance/student-course-attendance.component.ts","webpack:///src/app/institute/branch/student/student-course/student-course-attendance/student-course-attendance.module.ts"],"names":["routes","path","component","StudentCourseAttendanceComponent","dateService","branchService","batchService","toastrService","studentService","studentCourseService","attendanceService","router","route","this","loading","branchId","getBranchId","categoryId","getCategoryId","studentCourseId","getStudentCourseId","studentId","getStudentId","getStudentCourseData","subscribe","studentCourse","showToastr","back","attendance","subjects","subject","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","totalLectures","totalPresent","totalAbsent","attendancePercentage","getBatchSubjects","course","batch","getStudentCourseAttendance","error","calculateAttendance","forEach","atten","toFixed","navigate","relativeTo","position","status","message","show","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","StudentCourseAttendanceRoutingModule","forChild","StudentCourseAttendanceModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n          Back\n        </button>\n        <h3>Attendance</h3>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-3 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-subject\"\n          name=\"subject\"\n          [selected]=\"subject\"\n          fullWidth\n          placeholder=\"All Subjects\"\n          (selectedChange)=\"onSelectSubject($event)\"\n        >\n          <nb-option value=\"\">All Subjects</nb-option>\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n            subject.subject\n          }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-10 col-12 mx-auto\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Total Lectures: </strong>{{ totalLectures }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Attendance Percentage: </strong>{{ attendancePercentage }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Total Present: </strong>{{ totalPresent }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Total Absent: </strong>{{ totalAbsent }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <br />\n    <br />\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"attendance.length > 0; else noAttendance\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Date</th>\n                  <th>Subject</th>\n                  <th>Topic</th>\n                  <th>Attendance</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let atten of attendance; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ dateService.formatDate(atten.date) }}</td>\n                  <td>{{ atten.subject }}</td>\n                  <td>{{ atten.topic }}</td>\n                  <td>\n                    <span [ngClass]=\"atten.attendance ? 'present' : 'absent'\">{{\n                      atten.attendance ? 'Present' : 'Absent'\n                    }}</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noAttendance>\n            <p class=\"text-center pt-5 pb-5\">No Attendance Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { StudentCourseAttendanceComponent } from './student-course-attendance.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StudentCourseAttendanceComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class StudentCourseAttendanceRoutingModule {}\n","import { BatchService } from './../../../../../services/batch.service';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { SubjectModel } from './../../../../../models/course.model';\nimport { AttendanceService } from './../../../../../services/attendance.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { StudentCourseService } from './../../../../../services/student-course.service';\nimport { StudentService } from './../../../../../services/student.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { DateService, Month } from './../../../../../services/shared-services/date.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-student-course-attendance',\n  templateUrl: './student-course-attendance.component.html',\n  styleUrls: ['./student-course-attendance.component.scss'],\n})\nexport class StudentCourseAttendanceComponent implements OnInit {\n  private branchId: string;\n  private categoryId: string;\n  private studentCourseId: string;\n  private studentId: string;\n\n  private studentCourse: StudentCourseModel;\n\n  loading: boolean;\n\n  attendance: any[];\n\n  subjects: SubjectModel[];\n  subject: string;\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  totalLectures: number;\n  totalPresent: number;\n  totalAbsent: number;\n  attendancePercentage: string;\n\n  constructor(\n    public dateService: DateService,\n    private branchService: BranchService,\n    private batchService: BatchService,\n    private toastrService: NbToastrService,\n    private studentService: StudentService,\n    private studentCourseService: StudentCourseService,\n    private attendanceService: AttendanceService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    this.categoryId = this.branchService.getCategoryId();\n    this.studentCourseId = this.studentCourseService.getStudentCourseId();\n    this.studentId = this.studentService.getStudentId();\n\n    if (!this.branchId || !this.categoryId || !this.studentCourseId || !this.studentId) {\n      this.back();\n      return;\n    }\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    if (!this.studentCourse) {\n      this.showToastr('top-right', 'danger', 'Student Course Not Found');\n      this.back();\n      return;\n    }\n\n    this.attendance = [];\n\n    this.subjects = [];\n    this.subject = '';\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.totalLectures = 0;\n    this.totalPresent = 0;\n    this.totalAbsent = 0;\n    this.attendancePercentage = '--';\n\n    this.batchService\n      .getBatchSubjects(this.studentCourse.course, this.studentCourse.batch)\n      .subscribe(\n        (subjects: SubjectModel[]) => {\n          this.subjects = subjects;\n          this.getStudentCourseAttendance();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.back();\n        },\n      );\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getStudentCourseAttendance();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n    this.getStudentCourseAttendance();\n  }\n\n  onSelectSubject(subject: string) {\n    this.subject = subject;\n    this.getStudentCourseAttendance();\n  }\n\n  getStudentCourseAttendance() {\n    this.loading = true;\n    this.attendanceService\n      .getStudentCourseAttendance(\n        this.subject,\n        this.month,\n        this.year,\n        this.studentId,\n        this.studentCourseId,\n      )\n      .subscribe(\n        (attendance: any[]) => {\n          this.attendance = attendance;\n          this.calculateAttendance(attendance.length);\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.back();\n        },\n      );\n  }\n\n  calculateAttendance(totalLectures: number) {\n    let totalPresent = 0;\n    let totalAbsent = 0;\n\n    this.attendance.forEach((atten: any) => {\n      if (atten.attendance) {\n        totalPresent++;\n      } else {\n        totalAbsent++;\n      }\n    });\n\n    this.totalLectures = totalLectures;\n    this.totalPresent = totalPresent;\n    this.totalAbsent = totalAbsent;\n\n    let attendancePercentage: number;\n\n    if (totalLectures > 0) {\n      attendancePercentage = (totalPresent * 100) / totalLectures;\n    }\n\n    if (attendancePercentage) {\n      this.attendancePercentage = attendancePercentage.toFixed(2).toString() + '%';\n    } else {\n      this.attendancePercentage = '--';\n    }\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbSelectModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StudentCourseAttendanceRoutingModule } from './student-course-attendance-routing.module';\nimport { StudentCourseAttendanceComponent } from './student-course-attendance.component';\n\n@NgModule({\n  declarations: [StudentCourseAttendanceComponent],\n  imports: [\n    CommonModule,\n    StudentCourseAttendanceRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class StudentCourseAttendanceModule {}\n"]}