{"version":3,"sources":["webpack:///src/app/admin/settings/settings.component.html","webpack:///src/app/admin/settings/settings-routing.module.ts","webpack:///src/app/admin/settings/settings.component.ts","webpack:///src/app/admin/settings/settings.module.ts"],"names":["SettingsComponent","SettingsModule","SettingsRoutingModule","routes","path","component","router","route","toastrService","adminZoomService","this","loading","zoomShowSecret","zoomKeysForm","accessToken","validators","required","secretToken","getAdminZoomKeys","subscribe","zoomKeys","patchValue","accessKey","secretKey","error","showToastr","markAllAsTouched","invalid","saveAdminZoomKeys","value","res","getAdminZoomAuthLink","responce","window","open","authLink","position","status","message","show","navigate","relativeTo","back","saveZoomKeys","toggleShowZoomSecret","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"ghBAqCkB,wCAIE,4DACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,qK,sBAkDF,wCAIE,4DACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,qKCvFpB,ICQaA,ECwBAC,EFTAC,EAvBPC,EAAiB,CACrB,CACEC,KAAM,GACNC,WCKSL,EAAN,WAOL,WACUM,EACAC,EACAC,EACAC,aAHA,KAAAH,SACA,KAAAC,QACA,KAAAC,gBACA,KAAAC,mB,UAXL,O,EAAA,G,EAAA,uBAcL,WAAU,WACRC,KAAKC,WAELD,KAAKE,kBACLF,KAAKG,aAAe,IAAI,IAAU,CAChCC,YAAa,IAAI,IAAY,KAAM,CAAEC,WAAY,CAAC,IAAWC,YAC7DC,YAAa,IAAI,IAAY,KAAM,CAAEF,WAAY,CAAC,IAAWC,cAG/DN,KAAKD,iBAAiBS,mBAAmBC,WACtCC,YACKA,GACFV,EAAKG,aAAaQ,WAAW,CAC3BP,YAAaM,EAASE,UACtBL,YAAaG,EAASG,YAG1Bb,EAAKC,cAENa,YACCd,EAAKe,WAAW,YAAa,SAAUD,GACvCd,EAAKC,gBAnCN,0BAwCL,WAAc,WACZD,KAAKG,aAAaa,mBAEdhB,KAAKG,aAAac,QACpBjB,KAAKe,WAAW,YAAa,SAAU,gCASzCf,KAAKD,iBAAiBmB,kBALJ,CAChBN,UAAWZ,KAAKG,aAAagB,MAAMf,YACnCS,UAAWb,KAAKG,aAAagB,MAAMZ,cAGSE,WAC3CW,YACCpB,EAAKD,iBAAiBsB,uBAAuBZ,WAAWa,YACxCC,OAAOC,KACnBF,EAASG,SACT,SACA,yEAOJzB,EAAKe,WAAW,YAAa,UAAW,8CAEzCD,YACCd,EAAKe,WAAW,YAAa,SAAUD,GACvCd,EAAKC,gBAtEN,kCA2EL,WACED,KAAKE,gBAAkBF,KAAKE,iBA5EzB,wBA+EG,SAAWwB,EAAeC,EAAaC,GAC7C5B,KAAKF,cAAc+B,KAAKF,EAAQC,EAAS,CACvCF,WACAC,aAlFC,kBAsFL,WACE3B,KAAKJ,OAAOkC,SAAS,CAAC,OAAQ,CAAEC,WAAY/B,KAAKH,a,2BAvF9C,K,sCAAMP,GAAiB,2J,mDAAjBA,EAAiB,49BFZ9B,2CACE,kDACE,4CAAmE,qDAAS,EAAA0C,UAC1E,kCACF,8BACA,sCAAI,oCAAQ,8BACd,8BACA,gDACE,yCACE,yCACE,0CAAiC,sDAAU,EAAAC,kBACzC,0CACE,0CACE,0CACE,4CAA8C,+CAAkB,8BAChE,uCAgBA,qDAaF,8BACF,8BAEA,0CACE,0CACE,4CAA8C,+CAAkB,8BAChE,kDACE,wCAgBA,8CAME,qDAAS,EAAAC,0BAET,0CAMF,8BACF,8BACA,qDAaF,8BACF,8BAEA,2CACE,8CACE,mCACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,+B,MAnGc,kFAaI,+KASA,mJAoBE,iGAA6C,yHAwB3C,iHAEA,sFAMJ,qJ,4FC1EhB,CACExC,KAAM,iBACNyC,aAAc,kBACZ,iCAA4DC,MAAMC,YAACA,OAAKA,EAAEC,wBAG9E,CACE5C,KAAM,KACN6C,WAAY,iBACZC,UAAW,SAQR,IAAMhD,EAAN,yB,gDAAMA,I,+EAAAA,IAAqB,SAHvB,CAAC,IAAaiD,SAAShD,IACtB,O,GEWL,IAAMF,EAAN,yB,gDAAMA,I,+EAAAA,IAAc,SAdhB,CACP,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,KACA,IACA,M","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n      Back\n    </button>\n    <h3>Settings</h3>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-md-8 col-sm-10 col-12 mx-auto\">\n        <form [formGroup]=\"zoomKeysForm\" (submit)=\"saveZoomKeys()\">\n          <div class=\"row\">\n            <div class=\"col-md-6 col-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-access-token\">Zoom Access Token:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-access-token\"\n                  name=\"accessToken\"\n                  formControlName=\"accessToken\"\n                  placeholder=\"Zoom Access Token\"\n                  fullWidth\n                  [status]=\"\n                    zoomKeysForm.get('accessToken').touched\n                      ? zoomKeysForm.get('accessToken').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    zoomKeysForm.get('accessToken').invalid &&\n                    zoomKeysForm.get('accessToken').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"zoomKeysForm.get('accessToken').errors?.required\"\n                  >\n                    Zoom Access Token is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 col-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-secret-token\">Zoom Secret Token:</label>\n                <nb-form-field>\n                  <input\n                    [type]=\"zoomShowSecret ? 'text' : 'password'\"\n                    nbInput\n                    id=\"input-secret-token\"\n                    name=\"secretToken\"\n                    formControlName=\"secretToken\"\n                    placeholder=\"Zoom Secret Token\"\n                    fullWidth\n                    [status]=\"\n                      zoomKeysForm.get('secretToken').touched\n                        ? zoomKeysForm.get('secretToken').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n                  <button\n                    type=\"button\"\n                    nbSuffix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    (click)=\"toggleShowZoomSecret()\"\n                  >\n                    <nb-icon\n                      [icon]=\"zoomShowSecret ? 'eye-outline' : 'eye-off-2-outline'\"\n                      pack=\"eva\"\n                      [attr.aria-label]=\"zoomShowSecret ? 'show secret' : 'hide secret'\"\n                    >\n                    </nb-icon>\n                  </button>\n                </nb-form-field>\n                <ng-container\n                  *ngIf=\"\n                    zoomKeysForm.get('secretToken').invalid &&\n                    zoomKeysForm.get('secretToken').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"zoomKeysForm.get('secretToken').errors?.required\"\n                  >\n                    Zoom Secret Token is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-12 mt-3\">\n              <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"primary\">\n                Save\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { SettingsComponent } from './settings.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NbToastrService } from '@nebular/theme';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { InstituteKeysModel } from './../../models/institute-keys.model';\nimport { Component, OnInit } from '@angular/core';\nimport { AdminZoomService } from '../services/admin-zoom.service';\n\n@Component({\n  selector: 'ngx-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n})\nexport class SettingsComponent implements OnInit {\n  loading: boolean;\n  instituteKeys: InstituteKeysModel;\n\n  zoomKeysForm: FormGroup;\n  zoomShowSecret: boolean;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastrService: NbToastrService,\n    private adminZoomService: AdminZoomService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.zoomShowSecret = false;\n    this.zoomKeysForm = new FormGroup({\n      accessToken: new FormControl(null, { validators: [Validators.required] }),\n      secretToken: new FormControl(null, { validators: [Validators.required] }),\n    });\n\n    this.adminZoomService.getAdminZoomKeys().subscribe(\n      (zoomKeys: any) => {\n        if (zoomKeys) {\n          this.zoomKeysForm.patchValue({\n            accessToken: zoomKeys.accessKey,\n            secretToken: zoomKeys.secretKey,\n          });\n        }\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  saveZoomKeys() {\n    this.zoomKeysForm.markAllAsTouched();\n\n    if (this.zoomKeysForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Please Enter valid Zoom Keys');\n      return;\n    }\n\n    const keys: any = {\n      accessKey: this.zoomKeysForm.value.accessToken,\n      secretKey: this.zoomKeysForm.value.secretToken,\n    };\n\n    this.adminZoomService.saveAdminZoomKeys(keys).subscribe(\n      (res: any) => {\n        this.adminZoomService.getAdminZoomAuthLink().subscribe((responce: any) => {\n          const popup = window.open(\n            responce.authLink,\n            '_blank',\n            'toolbar,scrollbars,resizable,top=200,left=500,width=400,height=400',\n          );\n          // setTimeout(() => {\n          //   popup.close();\n          // }, 3000);\n        });\n\n        this.showToastr('top-right', 'success', 'Institute Zoom Keys Saved Successfully!');\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  toggleShowZoomSecret() {\n    this.zoomShowSecret = !this.zoomShowSecret;\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbUserModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n} from '@nebular/theme';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { SettingsComponent } from './settings.component';\n\n@NgModule({\n  declarations: [SettingsComponent],\n\n  imports: [\n    CommonModule,\n    ThemeModule,\n    ReactiveFormsModule,\n    NbCardModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbTooltipModule,\n    NbFormFieldModule,\n    SettingsRoutingModule,\n  ],\n})\nexport class SettingsModule {}\n"]}