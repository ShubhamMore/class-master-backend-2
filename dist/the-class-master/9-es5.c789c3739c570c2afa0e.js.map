{"version":3,"sources":["webpack:///src/app/employee/branch/employee/add-employee/add-employee.component.html","webpack:///src/app/employee/branch/employee/add-employee/add-employee-routing.module.ts","webpack:///src/app/employee/branch/employee/add-employee/add-employee.component.ts","webpack:///src/app/employee/branch/employee/add-employee/add-employee.module.ts"],"names":["AddEmployeeComponent","AddEmployeeModule","AddEmployeeRoutingModule","routes","path","component","branchService","employeeService","roleService","dateService","userService","toastrService","branchEmployeeService","encryptService","router","route","mode","this","loading","submit","branchId","getBranchId","employeeId","getEmployeeId","branchEmployeeId","getBranchEmployeeId","queryParams","subscribe","param","showToastr","navigate","relativeTo","roles","getEmployeeRoles","alreadyRegisteredUser","employeeSearchForm","validators","required","employeeForm","name","minLength","email","phone","maxLength","min","max","birthDate","address","qualification","branchEmployeeForm","role","basicSalary","description","getBranchEmployeeForEditing","res","employee","branchEmployee","userExist","patchValue","imsMasterId","disableEmployeeDetails","err","back","get","valid","checkUser","value","exist","error","markAllAsTouched","invalid","searchEmployee","enable","disable","stepper","previous","enableEmployeeDetails","next","newBranchEmployee","branch","_id","editBranchEmployee","newEmployee","password","encrypt","encKey","addEmployee","position","status","message","show","type","getEmployeeType","replaceUrl","deleteEmployeeId","deleteBranchEmployeeId","branchEmployeeFormSubmit","previousStep","saveEmployee","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button\n      type=\"button\"\n      class=\"float-right\"\n      nbButton\n      size=\"small\"\n      status=\"warning\"\n      (click)=\"back()\"\n    >\n      Back\n    </button>\n    <h3 class=\"\">\n      {{ !employee ? 'Add New' : 'Edit' + ' Employee ' + (employee.name | uppercase) }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n      <nb-step [stepControl]=\"employeeForm\" label=\"Basic Details\">\n        <div class=\"row\">\n          <div class=\"col-md-12\" *ngIf=\"!employee\">\n            <nb-checkbox\n              id=\"input-already-registered\"\n              name=\"alreadyRegistered\"\n              [checked]=\"alreadyRegisteredUser\"\n              (checkedChange)=\"alreadyRegister($event)\"\n              >Already Registered Employee</nb-checkbox\n            >\n          </div>\n          <div class=\"col-md-6 col-sm-8\" *ngIf=\"alreadyRegisteredUser || employee\">\n            <form class=\"\" (submit)=\"searchEmployee()\" [formGroup]=\"employeeSearchForm\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-employee-employee-id\">Employee Id:</label>\n                <nb-form-field>\n                  <input\n                    type=\"text\"\n                    nbInput\n                    id=\"input-employee-id\"\n                    employeeId=\"employeeId\"\n                    formControlName=\"employeeId\"\n                    placeholder=\"Employee Email or IMS Master Id\"\n                    fullWidth\n                    [status]=\"\n                      employeeSearchForm.get('employeeId').touched\n                        ? employeeSearchForm.get('employeeId').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n                  <button\n                    nbSuffix\n                    nbTooltip=\"Fetch\"\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    type=\"submit\"\n                    *ngIf=\"!employee\"\n                  >\n                    <nb-icon icon=\"arrow-circle-right-outline\" status=\"success\"> </nb-icon>\n                  </button>\n                </nb-form-field>\n\n                <ng-container\n                  *ngIf=\"\n                    employeeSearchForm.get('employeeId').invalid &&\n                    employeeSearchForm.get('employeeId').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeSearchForm.get('employeeId').errors?.required\"\n                  >\n                    Employee Id is required!\n                  </p>\n                </ng-container>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <form\n          class=\"\"\n          (submit)=\"employeeFormSubmit()\"\n          [formGroup]=\"employeeForm\"\n          *ngIf=\"!alreadyRegisteredUser\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-employee-employee-name\">Employee Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-employee-name\"\n                  name=\"name\"\n                  formControlName=\"name\"\n                  placeholder=\"Employee Name\"\n                  minlength=\"3\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    employeeForm.get('name').touched\n                      ? employeeForm.get('name').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"employeeForm.get('name').invalid && employeeForm.get('name').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('name').errors?.required\"\n                  >\n                    Employee name is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('name').errors?.minlength\"\n                  >\n                    Employee Name should contain minimum 3 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-email\">Email address:</label>\n                <input\n                  type=\"email\"\n                  nbInput\n                  id=\"input-email\"\n                  name=\"email\"\n                  formControlName=\"email\"\n                  placeholder=\"Email address\"\n                  fullWidth\n                  [status]=\"\n                    employeeForm.get('email').touched\n                      ? employeeForm.get('email').invalid || userExist\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"checkUser()\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    (employeeForm.get('email').invalid || userExist) &&\n                    employeeForm.get('email').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('email').errors?.required\"\n                  >\n                    Email is required!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"employeeForm.get('email').errors?.email\">\n                    Email should be the real one!\n                  </p>\n                  <p class=\"caption status-danger\" *ngIf=\"userExist\">\n                    Email Already registered, Please try another Email!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-phone\">Phone:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-phone\"\n                  name=\"phone\"\n                  formControlName=\"phone\"\n                  placeholder=\"phone\"\n                  minlength=\"10\"\n                  maxlength=\"10\"\n                  min=\"1000000000\"\n                  max=\"9999999999\"\n                  fullWidth\n                  [status]=\"\n                    employeeForm.get('phone').touched\n                      ? employeeForm.get('phone').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"employeeForm.get('phone').invalid && employeeForm.get('phone').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"employeeForm.get('phone').errors?.required\"\n                  >\n                    Phone is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      employeeForm.get('phone').errors?.minlength ||\n                      employeeForm.get('phone').errors?.maxlength ||\n                      employeeForm.get('phone').errors?.min ||\n                      employeeForm.get('phone').errors?.max\n                    \"\n                  >\n                    Phone should contain 10 digits\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-birth-date\">Birth Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-birth-date\"\n                  name=\"birthDate\"\n                  [max]=\"dateService.getDateString()\"\n                  formControlName=\"birthDate\"\n                  placeholder=\"Birth Date\"\n                  fullWidth\n                />\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address\">Address:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address\"\n                  name=\"address\"\n                  formControlName=\"address\"\n                  placeholder=\"Address (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-qualification\">Qualification:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-qualification\"\n                  name=\"qualification\"\n                  formControlName=\"qualification\"\n                  placeholder=\"Qualification (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"branchEmployeeForm\" label=\"Enrollment Details\">\n        <form\n          [formGroup]=\"branchEmployeeForm\"\n          (ngSubmit)=\"branchEmployeeFormSubmit()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-employee-role\">Role:</label>\n                <nb-select\n                  id=\"input-role\"\n                  name=\"role\"\n                  formControlName=\"role\"\n                  placeholder=\"Select Role\"\n                  fullWidth\n                  [status]=\"\n                    branchEmployeeForm.get('role').touched\n                      ? branchEmployeeForm.get('role').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Role</nb-option>\n                  <nb-option *ngFor=\"let role of roles\" [value]=\"role\">{{\n                    role | uppercase\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    branchEmployeeForm.get('role').invalid && branchEmployeeForm.get('role').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchEmployeeForm.get('role').errors?.required\"\n                  >\n                    Employee Role is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-basic-salary\">Basic Salary:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-basic-salary\"\n                  name=\"basicSalary\"\n                  formControlName=\"basicSalary\"\n                  placeholder=\"Basic Salary\"\n                  min=\"0\"\n                  fullWidth\n                  [status]=\"\n                    branchEmployeeForm.get('basicSalary').touched\n                      ? branchEmployeeForm.get('basicSalary').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    branchEmployeeForm.get('basicSalary').invalid &&\n                    branchEmployeeForm.get('basicSalary').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchEmployeeForm.get('basicSalary').errors?.required\"\n                  >\n                    Basic Salary is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"branchEmployeeForm.get('basicSalary').errors?.min\"\n                  >\n                    Basic Salary should be more than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-description\">Description:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-description\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  placeholder=\"Description (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr *ngIf=\"employeeSearchForm.value.employeeId\">\n                  <th>IMS Id</th>\n                  <td>{{ employeeSearchForm.value.employeeId }}</td>\n                </tr>\n                <tr>\n                  <th>Employee Name</th>\n                  <td>{{ employeeForm.value.name }}</td>\n                </tr>\n                <tr>\n                  <th>Email</th>\n                  <td>{{ employeeForm.value.email }}</td>\n                </tr>\n                <tr>\n                  <th>Phone</th>\n                  <td>{{ employeeForm.value.phone }}</td>\n                </tr>\n                <tr>\n                  <th>Address</th>\n                  <td>{{ employeeForm.value.address ? employeeForm.value.address : '--' }}</td>\n                </tr>\n                <tr>\n                  <th>Qualification</th>\n                  <td>\n                    {{ employeeForm.value.qualification ? employeeForm.value.qualification : '--' }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Role</th>\n                  <td>{{ branchEmployeeForm.value.role | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Basic Salary</th>\n                  <td>{{ branchEmployeeForm.value.basicSalary }}</td>\n                </tr>\n                <tr>\n                  <th>Description</th>\n                  <td>{{ branchEmployeeForm.value.description }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button\n                type=\"button\"\n                class=\"\"\n                nbButton\n                size=\"small\"\n                (click)=\"previousStep()\"\n                [disabled]=\"submit\"\n              >\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveEmployee()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddEmployeeComponent } from './add-employee.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddEmployeeComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddEmployeeRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\r\nimport { RoleService } from './../../../../services/role.service';\r\nimport { UserService } from './../../../../services/shared-services/user.service';\r\nimport { environment } from './../../../../../environments/environment.prod';\r\nimport { EncryptService } from './../../../../services/shared-services/encrypt.service';\r\nimport { BranchEmployeeService } from '../../../../services/branch-employee.service';\r\nimport { EmployeeService } from './../../../../services/employee.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { EmployeeModel } from './../../../../models/employee.model';\r\nimport { BranchEmployeeModel } from '../../../../models/branch-employee.model';\r\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { BranchService } from './../../../../services/branch.service';\r\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-add-employee',\r\n  templateUrl: './add-employee.component.html',\r\n  styleUrls: ['./add-employee.component.scss'],\r\n})\r\nexport class AddEmployeeComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  private branchId: string;\r\n  private employeeId: string;\r\n  private branchEmployeeId: string;\r\n  roles: string[];\r\n  userExist: boolean;\r\n\r\n  alreadyRegisteredUser: boolean;\r\n\r\n  employee: EmployeeModel;\r\n  branchEmployee: BranchEmployeeModel;\r\n\r\n  employeeForm: FormGroup;\r\n  branchEmployeeForm: FormGroup;\r\n  employeeSearchForm: FormGroup;\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private employeeService: EmployeeService,\r\n    private roleService: RoleService,\r\n    public dateService: DateService,\r\n    private userService: UserService,\r\n    private toastrService: NbToastrService,\r\n    private branchEmployeeService: BranchEmployeeService,\r\n    private encryptService: EncryptService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    // route.queryParams.subscribe((param: Params) => {\r\n    //   // put the code from `ngOnInit` here\r\n    //   this.ngOnInit();\r\n    // });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n\r\n      return;\r\n    }\r\n\r\n    this.employeeId = this.employeeService.getEmployeeId();\r\n    this.branchEmployeeId = this.branchEmployeeService.getBranchEmployeeId();\r\n\r\n    let mode: string;\r\n\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      mode = param.mode;\r\n    });\r\n\r\n    if (mode && mode !== 'edit') {\r\n      this.showToastr('top-right', 'danger', 'Invalid Route');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    } else if (mode && !this.employeeId && !this.branchEmployeeId) {\r\n      this.showToastr('top-right', 'danger', 'Employee Not Found');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.roles = this.roleService.getEmployeeRoles();\r\n\r\n    this.alreadyRegisteredUser = false;\r\n\r\n    this.employeeSearchForm = new FormGroup({\r\n      employeeId: new FormControl(null, { validators: [Validators.required] }),\r\n    });\r\n\r\n    this.employeeForm = new FormGroup({\r\n      name: new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }),\r\n      email: new FormControl(null, { validators: [Validators.required, Validators.email] }),\r\n      phone: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(10),\r\n          Validators.maxLength(10),\r\n          Validators.min(1000000000),\r\n          Validators.max(9999999999),\r\n        ],\r\n      }),\r\n      birthDate: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n      address: new FormControl(null, { validators: [] }),\r\n      qualification: new FormControl(null, { validators: [] }),\r\n    });\r\n\r\n    this.branchEmployeeForm = new FormGroup({\r\n      role: new FormControl(null, { validators: [Validators.required] }),\r\n      basicSalary: new FormControl(null, {\r\n        validators: [Validators.required, Validators.min(0)],\r\n      }),\r\n      description: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n    });\r\n\r\n    if (mode && this.employeeId && this.branchEmployeeId) {\r\n      this.branchEmployeeService\r\n        .getBranchEmployeeForEditing(this.branchEmployeeId, this.employeeId)\r\n        .subscribe(\r\n          (res: any) => {\r\n            this.employee = res.employee;\r\n            this.branchEmployee = res.branchEmployee;\r\n            this.userExist = false;\r\n            this.employeeSearchForm.patchValue({\r\n              employeeId: this.employee.imsMasterId,\r\n            });\r\n\r\n            this.employeeForm.patchValue({\r\n              name: this.employee.name,\r\n              email: this.employee.email,\r\n              phone: this.employee.phone,\r\n              birthDate: this.employee.birthDate,\r\n              address: this.employee.address,\r\n            });\r\n\r\n            this.disableEmployeeDetails();\r\n\r\n            this.branchEmployeeForm.patchValue({\r\n              role: this.branchEmployee.role,\r\n              basicSalary: this.branchEmployee.basicSalary,\r\n              description: this.branchEmployee.description,\r\n            });\r\n\r\n            this.loading = false;\r\n          },\r\n          (err: any) => {\r\n            this.showToastr('top-right', 'danger', err);\r\n            this.back();\r\n          },\r\n        );\r\n    } else {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  checkUser() {\r\n    if (this.employeeForm.get('email').valid && !this.employee) {\r\n      this.userService.checkUser(this.employeeForm.value.email).subscribe(\r\n        (res: any) => {\r\n          this.userExist = res.exist;\r\n        },\r\n        (error: any) => {},\r\n      );\r\n    }\r\n  }\r\n\r\n  alreadyRegister(alreadyRegisteredUser: boolean) {\r\n    this.alreadyRegisteredUser = alreadyRegisteredUser;\r\n  }\r\n\r\n  searchEmployee() {\r\n    this.employeeSearchForm.markAllAsTouched();\r\n    if (this.employeeSearchForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Enter Employee Id');\r\n      return;\r\n    }\r\n    this.employeeId = this.employeeSearchForm.value.employeeId;\r\n    this.loading = true;\r\n    this.employeeService.searchEmployee(this.employeeId, this.branchId).subscribe(\r\n      (employee: EmployeeModel) => {\r\n        this.employee = employee;\r\n\r\n        this.employeeId = employee.imsMasterId;\r\n        this.userExist = false;\r\n        this.alreadyRegisteredUser = false;\r\n\r\n        this.employeeSearchForm.patchValue({\r\n          employeeId: this.employee.imsMasterId,\r\n        });\r\n\r\n        this.employeeForm.patchValue({\r\n          name: this.employee.name,\r\n          email: this.employee.email,\r\n          phone: this.employee.phone,\r\n          birthDate: this.employee.birthDate,\r\n          address: this.employee.address,\r\n        });\r\n\r\n        this.disableEmployeeDetails();\r\n\r\n        this.loading = false;\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.employeeId = null;\r\n        this.loading = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  private enableEmployeeDetails() {\r\n    this.employeeForm.get('name').enable();\r\n    this.employeeForm.get('email').enable();\r\n    this.employeeForm.get('phone').enable();\r\n    this.employeeForm.get('birthDate').enable();\r\n    this.employeeForm.get('address').enable();\r\n    this.employeeForm.get('qualification').enable();\r\n    this.employeeSearchForm.get('employeeId').enable();\r\n  }\r\n\r\n  private disableEmployeeDetails() {\r\n    this.employeeForm.get('name').disable();\r\n    this.employeeForm.get('email').disable();\r\n    this.employeeForm.get('phone').disable();\r\n    this.employeeForm.get('birthDate').disable();\r\n    this.employeeForm.get('address').disable();\r\n    this.employeeForm.get('qualification').disable();\r\n    this.employeeSearchForm.get('employeeId').disable();\r\n  }\r\n\r\n  previousStep() {\r\n    this.stepper.previous();\r\n    if (this.employee) {\r\n      this.disableEmployeeDetails();\r\n    }\r\n  }\r\n\r\n  employeeFormSubmit() {\r\n    this.employeeForm.markAllAsTouched();\r\n    if (this.employeeForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Employee Details are Required');\r\n      return;\r\n    } else if (this.userExist) {\r\n      this.showToastr('top-right', 'danger', 'User with this email address is already Exist');\r\n      return;\r\n    }\r\n    if (this.employee) {\r\n      this.enableEmployeeDetails();\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  branchEmployeeFormSubmit() {\r\n    this.branchEmployeeForm.markAllAsTouched();\r\n    if (this.employeeForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Employee Branch Details are Required');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  saveEmployee() {\r\n    this.employeeForm.markAllAsTouched();\r\n    this.branchEmployeeForm.markAllAsTouched();\r\n\r\n    if (this.employeeForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Employee Details are Required');\r\n      return;\r\n    } else if (this.employeeForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Employee Branch Details are Required');\r\n      return;\r\n    }\r\n\r\n    this.submit = true;\r\n\r\n    if (!this.employeeId && !this.branchEmployeeId) {\r\n      const newEmployee: any = this.employeeForm.value;\r\n      newEmployee.password = this.encryptService.encrypt(newEmployee.phone, environment.encKey);\r\n      const newBranchEmployee: any = this.branchEmployeeForm.value;\r\n      newBranchEmployee.branch = this.branchId;\r\n      this.employeeService.addEmployee(newEmployee, newBranchEmployee).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Employee Added Successfully');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else if (this.employeeId && !this.branchEmployeeId) {\r\n      const newBranchEmployee: any = this.branchEmployeeForm.value;\r\n      newBranchEmployee.branch = this.branchId;\r\n      newBranchEmployee.employee = this.employeeId;\r\n      this.branchEmployeeService.newBranchEmployee(newBranchEmployee).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Branch Employee added Successfully');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else if (this.employeeId && this.branchEmployeeId) {\r\n      const branchEmployee: any = this.branchEmployeeForm.value;\r\n      branchEmployee._id = this.branchEmployeeId;\r\n      this.branchEmployeeService.editBranchEmployee(branchEmployee).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'Employee Updated Successfully');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else {\r\n      this.showToastr('top-right', 'danger', 'Invalid data');\r\n      this.submit = false;\r\n    }\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  back() {\r\n    const type = this.employeeService.getEmployeeType();\r\n    this.router.navigate(['../'], {\r\n      relativeTo: this.route,\r\n      queryParams: { type },\r\n      replaceUrl: true,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.employeeService.deleteEmployeeId();\r\n    this.branchEmployeeService.deleteBranchEmployeeId();\r\n  }\r\n}\r\n","import { AddEmployeeComponent } from './add-employee.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddEmployeeRoutingModule } from './add-employee-routing.module';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbSelectModule,\n  NbInputModule,\n  NbButtonModule,\n  NbSpinnerModule,\n  NbIconModule,\n  NbStepperModule,\n  NbFormFieldModule,\n  NbCheckboxModule,\n  NbTooltipModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [AddEmployeeComponent],\n  imports: [\n    CommonModule,\n    AddEmployeeRoutingModule,\n\n    NbCardModule,\n    NbSelectModule,\n    NbInputModule,\n    NbCheckboxModule,\n    NbSpinnerModule,\n    NbButtonModule,\n    NbIconModule,\n    NbStepperModule,\n    NbTooltipModule,\n    NbFormFieldModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddEmployeeModule {}\n"]}