{"version":3,"sources":["webpack:///src/app/institute/settings/settings.component.html","webpack:///src/app/institute/settings/settings-routing.module.ts","webpack:///src/app/institute/settings/settings.component.ts","webpack:///src/app/institute/settings/settings.module.ts"],"names":["SettingsComponent","SettingsModule","SettingsRoutingModule","routes","path","component","router","route","toastrService","instituteKeysService","this","loading","zoomShowSecret","zoomKeysForm","accessToken","validators","required","secretToken","paymentGatewayShowSecret","paymentGatewayKeysForm","getInstituteKeys","subscribe","instituteKeys","onlineClassesKeys","patchValue","accessKey","secretKey","paymentGatewayKeys","error","showToastr","markAllAsTouched","invalid","saveInstituteZoomKeys","value","res","getZoomAuthLink","responce","window","open","authLink","saveInstitutePaymentGatewayKeys","position","status","message","show","navigate","relativeTo","back","saveZoomKeys","toggleShowZoomSecret","savePaymentGatewayKeys","toggleShowPaymentGatewaySecret","canActivate","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"ihBAyCkB,wCAIE,4DACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,qK,sBAkDF,wCAIE,4DACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,qK,sBAuDF,wCAIE,uEACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,yL,sBAoDF,wCAIE,uEACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,yLC1MpB,ICQaA,ECwBAC,EFZAC,EApBPC,EAAiB,CACrB,CAAEC,KAAM,GAAIC,WCODL,EAAN,WAUL,WACUM,EACAC,EACAC,EACAC,aAHA,KAAAH,SACA,KAAAC,QACA,KAAAC,gBACA,KAAAC,uB,UAdL,O,EAAA,G,EAAA,uBAiBL,WAAU,WACRC,KAAKC,WAELD,KAAKE,kBACLF,KAAKG,aAAe,IAAI,IAAU,CAChCC,YAAa,IAAI,IAAY,KAAM,CAAEC,WAAY,CAAC,IAAWC,YAC7DC,YAAa,IAAI,IAAY,KAAM,CAAEF,WAAY,CAAC,IAAWC,cAG/DN,KAAKQ,4BACLR,KAAKS,uBAAyB,IAAI,IAAU,CAC1CL,YAAa,IAAI,IAAY,KAAM,CAAEC,WAAY,CAAC,IAAWC,YAC7DC,YAAa,IAAI,IAAY,KAAM,CAAEF,WAAY,CAAC,IAAWC,cAG/DN,KAAKD,qBAAqBW,mBAAmBC,WAC1CC,YACKA,GAAiBA,EAAcC,mBACjCb,EAAKG,aAAaW,WAAW,CAC3BV,YAAaQ,EAAcC,kBAAkBE,UAC7CR,YAAaK,EAAcC,kBAAkBG,YAG7CJ,GAAiBA,EAAcK,oBACjCjB,EAAKS,uBAAuBK,WAAW,CACrCV,YAAaQ,EAAcK,mBAAmBF,UAC9CR,YAAaK,EAAcK,mBAAmBD,YAGlDhB,EAAKC,cAENiB,YACClB,EAAKmB,WAAW,YAAa,SAAUD,GACvClB,EAAKC,gBAlDN,0BAuDL,WAAc,WACZD,KAAKG,aAAaiB,mBAEdpB,KAAKG,aAAakB,QACpBrB,KAAKmB,WAAW,YAAa,SAAU,gCASzCnB,KAAKD,qBAAqBuB,sBALR,CAChBP,UAAWf,KAAKG,aAAaoB,MAAMnB,YACnCY,UAAWhB,KAAKG,aAAaoB,MAAMhB,cAGiBI,WACnDa,YACCxB,EAAKD,qBAAqB0B,kBAAkBd,WAAWe,YACvCC,OAAOC,KACnBF,EAASG,SACT,SACA,yEAOJ7B,EAAKmB,WAAW,YAAa,UAAW,8CAEzCD,YACClB,EAAKmB,WAAW,YAAa,SAAUD,GACvClB,EAAKC,gBArFN,kCA0FL,WACED,KAAKE,gBAAkBF,KAAKE,iBA3FzB,4CA8FL,WACEF,KAAKQ,0BAA4BR,KAAKQ,2BA/FnC,oCAkGL,WAAwB,WACtBR,KAAKS,uBAAuBW,mBAExBpB,KAAKS,uBAAuBY,QAC9BrB,KAAKmB,WAAW,YAAa,SAAU,2CASzCnB,KAAKD,qBAAqB+B,gCALR,CAChBf,UAAWf,KAAKS,uBAAuBc,MAAMnB,YAC7CY,UAAWhB,KAAKS,uBAAuBc,MAAMhB,cAGiBI,WAC7Da,YACCxB,EAAKmB,WACH,YACA,UACA,yDAGHD,YACClB,EAAKmB,WAAW,YAAa,SAAUD,GACvClB,EAAKC,gBAzHN,wBA8HG,SAAW8B,EAAeC,EAAaC,GAC7CjC,KAAKF,cAAcoC,KAAKF,EAAQC,EAAS,CACvCF,WACAC,aAjIC,kBAqIL,WACEhC,KAAKJ,OAAOuC,SAAS,CAAC,OAAQ,CAAEC,WAAYpC,KAAKH,a,2BAtI9C,K,sCAAMP,GAAiB,2J,mDAAjBA,EAAiB,+gDFZ9B,2CACE,kDACE,4CAAmE,qDAAS,EAAA+C,UAC1E,kCACF,8BACA,sCAAI,oCAAQ,8BACd,8BACA,gDACE,yCACE,yCACE,sCAAI,iDAAoB,8BACxB,sCAAG,yDAA4B,8BACjC,8BACA,0CACE,2CAAiC,sDAAU,EAAAC,kBACzC,0CACE,0CACE,0CACE,4CAAmD,+CAAkB,8BACrE,uCAgBA,qDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAmD,+CAAkB,8BACrE,kDACE,wCAgBA,8CAME,qDAAS,EAAAC,0BAET,0CAMF,8BACF,8BACA,qDAaF,8BACF,8BAEA,2CACE,8CACE,mCACF,8BACF,8BACF,8BACF,8BACF,8BAEA,0CACE,kCACF,8BAEA,0CACE,uCAAI,qDAAwB,8BAC5B,sCAAG,yDAA4B,8BACjC,8BACA,0CACE,2CAA2C,sDAAU,EAAAC,4BACnD,0CACE,0CACE,0CACE,6CACG,0DAA6B,8BAEhC,wCAgBA,qDAaF,8BACF,8BAEA,0CACE,0CACE,6CACG,0DAA6B,8BAEhC,kDACE,wCAgBA,8CAME,qDAAS,EAAAC,oCAET,0CAMF,8BACF,8BACA,qDAaF,8BACF,8BAEA,2CACE,8CACE,mCACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,+B,MAlNc,mFAaI,+KASA,mJAoBE,iGAA6C,yHAwB3C,iHAEA,sFAMJ,mJAiCJ,6FAeI,mMASA,uKAsBE,2GAAuD,6IAwBrD,2HAEA,gGAMJ,yK,2FClM0BC,YAAa,IAEvD,CACEhD,KAAM,iBACNiD,aAAc,kBACZ,iCAA4DC,MAAMC,YAACA,OAAKA,EAAEC,wBAG9E,CACEpD,KAAM,KACNqD,WAAY,iBACZC,UAAW,SAQR,IAAMxD,EAAN,yB,gDAAMA,I,+EAAAA,IAAqB,SAHvB,CAAC,IAAayD,SAASxD,IACtB,O,GEcL,IAAMF,EAAN,yB,gDAAMA,I,+EAAAA,IAAc,SAdhB,CACP,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,KACA,IACA,M","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n      Back\n    </button>\n    <h3>Settings</h3>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h4>Zoom Online Lectures</h4>\n        <p>Instructions Comming Soon...</p>\n      </div>\n      <div class=\"col-md-8 col-sm-10 col-12 mx-auto\">\n        <form [formGroup]=\"zoomKeysForm\" (submit)=\"saveZoomKeys()\">\n          <div class=\"row\">\n            <div class=\"col-md-6 col-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-zoom-access-token\">Zoom Access Token:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-zoom-access-token\"\n                  name=\"zoomAccessToken\"\n                  formControlName=\"accessToken\"\n                  placeholder=\"Zoom Access Token\"\n                  fullWidth\n                  [status]=\"\n                    zoomKeysForm.get('accessToken').touched\n                      ? zoomKeysForm.get('accessToken').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    zoomKeysForm.get('accessToken').invalid &&\n                    zoomKeysForm.get('accessToken').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"zoomKeysForm.get('accessToken').errors?.required\"\n                  >\n                    Zoom Access Token is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 col-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-zoom-secret-token\">Zoom Secret Token:</label>\n                <nb-form-field>\n                  <input\n                    [type]=\"zoomShowSecret ? 'text' : 'password'\"\n                    nbInput\n                    id=\"input-zoom-secret-token\"\n                    name=\"zoomSecretToken\"\n                    formControlName=\"secretToken\"\n                    placeholder=\"Zoom Secret Token\"\n                    fullWidth\n                    [status]=\"\n                      zoomKeysForm.get('secretToken').touched\n                        ? zoomKeysForm.get('secretToken').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n                  <button\n                    type=\"button\"\n                    nbSuffix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    (click)=\"toggleShowZoomSecret()\"\n                  >\n                    <nb-icon\n                      [icon]=\"zoomShowSecret ? 'eye-outline' : 'eye-off-2-outline'\"\n                      pack=\"eva\"\n                      [attr.aria-label]=\"zoomShowSecret ? 'show secret' : 'hide secret'\"\n                    >\n                    </nb-icon>\n                  </button>\n                </nb-form-field>\n                <ng-container\n                  *ngIf=\"\n                    zoomKeysForm.get('secretToken').invalid &&\n                    zoomKeysForm.get('secretToken').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"zoomKeysForm.get('secretToken').errors?.required\"\n                  >\n                    Zoom Secret Token is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-12 mt-3\">\n              <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"primary\">\n                Save\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n\n      <div class=\"col-12\">\n        <hr />\n      </div>\n\n      <div class=\"col-12\">\n        <h4>RazorPay Payment Gateway</h4>\n        <p>Instructions Comming Soon...</p>\n      </div>\n      <div class=\"col-md-8 col-sm-10 col-12 mx-auto\">\n        <form [formGroup]=\"paymentGatewayKeysForm\" (submit)=\"savePaymentGatewayKeys()\">\n          <div class=\"row\">\n            <div class=\"col-md-6 col-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-payment-gateway-access-token\"\n                  >Payment Gateway Access Token:</label\n                >\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-payment-gateway-access-token\"\n                  name=\"paymentGatewayAccessToken\"\n                  formControlName=\"accessToken\"\n                  placeholder=\"Payment Gateway Access Token\"\n                  fullWidth\n                  [status]=\"\n                    paymentGatewayKeysForm.get('accessToken').touched\n                      ? paymentGatewayKeysForm.get('accessToken').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    paymentGatewayKeysForm.get('accessToken').invalid &&\n                    paymentGatewayKeysForm.get('accessToken').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"paymentGatewayKeysForm.get('accessToken').errors?.required\"\n                  >\n                    Payment Gateway Access Token is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 col-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-payment-gateway-secret-token\"\n                  >Payment Gateway Secret Token:</label\n                >\n                <nb-form-field>\n                  <input\n                    [type]=\"paymentGatewayShowSecret ? 'text' : 'password'\"\n                    nbInput\n                    id=\"input-payment-gateway-secret-token\"\n                    name=\"paymentGatewaySecretToken\"\n                    formControlName=\"secretToken\"\n                    placeholder=\"Payment Gateway Secret Token\"\n                    fullWidth\n                    [status]=\"\n                      paymentGatewayKeysForm.get('secretToken').touched\n                        ? paymentGatewayKeysForm.get('secretToken').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n                  <button\n                    type=\"button\"\n                    nbSuffix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    (click)=\"toggleShowPaymentGatewaySecret()\"\n                  >\n                    <nb-icon\n                      [icon]=\"paymentGatewayShowSecret ? 'eye-outline' : 'eye-off-2-outline'\"\n                      pack=\"eva\"\n                      [attr.aria-label]=\"paymentGatewayShowSecret ? 'show secret' : 'hide secret'\"\n                    >\n                    </nb-icon>\n                  </button>\n                </nb-form-field>\n                <ng-container\n                  *ngIf=\"\n                    paymentGatewayKeysForm.get('secretToken').invalid &&\n                    paymentGatewayKeysForm.get('secretToken').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"paymentGatewayKeysForm.get('secretToken').errors?.required\"\n                  >\n                    Payment Gateway Secret Token is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-12 mt-3\">\n              <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"primary\">\n                Save\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { SettingsComponent } from './settings.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: SettingsComponent, canActivate: [] },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NbToastrService } from '@nebular/theme';\nimport { InstituteKeysService } from './../../services/institute-keys.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { InstituteKeysModel } from './../../models/institute-keys.model';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n})\nexport class SettingsComponent implements OnInit {\n  loading: boolean;\n  instituteKeys: InstituteKeysModel;\n\n  zoomKeysForm: FormGroup;\n  paymentGatewayKeysForm: FormGroup;\n\n  zoomShowSecret: boolean;\n  paymentGatewayShowSecret: boolean;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastrService: NbToastrService,\n    private instituteKeysService: InstituteKeysService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.zoomShowSecret = false;\n    this.zoomKeysForm = new FormGroup({\n      accessToken: new FormControl(null, { validators: [Validators.required] }),\n      secretToken: new FormControl(null, { validators: [Validators.required] }),\n    });\n\n    this.paymentGatewayShowSecret = false;\n    this.paymentGatewayKeysForm = new FormGroup({\n      accessToken: new FormControl(null, { validators: [Validators.required] }),\n      secretToken: new FormControl(null, { validators: [Validators.required] }),\n    });\n\n    this.instituteKeysService.getInstituteKeys().subscribe(\n      (instituteKeys: InstituteKeysModel) => {\n        if (instituteKeys && instituteKeys.onlineClassesKeys) {\n          this.zoomKeysForm.patchValue({\n            accessToken: instituteKeys.onlineClassesKeys.accessKey,\n            secretToken: instituteKeys.onlineClassesKeys.secretKey,\n          });\n        }\n        if (instituteKeys && instituteKeys.paymentGatewayKeys) {\n          this.paymentGatewayKeysForm.patchValue({\n            accessToken: instituteKeys.paymentGatewayKeys.accessKey,\n            secretToken: instituteKeys.paymentGatewayKeys.secretKey,\n          });\n        }\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  saveZoomKeys() {\n    this.zoomKeysForm.markAllAsTouched();\n\n    if (this.zoomKeysForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Please Enter valid Zoom Keys');\n      return;\n    }\n\n    const keys: any = {\n      accessKey: this.zoomKeysForm.value.accessToken,\n      secretKey: this.zoomKeysForm.value.secretToken,\n    };\n\n    this.instituteKeysService.saveInstituteZoomKeys(keys).subscribe(\n      (res: any) => {\n        this.instituteKeysService.getZoomAuthLink().subscribe((responce: any) => {\n          const popup = window.open(\n            responce.authLink,\n            '_blank',\n            'toolbar,scrollbars,resizable,top=200,left=500,width=400,height=400',\n          );\n          // setTimeout(() => {\n          //   popup.close();\n          // }, 3000);\n        });\n\n        this.showToastr('top-right', 'success', 'Institute Zoom Keys Saved Successfully!');\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  toggleShowZoomSecret() {\n    this.zoomShowSecret = !this.zoomShowSecret;\n  }\n\n  toggleShowPaymentGatewaySecret() {\n    this.paymentGatewayShowSecret = !this.paymentGatewayShowSecret;\n  }\n\n  savePaymentGatewayKeys() {\n    this.paymentGatewayKeysForm.markAllAsTouched();\n\n    if (this.paymentGatewayKeysForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Please Enter valid Payment Gateway Keys');\n      return;\n    }\n\n    const keys: any = {\n      accessKey: this.paymentGatewayKeysForm.value.accessToken,\n      secretKey: this.paymentGatewayKeysForm.value.secretToken,\n    };\n\n    this.instituteKeysService.saveInstitutePaymentGatewayKeys(keys).subscribe(\n      (res: any) => {\n        this.showToastr(\n          'top-right',\n          'success',\n          'Institute Payment Gateway Keys Saved Successfully!',\n        );\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbUserModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n} from '@nebular/theme';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { SettingsComponent } from './settings.component';\n\n@NgModule({\n  declarations: [SettingsComponent],\n\n  imports: [\n    CommonModule,\n    ThemeModule,\n    ReactiveFormsModule,\n    NbCardModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbTooltipModule,\n    NbFormFieldModule,\n    SettingsRoutingModule,\n  ],\n})\nexport class SettingsModule {}\n"]}