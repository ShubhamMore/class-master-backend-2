{"version":3,"sources":["webpack:///src/app/employee/branch/schedule/batch-schedule/add-schedule/repeat-schedule/repeat-schedule.component.html","webpack:///src/app/employee/branch/schedule/batch-schedule/add-schedule/repeat-schedule/repeat-schedule.component.ts","webpack:///src/app/employee/branch/schedule/batch-schedule/add-schedule/add-schedule.component.html","webpack:///src/app/employee/branch/schedule/batch-schedule/add-schedule/add-schedule-routing.module.ts","webpack:///src/app/employee/branch/schedule/batch-schedule/add-schedule/add-schedule.component.ts","webpack:///src/app/employee/branch/schedule/batch-schedule/add-schedule/add-schedule.module.ts"],"names":["RepeatScheduleComponent","toastrService","ref","this","loading","repeatScheduleForm","date","repeatSchedule","validators","required","startTime","endTime","subject","teacher","topic","sessionType","close","invalid","showToastr","value","position","status","message","show","saveSchedule","onClose","routes","path","component","AddScheduleComponent","branchService","courseService","branchEmployeeService","dialogService","dateService","batchService","scheduleService","router","route","submit","branchId","getBranchId","back","mode","day","queryParams","subscribe","param","scheduleId","getScheduleId","includes","getCategoryData","category","getCourseData","course","getBatchData","batch","subjects","teachers","weekDays","repeatDays","repeatSchedules","repeat","repeatScheduleEdit","repeatUpTo","convertToDateString","addDaysInDate","basicDetails","startDate","duration","repeatUpToTouched","repeatDaysTouched","weekdaysTouched","getWeekDays","getBranchEmployeeNameIdsData","employees","forEach","curSubject","mySubject","find","_id","push","getScheduleDay","scheduleForm","getDateString","getSchedule","schedule","patchValue","err","branch","length","scheduleDateInMS","dateToMilliseconds","noOfDays","i","Date","getDay","newSchedule","splice","type","open","context","saveRepeatSchedule","cancelRepeatSchedule","repeatScheduleIndex","openRepeatScheduleDialog","CalculateRepeatSchedule","checked","indexOf","stepper","previous","markAllAsTouched","next","editSchedule","res","error","addSchedule","subjectId","teacherId","curTeacher","employee","name","join","navigate","relativeTo","deleteScheduleId","deleteScheduleDay","deleteScheduleData","submitScheduleForm","onSelectSubject","previousStep","AddScheduleRoutingModule","forChild","AddScheduleModule"],"mappings":"kOAmDkB,wCAIE,8DACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,6K,sBAkCF,wCAIE,4DACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,yK,yBA0BF,gDAAkE,yBAEhE,+B,yBAF0C,yCAAsB,yE,sBAUlE,wCAIE,kDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,yK,sBAiCF,wCAIE,gDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,qK,yBA0BF,gDAAuE,yBAErE,+B,yBAF0C,8CAA2B,sE,sBAUvE,wCAIE,kDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,yK,sBAkCF,wCAIE,uDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,iLCjOb,Y,MAAMA,EASX,YACUC,EACEC,GADF,KAAAD,gBACE,KAAAC,MAGZ,WACEC,KAAKC,SAAU,EAEfD,KAAKE,mBAAqB,IAAI,IAAU,CACtCC,KAAM,IAAI,IAAYH,KAAKI,eAAeD,KAAM,CAC9CE,WAAY,CAAC,IAAWC,YAE1BC,UAAW,IAAI,IAAYP,KAAKI,eAAeG,UAAW,CACxDF,WAAY,CAAC,IAAWC,YAE1BE,QAAS,IAAI,IAAYR,KAAKI,eAAeI,QAAS,CAAEH,WAAY,CAAC,IAAWC,YAChFG,QAAS,IAAI,IAAYT,KAAKI,eAAeK,QAAUT,KAAKI,eAAeK,QAAU,GAAI,CACvFJ,WAAY,CAAC,IAAWC,YAE1BI,QAAS,IAAI,IAAYV,KAAKI,eAAeM,QAAUV,KAAKI,eAAeM,QAAU,GAAI,CACvFL,WAAY,CAAC,IAAWC,YAE1BK,MAAO,IAAI,IAAYX,KAAKI,eAAeO,MAAQX,KAAKI,eAAeO,MAAQ,YAAa,CAC1FN,WAAY,CAAC,IAAWC,YAE1BM,YAAa,IAAI,IAAYZ,KAAKI,eAAeQ,YAAa,CAC5DP,WAAY,CAAC,IAAWC,cAI9B,UACEN,KAAKD,IAAIc,QAGX,eACMb,KAAKE,mBAAmBY,QAC1Bd,KAAKe,WAAW,YAAa,SAAU,qCAGzCf,KAAKI,eAAeD,KAAOH,KAAKE,mBAAmBc,MAAMb,KACzDH,KAAKI,eAAeG,UAAYP,KAAKE,mBAAmBc,MAAMT,UAC9DP,KAAKI,eAAeI,QAAUR,KAAKE,mBAAmBc,MAAMR,QAC5DR,KAAKI,eAAeK,QAAUT,KAAKE,mBAAmBc,MAAMP,QAC5DT,KAAKI,eAAeO,MAAQX,KAAKE,mBAAmBc,MAAML,MAC1DX,KAAKI,eAAeM,QAAUV,KAAKE,mBAAmBc,MAAMN,QAC5DV,KAAKI,eAAeQ,YAAcZ,KAAKE,mBAAmBc,MAAMJ,YAEhEZ,KAAKD,IAAIc,MAAMb,KAAKI,iBAGd,WAAWa,EAAeC,EAAaC,GAC7CnB,KAAKF,cAAcsB,KAAKF,EAAQC,EAAS,CACvCF,WACAC,Y,6CA9DOrB,GAAuB,+E,mDAAvBA,EAAuB,m3DDXpC,6CACE,kDACE,sCAAI,yBAAmB,8BACzB,8BAEA,gDACE,yCACE,yCACE,0CAAuC,sDAAU,EAAAwB,kBAC/C,yCACE,yCACE,0CACE,4CAAsC,kCAAK,8BAC3C,uCAUF,8BACF,8BAEA,0CACE,0CACE,4CAAgD,iDAAoB,8BACpE,uCAgBA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAmD,+CAAkB,8BACrE,wCAiBA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAyC,qCAAQ,8BACjD,iDAcE,iDAAoB,2CAAc,8BAClC,mDAGF,8BACA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAuC,mCAAM,8BAC7C,wCAgBA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAyC,qCAAQ,8BACjD,iDAcE,iDAAoB,2CAAc,8BAClC,mDAGF,8BACA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAA8C,0CAAa,8BAC3D,iDAcE,iDAA8B,yCAAW,8BACzC,iDAA2B,qCAAO,8BACpC,8BACA,sDAaF,8BACF,8BACF,8BACA,kCACA,0CACE,0CACE,8CAME,qDAAS,EAAAC,aAET,qCACF,8BACA,8CACE,mCACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,+B,MAxQQ,qFAMM,wFA6BI,wLASA,2JA2BA,mLASA,uJAwBA,mLASW,4EAKX,uJA0BA,+KASA,mJAwBA,mLASW,4EAKX,uJAwBA,2LAYA,iK,ghBC1NX,G,kICiCe,wCAIE,+CACF,+B,yBARF,0CAGE,0CAMF,wC,4CAJI,uJ,sBAiCF,wCAIE,8DACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,iK,sBAiCF,wCAIE,4DACF,+B,yBAVF,0CAKE,0CAMF,wC,4CAJI,6J,yBA2BF,gDAAkE,yBAEhE,+B,yBAF0C,yCAAsB,yE,sBASlE,wCAIE,kDACF,+B,yBAVF,0CAKE,0CAMF,wC,4CAJI,6J,sBA8BF,wCAIE,gDACF,+B,yBARF,0CAGE,0CAMF,wC,4CAJI,yJ,yBA0BF,gDAAuE,yBAErE,+B,yBAF0C,8CAA2B,sE,sBASvE,wCAIE,kDACF,+B,yBAVF,0CAKE,0CAMF,wC,4CAJI,6J,sBAkCF,wCAIE,uDACF,+B,yBAXF,0CAME,0CAMF,wC,4CAJI,qK,kEA8BV,yCACE,yCACE,0CACE,kDAGE,0IAGA,mEACF,8BACF,8BACF,8BACF,8B,gDAPQ,2E,kEAgBA,yCACE,4CAIE,gLAJF,8BAMA,4CAA2B,yBAAiB,8BAC9C,8B,0DALI,0EAIK,2EAAoB,6E,sBAI7B,wCACE,wDACF,+B,yBAHF,0CACE,0CAGF,wC,6CAHmC,uF,sBAyBjC,wCACE,6DACF,+B,yBAHF,0CACE,0CAGF,wC,6CAHmC,6E,kEAzCzC,yCACE,0CACE,0CACE,4CAA6C,gDAAoB,8BACjE,0CACE,8CASF,8BACA,qDAKF,8BACF,8BAEA,0CACE,0CACE,6CAA8C,0CAAa,8BAC3D,6CAME,8IAAwB,wHAN1B,8BAcA,sDAKF,8BACF,8BACF,8B,gDA1Ce,4EAUK,4FAgBZ,uFAA+B,uBAA/B,CAA+B,gFASnB,6F,kEAmEN,6CAOE,6LAEA,yCACF,+B,mEAjDJ,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAAuC,8BAC3C,sCAAI,yBAA2C,8BAC/C,sCACE,yBAEF,8BACA,sCACE,0BACF,8BACA,uCACE,0BACF,8BACA,uCACE,8CAME,8KAEA,0CACF,8BACF,8BACA,uCACE,8CAME,+KAEA,0CACF,8BACF,8BACA,uCACE,gDAWF,8BACF,8B,wEAlDM,kEACA,2FACA,+FAEF,uJAIA,+FAGA,+FA4BE,qE,0BAzDZ,0CAIE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,+BAAG,8BACP,sCAAI,gCAAI,8BACR,uCAAI,iCAAI,8BACR,uCAAI,oCAAO,8BACX,uCAAI,oCAAO,8BACX,0CAAgB,mCAAM,8BACxB,8BACF,8BACA,0CACE,8CAoDF,8BACF,8BACF,+B,6CAtDU,qF,0BAwDR,wCACE,yBAOF,+B,6CAPE,iL,mEAhJZ,8CACE,2CAAM,mJACJ,4CAeA,iCAEA,6CAiDA,yCACE,yCACE,8CAwEA,gGAWF,8BACF,8BAEA,kCAEA,0CACE,2CACE,8CAAqD,sIACnD,0CACA,yCAAM,iCAAI,8BACZ,8BACF,8BACA,2CACE,8CACE,mCACF,8BACF,8BACF,8BACF,8BACF,8B,+EA1KqB,0EAiBA,oFAqDX,yFAAyD,e,0BA2IzD,0CACE,sCACE,sCAAI,uCAAW,8BACf,sCAAI,yBAAqB,8BAC3B,8BACA,sCACE,sCAAI,wCAAY,8BAChB,sCAAI,0BAAwC,8BAC9C,8BACF,wC,4CANQ,gFAIA,sGCrf5B,MAAMC,GAAiB,CAAC,CAAEC,KAAM,GAAIC,UCkB7B,M,MAAMC,EA+BX,YACUC,EACAC,EACAC,EACAC,EACDC,EACCC,EACAC,EACAnC,EACAoC,EACAC,GATA,KAAAR,gBACA,KAAAC,gBACA,KAAAC,wBACA,KAAAC,gBACD,KAAAC,cACC,KAAAC,eACA,KAAAC,kBACA,KAAAnC,gBACA,KAAAoC,SACA,KAAAC,QAGV,WAKE,GAJAnC,KAAKC,SAAU,EACfD,KAAKoC,QAAS,EAEdpC,KAAKqC,SAAWrC,KAAK2B,cAAcW,eAC9BtC,KAAKqC,SAER,YADArC,KAAKuC,OAIP,IAAIC,EAiEAC,EAzDJ,GANAzC,KAAKmC,MAAMO,YAAYC,UAAWC,IAChCJ,EAAOI,EAAMJ,OAGfxC,KAAK6C,WAAa7C,KAAKiC,gBAAgBa,gBAEnCN,IAAS,CAAC,OAAQ,QAAQO,SAASP,GAGrC,OAFAxC,KAAKe,WAAW,YAAa,SAAU,sBACvCf,KAAKuC,OAEA,IAAIC,GAAiB,SAATA,GAAoBxC,KAAK6C,WAArC,CAsDP,GAhDA7C,KAAK2B,cAAcqB,kBAAkBL,UAAWM,IAC9CjD,KAAKiD,SAAWA,IAGlBjD,KAAK4B,cAAcsB,gBAAgBP,UAAWQ,IAC5CnD,KAAKmD,OAASA,IAGhBnD,KAAKgC,aAAaoB,eAAeT,UAAWU,IAC1CrD,KAAKqD,MAAQA,IAGfrD,KAAKsD,SAAW,GAChBtD,KAAKuD,SAAW,GAChBvD,KAAKwD,SAAW,GAChBxD,KAAKyD,WAAa,GAClBzD,KAAK0D,gBAAkB,GACvB1D,KAAK2D,QAAS,EACd3D,KAAK4D,oBAAqB,EAE1B5D,KAAK6D,WAAa7D,KAAK+B,YAAY+B,oBACjC9D,KAAK+B,YAAYgC,cACf/D,KAAKqD,MAAMW,aAAaC,UACa,IAApCjE,KAAKmD,OAAOa,aAAaE,WAI9BlE,KAAKmE,mBAAoB,EACzBnE,KAAKoE,mBAAoB,EAEzBpE,KAAKqE,iBAAkB,EAEvBrE,KAAKwD,SAAWxD,KAAK+B,YAAYuC,cAEjCtE,KAAK6B,sBACF0C,+BACA5B,UAAW6B,IACVxE,KAAKuD,SAAWiB,IAGpBxE,KAAKqD,MAAMC,SAASmB,QAASC,IAC3B,MAAMC,EAAY3E,KAAKmD,OAAOG,SAASsB,KACpCnE,GAA0BA,EAAQoE,MAAQH,EAAWjE,SAExDT,KAAKsD,SAASwB,KAAKH,KAIjBnC,GAAiB,SAATA,EAAiB,CAC3B,MAAMrC,EAAOH,KAAKiC,gBAAgB8C,iBAClCtC,EAAMzC,KAAK+B,YAAY+B,oBAAoB3D,GAG7CH,KAAKgF,aAAe,IAAI,IAAU,CAChC7E,KAAM,IAAI,IAAYsC,GAAYzC,KAAK+B,YAAYkD,gBAAiB,CAClE5E,WAAY,CAAC,IAAWC,YAE1BC,UAAW,IAAI,IAAY,KAAM,CAAEF,WAAY,CAAC,IAAWC,YAC3DE,QAAS,IAAI,IAAY,KAAM,CAAEH,WAAY,CAAC,IAAWC,YACzDG,QAAS,IAAI,IAAY,GAAI,CAAEJ,WAAY,CAAC,IAAWC,YACvDI,QAAS,IAAI,IAAY,GAAI,CAAEL,WAAY,CAAC,IAAWC,YACvDK,MAAO,IAAI,IAAY,KAAM,CAAEN,WAAY,CAAC,IAAWC,YACvDM,YAAa,IAAI,IAAY,YAAa,CAAEP,WAAY,CAAC,IAAWC,cAGlEkC,GAAiB,SAATA,GAAmBxC,KAAK6C,WAClC7C,KAAKiC,gBAAgBiD,YAAYlF,KAAK6C,YAAYF,UAC/CwC,IACCnF,KAAKmF,SAAWA,EAEhBnF,KAAKgF,aAAaI,WAAW,CAC3BjF,KAAMH,KAAKmF,SAAShF,KACpBI,UAAWP,KAAKmF,SAAS5E,UACzBC,QAASR,KAAKmF,SAAS3E,QACvBC,QAAST,KAAKmF,SAAS1E,QACvBC,QAASV,KAAKmF,SAASzE,QACvBC,MAAOX,KAAKmF,SAASxE,MACrBC,YAAaZ,KAAKmF,SAASvE,cAG7BZ,KAAKC,SAAU,GAEhBoF,IACCrF,KAAKe,WAAW,YAAa,SAAUsE,GACvCrF,KAAKuC,SAITvC,KAAKC,SAAU,OA7FfD,KAAKe,WAAW,YAAa,SAAU,sBAiG3C,gBAAgBN,GACd,MAAMkE,EAAY3E,KAAKqD,MAAMC,SAASsB,KAAMF,GAAoBA,EAAWjE,UAAYA,GACnFkE,GAAaA,EAAUjE,SACzBV,KAAKgF,aAAaI,WAAW,CAAE1E,QAASiE,EAAUjE,UAItD,cACE,MAAMyE,EAAgBnF,KAAKgF,aAAahE,MAKxC,OAJAmE,EAASG,OAAStF,KAAKqC,SACvB8C,EAASlC,SAAWjD,KAAKiD,SAAS4B,IAClCM,EAAShC,OAASnD,KAAKmD,OAAO0B,IAC9BM,EAAS9B,MAAQrD,KAAKqD,MAAMwB,IACrB,OAAP,UAAYM,GAGd,0BACE,MAAMA,EAAgBnF,KAAKkF,cAM3B,GAJAlF,KAAK0D,gBAAkB,GAEvB1D,KAAK0D,gBAAgBoB,KAAKK,GAEtBnF,KAAK2D,QAAU3D,KAAK6D,YAAc7D,KAAKyD,WAAW8B,OAAS,EAAG,CAChE,MAAM9C,EAAM,MAEZ,IAAI+C,EAAmBxF,KAAK+B,YAAY0D,mBAAmBN,EAAShF,MACpE,MAEMuF,GAFqB1F,KAAK+B,YAAY0D,mBAAmBzF,KAAK6D,YAE7B2B,GAAoB/C,EAE3D,IAAK,IAAIkD,EAAI,EAAGA,EAAID,EAAUC,IAAK,CACjCH,GAAoB/C,EACpB,MAAMtC,EAAO,IAAIyF,KAAKJ,GACtB,GAAIxF,KAAKyD,WAAWV,SAAS5C,EAAK0F,UAAW,CAC3C,MAAMC,EAAW,iBACZX,GAELW,EAAY3F,KAAOH,KAAK+B,YAAY+B,oBAAoB3D,GACxDH,KAAK0D,gBAAgBoB,KAAKgB,MAMlC,qBAAqBH,GACnB3F,KAAK0D,gBAAgBqC,OAAOJ,EAAG,GAGjC,yBAAyBK,GACvBhG,KAAK8B,cACFmE,KAAK,EAAyB,CAC7BC,QAAS,CACP5C,SAAUtD,KAAKsD,SACfC,SAAUvD,KAAKuD,SACfnD,eAAgBJ,KAAKI,eACrB4F,KAAMA,KAGT1E,QAAQqB,UAAWwC,IACdA,EACFnF,KAAKmG,mBAAmBhB,GAExBnF,KAAKoG,yBAKb,mBAAmBjB,EAAeQ,GAChC3F,KAAKI,eAAiB,OAAH,UAAQ+E,GAC3BnF,KAAKqG,oBAAsBV,EAC3B3F,KAAK4D,oBAAqB,EAC1B5D,KAAKsG,yBAAyB,QAGhC,oBAAoBnB,EAAeQ,GACjC3F,KAAKI,eAAiB,OAAH,UAAQ+E,GAC3BnF,KAAKqG,oBAAsBV,EAC3B3F,KAAKsG,yBAAyB,SAGhC,mBAAmBnB,GACbnF,KAAK4D,mBACP5D,KAAK0D,gBAAgB1D,KAAKqG,qBAAuB,OAAH,UAAQlB,GAEtDnF,KAAK0D,gBAAgBqC,OAAO/F,KAAKqG,oBAAsB,EAAG,EAAG,OAAF,UAAOlB,IAEpEnF,KAAKoG,uBAGP,uBACEpG,KAAKqG,oBAAsB,KAC3BrG,KAAKI,eAAiB,KACtBJ,KAAK4D,oBAAqB,EAG5B,yBACE5D,KAAKmE,mBAAoB,EACzBnE,KAAKuG,0BAGP,kBAAkBC,EAAc/D,GAE9B,GADAzC,KAAKoE,mBAAoB,EACrBoC,EACFxG,KAAKyD,WAAWqB,KAAKrC,OAChB,CACL,MAAMkD,EAAI3F,KAAKyD,WAAWgD,QAAQhE,GAClCzC,KAAKyD,WAAWsC,OAAOJ,EAAG,GAE5B3F,KAAKuG,0BAGP,eACEvG,KAAK0G,QAAQC,WAGf,qBACE3G,KAAKgF,aAAa4B,mBACd5G,KAAKgF,aAAalE,QACpBd,KAAKe,WAAW,YAAa,SAAU,qCAIpCf,KAAKmF,UACRnF,KAAKuG,0BAGPvG,KAAK0G,QAAQG,QAGf,2BACM7G,KAAKmF,YAEEnF,KAAK2D,QAAW3D,KAAK6D,WAGrB7D,KAAK2D,QAAqC,IAA3B3D,KAAKyD,WAAW8B,OACxCvF,KAAKe,WAAW,YAAa,SAAU,uCAIzCf,KAAK0G,QAAQG,OAPX7G,KAAKe,WAAW,YAAa,SAAU,mCAU3C,eAEE,GADAf,KAAKgF,aAAa4B,mBACd5G,KAAKgF,aAAalE,QACpBd,KAAKe,WAAW,YAAa,SAAU,yCAMzC,GAFAf,KAAKoC,QAAS,EAETpC,KAAKmF,SAWH,CACL,MAAMA,EAAgBnF,KAAKkF,cAC3BC,EAASN,IAAM7E,KAAK6C,WAEpB7C,KAAKiC,gBAAgB6E,aAAa3B,GAAUxC,UACzCoE,IACC/G,KAAKe,WAAW,YAAa,UAAW,kCACxCf,KAAKuC,QAENyE,IACChH,KAAKe,WAAW,YAAa,SAAUiG,GACvChH,KAAKoC,QAAS,SArBlBpC,KAAKiC,gBAAgBgF,YAAYjH,KAAK0D,iBAAiBf,UACpDoE,IACC/G,KAAKe,WAAW,YAAa,UAAW,oCACxCf,KAAKuC,QAENyE,IACChH,KAAKe,WAAW,YAAa,SAAUiG,GACvChH,KAAKoC,QAAS,IAoBtB,WAAW8E,GACT,MAAMzG,EAAUT,KAAKsD,SAASsB,KAAMF,GAA6BA,EAAWG,MAAQqC,GACpF,OAAIzG,EACKA,EAAQA,QAGV,KAGT,WAAW0G,GACT,MAAMzG,EAAUV,KAAKuD,SAASqB,KAC3BwC,GAAoCA,EAAWC,WAAaF,GAE/D,OAAIzG,EACKA,EAAQ4G,KAGV,KAGT,gBACE,MAAM7D,EAAa,GAOnB,OANAzD,KAAKwD,SAASiB,QAAQ,CAAChC,EAAakD,KAC9B3F,KAAKyD,WAAWV,SAAS4C,IAC3BlC,EAAWqB,KAAKrC,KAIbgB,EAAW8D,KAAK,MAGjB,WAAWtG,EAAeC,EAAaC,GAC7CnB,KAAKF,cAAcsB,KAAKF,EAAQC,EAAS,CACvCF,WACAC,WAIJ,OACElB,KAAKkC,OAAOsF,SAAS,CAAC,OAAQ,CAAEC,WAAYzH,KAAKmC,QAGnD,cACEnC,KAAKiC,gBAAgByF,mBACrB1H,KAAKiC,gBAAgB0F,oBACrB3H,KAAKiC,gBAAgB2F,sB,6CAtYZlG,GAAoB,+X,mDAApBA,EAAoB,yD,MAAA,K,6gHFtBjC,2CACE,kDACE,yCACE,yCACE,sCAAI,yBAAwC,8BAC9C,8BACA,yCACE,4CAAmE,qDAAS,EAAAa,UAC1E,kCACF,8BACF,8BACF,8BACF,8BAEA,gDACE,0CACE,0CACE,mDACE,8CACE,2CAAiC,sDAAU,EAAAsF,wBACzC,0CACE,0CACE,2CACE,6CAAsC,kCAAK,8BAC3C,wCAiBA,sDAUF,8BACF,8BAEA,0CACE,2CACE,6CAAgD,iDAAoB,8BACpE,wCAgBA,sDAaF,8BACF,8BAEA,0CACE,2CACE,6CAAmD,+CAAkB,8BACrE,wCAiBA,sDAYF,8BACF,8BAEA,0CACE,2CACE,6CAAyC,qCAAQ,8BACjD,iDAaE,+DAAkB,EAAAC,gBAAA,MAElB,iDAAoB,2CAAc,8BAClC,mDAGF,8BACA,sDAYF,8BACF,8BAEA,0CACE,2CACE,6CAAuC,mCAAM,8BAC7C,wCAgBA,sDAUF,8BACF,8BAEA,0CACE,2CACE,6CAAyC,qCAAQ,8BACjD,iDAcE,iDAAoB,2CAAc,8BAClC,mDAGF,8BACA,sDAYF,8BACF,8BAEA,0CACE,2CACE,6CAA8C,0CAAa,8BAC3D,iDAcE,iDAA8B,yCAAW,8BACzC,iDAA2B,qCAAO,8BACpC,8BACA,sDAaF,8BACF,8BAUF,8BACA,kCACA,0CACE,0CACE,8CACE,mCACF,8BACF,8BACF,8BACF,8BACF,8BAEA,mDA8KA,+CACE,2CACE,2CACE,6CACE,0CACE,uCACE,uCAAI,iCAAI,8BACR,uCAAI,0BAAqD,8BAC3D,8BACA,uCACE,uCAAI,gDAAmB,8BACvB,uCAAI,0BAAkC,8BACxC,8BACA,uCACE,uCAAI,8CAAiB,8BACrB,uCAAI,0BAAgC,8BACtC,8BACA,uCACE,uCAAI,oCAAO,8BACX,uCAAI,0BAA4C,8BAClD,8BACA,wCACE,wCAAI,mCAAK,8BACT,wCAAI,2BAA8B,8BACpC,8BACA,wCACE,wCAAI,qCAAO,8BACX,wCAAI,2BAA4C,8BAClD,8BACA,wCACE,wCAAI,0CAAY,8BAChB,wCAAI,2BAAoC,8BAC1C,8BACA,wCACE,wCAAI,oCAAM,8BACV,wCAAI,2BAA2B,8BACjC,8BACA,yDAUF,8BACF,8BACF,8BAEA,mCAEA,2CACE,4CACE,+CAKE,qDAAS,EAAAC,kBAGT,2CACA,0CAAM,kCAAI,8BACZ,8BACF,8BACA,4CACE,+CAIE,qDAAS,EAAA1G,kBAMT,0CAAM,oCAAM,8BACd,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,+B,MAjiBY,sGAaiB,mEAAe,4BACzB,oFACD,kFAUI,sHAA8D,2GAa9D,qIAuBA,2KASA,+IA2BA,uKASA,2IAuBA,uKAUW,4EAKX,2IAyBA,mKASA,uIAqBA,uKASW,4EAKX,2IAuBA,+KAYA,mJAmCqB,0EAqLjB,mHAIA,6FAIA,2FAIA,yGAIA,yFAIA,yGAIA,+FAIA,kFAEQ,uEAwBd,2EAYA,2EAAmB,wB,mrBEhgBhC,KDZA,a,MAAM2G,G,yDAAAA,I,+EAAAA,IAAwB,SAH1B,CAAC,IAAaC,SAAS1G,KACtB,O,GAEL,GE2BA,S,MAAM2G,G,yDAAAA,I,+EAAAA,IAAiB,SAhBnB,CACP,IACA,GACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,Q,GAGG","file":"x","sourcesContent":["<nb-card class=\"repeat-schedule-box\">\n  <nb-card-header>\n    <h3>{{ type }} Schedule</h3>\n  </nb-card-header>\n\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <form [formGroup]=\"repeatScheduleForm\" (submit)=\"saveSchedule()\">\n          <div class=\"row\">\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-date\">Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-date\"\n                  name=\"date\"\n                  formControlName=\"date\"\n                  placeholder=\"Date\"\n                  fullWidth\n                  disabled\n                />\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-schedule-title\">Schedule Start Time:</label>\n                <input\n                  type=\"time\"\n                  nbInput\n                  id=\"input-schedule-title\"\n                  name=\"title\"\n                  formControlName=\"startTime\"\n                  placeholder=\"Schedule Start Time\"\n                  fullWidth\n                  [status]=\"\n                    repeatScheduleForm.get('startTime').touched\n                      ? repeatScheduleForm.get('startTime').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    repeatScheduleForm.get('startTime').invalid &&\n                    repeatScheduleForm.get('startTime').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"repeatScheduleForm.get('startTime').errors?.required\"\n                  >\n                    Schedule Start Time is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-schedule-end-time\">Schedule End Time:</label>\n                <input\n                  type=\"time\"\n                  nbInput\n                  id=\"input-schedule-end-time\"\n                  name=\"endTime\"\n                  min=\"0\"\n                  formControlName=\"endTime\"\n                  placeholder=\"Schedule End Time\"\n                  fullWidth\n                  [status]=\"\n                    repeatScheduleForm.get('endTime').touched\n                      ? repeatScheduleForm.get('endTime').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    repeatScheduleForm.get('endTime').invalid &&\n                    repeatScheduleForm.get('endTime').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"repeatScheduleForm.get('endTime').errors?.required\"\n                  >\n                    Schedule End Time is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-subject\">Subject:</label>\n                <nb-select\n                  id=\"input-subject\"\n                  name=\"subject\"\n                  formControlName=\"subject\"\n                  placeholder=\"Subject\"\n                  fullWidth\n                  [status]=\"\n                    repeatScheduleForm.get('subject').touched\n                      ? repeatScheduleForm.get('subject').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Subject</nb-option>\n                  <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n                    subject.subject\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    repeatScheduleForm.get('subject').invalid &&\n                    repeatScheduleForm.get('subject').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"repeatScheduleForm.get('subject').errors?.required\"\n                  >\n                    Subject is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-topic\">Topic:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-topic\"\n                  name=\"topic\"\n                  formControlName=\"topic\"\n                  placeholder=\"Topic\"\n                  fullWidth\n                  [status]=\"\n                    repeatScheduleForm.get('topic').touched\n                      ? repeatScheduleForm.get('topic').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    repeatScheduleForm.get('topic').invalid &&\n                    repeatScheduleForm.get('topic').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"repeatScheduleForm.get('topic').errors?.required\"\n                  >\n                    Topic is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-teacher\">Teacher:</label>\n                <nb-select\n                  id=\"input-teacher\"\n                  name=\"teacher\"\n                  formControlName=\"teacher\"\n                  placeholder=\"Teacher\"\n                  fullWidth\n                  [status]=\"\n                    repeatScheduleForm.get('teacher').touched\n                      ? repeatScheduleForm.get('teacher').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Teacher</nb-option>\n                  <nb-option *ngFor=\"let teacher of teachers\" [value]=\"teacher.employee\">{{\n                    teacher.name\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    repeatScheduleForm.get('teacher').invalid &&\n                    repeatScheduleForm.get('teacher').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"repeatScheduleForm.get('teacher').errors?.required\"\n                  >\n                    Teacher is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4 col-sm-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-session-type\">Session Type:</label>\n                <nb-select\n                  id=\"input-session-type\"\n                  name=\"sessionType\"\n                  formControlName=\"sessionType\"\n                  placeholder=\"sessionType\"\n                  fullWidth\n                  [status]=\"\n                    repeatScheduleForm.get('sessionType').touched\n                      ? repeatScheduleForm.get('sessionType').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"classroom\"> Class Room </nb-option>\n                  <nb-option value=\"online\"> Online </nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    repeatScheduleForm.get('sessionType').invalid &&\n                    repeatScheduleForm.get('sessionType').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"repeatScheduleForm.get('sessionType').errors?.required\"\n                  >\n                    Session Type is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n          <hr />\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <button\n                type=\"button\"\n                class=\"float-right\"\n                nbButton\n                size=\"small\"\n                status=\"danger\"\n                (click)=\"onClose()\"\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" class=\"float-right mr-2\" nbButton size=\"small\" status=\"basic\">\n                Save\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { NbToastrService, NbDialogRef } from '@nebular/theme';\nimport { EmployeeNameIdModel } from './../../../../../../models/branch-employee.model';\nimport { SubjectModel } from './../../../../../../models/course.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ngx-repeat-schedule',\n  templateUrl: './repeat-schedule.component.html',\n  styleUrls: ['./repeat-schedule.component.scss'],\n})\nexport class RepeatScheduleComponent implements OnInit {\n  loading: boolean;\n  repeatScheduleForm: FormGroup;\n\n  @Input() type: string;\n  @Input() repeatSchedule: any;\n  @Input() subjects: SubjectModel[];\n  @Input() teachers: EmployeeNameIdModel[];\n\n  constructor(\n    private toastrService: NbToastrService,\n    protected ref: NbDialogRef<RepeatScheduleComponent>,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.repeatScheduleForm = new FormGroup({\n      date: new FormControl(this.repeatSchedule.date, {\n        validators: [Validators.required],\n      }),\n      startTime: new FormControl(this.repeatSchedule.startTime, {\n        validators: [Validators.required],\n      }),\n      endTime: new FormControl(this.repeatSchedule.endTime, { validators: [Validators.required] }),\n      subject: new FormControl(this.repeatSchedule.subject ? this.repeatSchedule.subject : '', {\n        validators: [Validators.required],\n      }),\n      teacher: new FormControl(this.repeatSchedule.teacher ? this.repeatSchedule.teacher : '', {\n        validators: [Validators.required],\n      }),\n      topic: new FormControl(this.repeatSchedule.topic ? this.repeatSchedule.topic : 'classroom', {\n        validators: [Validators.required],\n      }),\n      sessionType: new FormControl(this.repeatSchedule.sessionType, {\n        validators: [Validators.required],\n      }),\n    });\n  }\n  onClose() {\n    this.ref.close();\n  }\n\n  saveSchedule() {\n    if (this.repeatScheduleForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Schedule Fields are Required');\n      return;\n    }\n    this.repeatSchedule.date = this.repeatScheduleForm.value.date;\n    this.repeatSchedule.startTime = this.repeatScheduleForm.value.startTime;\n    this.repeatSchedule.endTime = this.repeatScheduleForm.value.endTime;\n    this.repeatSchedule.subject = this.repeatScheduleForm.value.subject;\n    this.repeatSchedule.topic = this.repeatScheduleForm.value.topic;\n    this.repeatSchedule.teacher = this.repeatScheduleForm.value.teacher;\n    this.repeatSchedule.sessionType = this.repeatScheduleForm.value.sessionType;\n\n    this.ref.close(this.repeatSchedule);\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-9\">\n        <h3>{{ schedule ? 'Edit' : 'Add' }} Schedule</h3>\n      </div>\n      <div class=\"col-3\">\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n          Back\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n          <nb-step [stepControl]=\"scheduleForm\" label=\"Schedule Details\">\n            <form [formGroup]=\"scheduleForm\" (submit)=\"submitScheduleForm()\">\n              <div class=\"row\">\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-date\">Date:</label>\n                    <input\n                      type=\"date\"\n                      nbInput\n                      id=\"input-date\"\n                      name=\"date\"\n                      [min]=\"schedule ? schedule.date : dateService.getDateString()\"\n                      formControlName=\"date\"\n                      placeholder=\"Date\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('date').touched\n                          ? scheduleForm.get('date').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"scheduleForm.get('date').invalid && scheduleForm.get('date').touched\"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('date').errors?.required\"\n                      >\n                        Date is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-schedule-title\">Schedule Start Time:</label>\n                    <input\n                      type=\"time\"\n                      nbInput\n                      id=\"input-schedule-title\"\n                      name=\"title\"\n                      formControlName=\"startTime\"\n                      placeholder=\"Schedule Start Time\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('startTime').touched\n                          ? scheduleForm.get('startTime').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        scheduleForm.get('startTime').invalid &&\n                        scheduleForm.get('startTime').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('startTime').errors?.required\"\n                      >\n                        Schedule Start Time is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-schedule-end-time\">Schedule End Time:</label>\n                    <input\n                      type=\"time\"\n                      nbInput\n                      id=\"input-schedule-end-time\"\n                      name=\"endTime\"\n                      min=\"0\"\n                      formControlName=\"endTime\"\n                      placeholder=\"Schedule End Time\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('endTime').touched\n                          ? scheduleForm.get('endTime').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        scheduleForm.get('endTime').invalid && scheduleForm.get('endTime').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('endTime').errors?.required\"\n                      >\n                        Schedule End Time is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-subject\">Subject:</label>\n                    <nb-select\n                      id=\"input-subject\"\n                      name=\"subject\"\n                      formControlName=\"subject\"\n                      placeholder=\"Subject\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('subject').touched\n                          ? scheduleForm.get('subject').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                      (selectedChange)=\"onSelectSubject($event)\"\n                    >\n                      <nb-option value=\"\">Select Subject</nb-option>\n                      <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n                        subject.subject\n                      }}</nb-option>\n                    </nb-select>\n                    <ng-container\n                      *ngIf=\"\n                        scheduleForm.get('subject').invalid && scheduleForm.get('subject').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('subject').errors?.required\"\n                      >\n                        Subject is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-topic\">Topic:</label>\n                    <input\n                      type=\"text\"\n                      nbInput\n                      id=\"input-topic\"\n                      name=\"topic\"\n                      formControlName=\"topic\"\n                      placeholder=\"Topic\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('topic').touched\n                          ? scheduleForm.get('topic').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"scheduleForm.get('topic').invalid && scheduleForm.get('topic').touched\"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('topic').errors?.required\"\n                      >\n                        Topic is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-teacher\">Teacher:</label>\n                    <nb-select\n                      id=\"input-teacher\"\n                      name=\"teacher\"\n                      formControlName=\"teacher\"\n                      placeholder=\"Teacher\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('teacher').touched\n                          ? scheduleForm.get('teacher').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    >\n                      <nb-option value=\"\">Select Teacher</nb-option>\n                      <nb-option *ngFor=\"let teacher of teachers\" [value]=\"teacher.employee\">{{\n                        teacher.name\n                      }}</nb-option>\n                    </nb-select>\n                    <ng-container\n                      *ngIf=\"\n                        scheduleForm.get('teacher').invalid && scheduleForm.get('teacher').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('teacher').errors?.required\"\n                      >\n                        Teacher is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-4 col-sm-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-session-type\">Session Type:</label>\n                    <nb-select\n                      id=\"input-session-type\"\n                      name=\"sessionType\"\n                      formControlName=\"sessionType\"\n                      placeholder=\"sessionType\"\n                      fullWidth\n                      [status]=\"\n                        scheduleForm.get('sessionType').touched\n                          ? scheduleForm.get('sessionType').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    >\n                      <nb-option value=\"classroom\"> Class Room </nb-option>\n                      <nb-option value=\"online\"> Online </nb-option>\n                    </nb-select>\n                    <ng-container\n                      *ngIf=\"\n                        scheduleForm.get('sessionType').invalid &&\n                        scheduleForm.get('sessionType').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"scheduleForm.get('sessionType').errors?.required\"\n                      >\n                        Session Type is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <!-- <div class=\"col-12 pt-2\" *ngIf=\"true\">\n                  <p>\n                    <i class=\"fa fa-info-circle\"></i>\n                    If You want to create online lecture please update your Zoom Online Class\n                    Credentials in\n                    <strong class=\"pointer\" routerLink=\"/institute/settings\">Settings</strong>\n                  </p>\n                </div> -->\n              </div>\n              <hr />\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"basic\">\n                    Next\n                  </button>\n                </div>\n              </div>\n            </form>\n          </nb-step>\n\n          <nb-step label=\"Schedule Repeat\" *ngIf=\"!schedule\">\n            <form (submit)=\"submitScheduleRepeatForm()\">\n              <div class=\"row\" *ngIf=\"!schedule\">\n                <div class=\"col-12\">\n                  <div class=\"form-control-group\">\n                    <nb-checkbox\n                      id=\"input-session-repeat\"\n                      name=\"repeat\"\n                      [(ngModel)]=\"repeat\"\n                      placeholder=\"repeat\"\n                    >\n                      Repeat This Schedule for Another Days\n                    </nb-checkbox>\n                  </div>\n                </div>\n              </div>\n\n              <br />\n\n              <div class=\"row\" *ngIf=\"repeat && !schedule\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-repeat-days\">Select Repeat Days: </label>\n                    <div class=\"week-day-selector\">\n                      <label *ngFor=\"let day of weekDays; let i = index\">\n                        <input\n                          type=\"checkbox\"\n                          [id]=\"weekDays[i]\"\n                          class=\"weekday\"\n                          (change)=\"onSelectRepeatDay($event.target.checked, i)\"\n                        />\n                        <label [for]=\"weekDays[i]\">{{ weekDays[i] }}</label>\n                      </label>\n                    </div>\n                    <ng-container *ngIf=\"repeat && repeatDaysTouched\">\n                      <p class=\"caption status-danger\" *ngIf=\"repeatDays.length === 0\">\n                        *Please Select Repeat Day!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-repeat-up-to\">Repeat up To:</label>\n                    <input\n                      type=\"date\"\n                      nbInput\n                      id=\"input-repeat-up-to\"\n                      name=\"repeatUpTo\"\n                      [min]=\"scheduleForm.value.date\"\n                      [(ngModel)]=\"repeatUpTo\"\n                      placeholder=\"Date\"\n                      fullWidth\n                      [status]=\"\n                        repeat && repeatUpToTouched ? (!repeatUpTo ? 'danger' : 'success') : 'basic'\n                      \"\n                      (change)=\"onChangeRepeatUpToDate()\"\n                    />\n                    <ng-container *ngIf=\"repeat && repeatUpToTouched\">\n                      <p class=\"caption status-danger\" *ngIf=\"!repeatUpTo\">\n                        *Repeat Up To Date is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <div\n                    class=\"table-responsive\"\n                    *ngIf=\"repeatSchedules.length > 0; else noRepeatSchedule\"\n                  >\n                    <table class=\"table\">\n                      <thead>\n                        <tr>\n                          <th>#</th>\n                          <th>Day</th>\n                          <th>Date</th>\n                          <th>Time</th>\n                          <th>Subject</th>\n                          <th>Teacher</th>\n                          <th colspan=\"3\">Action</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr *ngFor=\"let schedule of repeatSchedules; let i = index\">\n                          <td>{{ i + 1 }}</td>\n                          <td>{{ dateService.getDay(schedule.date) }}</td>\n                          <td>{{ dateService.formatDate(schedule.date) }}</td>\n                          <td>\n                            {{ dateService.formatTime(schedule.startTime) }} -\n                            {{ dateService.formatTime(schedule.endTime) }}\n                          </td>\n                          <td>\n                            {{ getSubject(schedule.subject) }}\n                          </td>\n                          <td>\n                            {{ getTeacher(schedule.teacher) }}\n                          </td>\n                          <td>\n                            <button\n                              type=\"button\"\n                              nbTooltip=\"Edit\"\n                              nbButton\n                              size=\"small\"\n                              status=\"basic\"\n                              (click)=\"editRepeatSchedule(schedule, i)\"\n                            >\n                              <nb-icon icon=\"edit-outline\"></nb-icon>\n                            </button>\n                          </td>\n                          <td>\n                            <button\n                              type=\"button\"\n                              nbTooltip=\"Clone\"\n                              nbButton\n                              size=\"small\"\n                              status=\"primary\"\n                              (click)=\"cloneRepeatSchedule(schedule, i)\"\n                            >\n                              <nb-icon icon=\"copy-outline\"></nb-icon>\n                            </button>\n                          </td>\n                          <td>\n                            <button\n                              *ngIf=\"i !== 0\"\n                              type=\"button\"\n                              nbTooltip=\"Remove\"\n                              nbButton\n                              size=\"small\"\n                              status=\"danger\"\n                              (click)=\"removeRepeatSchedule(i)\"\n                            >\n                              <nb-icon icon=\"close-outline\"></nb-icon>\n                            </button>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  <ng-template #noRepeatSchedule>\n                    <p class=\"text-center pt-5 pb-5\">\n                      {{\n                        repeatDays.length === 0\n                          ? 'Select Repeat Day'\n                          : !repeatUpTo\n                          ? 'Select Repeat Up To Date'\n                          : 'No Repeat Schedule'\n                      }}\n                    </p>\n                  </ng-template>\n                </div>\n              </div>\n\n              <hr />\n\n              <div class=\"row\">\n                <div class=\"col-sm-6 text-left\">\n                  <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\n                    <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                    <span>prev</span>\n                  </button>\n                </div>\n                <div class=\"col-sm-6 text-left\">\n                  <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"basic\">\n                    Next\n                  </button>\n                </div>\n              </div>\n            </form>\n          </nb-step>\n\n          <nb-step label=\"Submit\">\n            <div class=\"step-container\">\n              <div class=\"table-responsive\">\n                <table class=\"table table-bordered\">\n                  <tbody>\n                    <tr>\n                      <th>Date</th>\n                      <td>{{ dateService.formatDate(scheduleForm.value.date) }}</td>\n                    </tr>\n                    <tr>\n                      <th>Schedule Start Time</th>\n                      <td>{{ scheduleForm.value.startTime }}</td>\n                    </tr>\n                    <tr>\n                      <th>Schedule End Time</th>\n                      <td>{{ scheduleForm.value.endTime }}</td>\n                    </tr>\n                    <tr>\n                      <th>Subject</th>\n                      <td>{{ getSubject(scheduleForm.value.subject) }}</td>\n                    </tr>\n                    <tr>\n                      <th>Topic</th>\n                      <td>{{ scheduleForm.value.topic }}</td>\n                    </tr>\n                    <tr>\n                      <th>Teacher</th>\n                      <td>{{ getTeacher(scheduleForm.value.teacher) }}</td>\n                    </tr>\n                    <tr>\n                      <th>Session Type</th>\n                      <td>{{ scheduleForm.value.sessionType }}</td>\n                    </tr>\n                    <tr>\n                      <th>Repeat</th>\n                      <td>{{ repeat ? 'Yes' : 'No' }}</td>\n                    </tr>\n                    <ng-container *ngIf=\"repeat\">\n                      <tr>\n                        <th>Repeat Days</th>\n                        <td>{{ getRepeatDays() }}</td>\n                      </tr>\n                      <tr>\n                        <th>Repeat Up To</th>\n                        <td>{{ dateService.formatDate(repeatUpTo) }}</td>\n                      </tr>\n                    </ng-container>\n                  </tbody>\n                </table>\n              </div>\n\n              <hr />\n\n              <div class=\"row\">\n                <div class=\"col-sm-6 text-left\">\n                  <button\n                    type=\"button\"\n                    class=\"\"\n                    nbButton\n                    size=\"small\"\n                    (click)=\"previousStep()\"\n                    [disabled]=\"submit\"\n                  >\n                    <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                    <span>prev</span>\n                  </button>\n                </div>\n                <div class=\"col-sm-6 text-right\">\n                  <button\n                    type=\"button\"\n                    nbButton\n                    size=\"small\"\n                    (click)=\"saveSchedule()\"\n                    [disabled]=\"submit\"\n                    [nbSpinner]=\"submit\"\n                    nbSpinnerStatus=\"primary\"\n                    nbSpinnerSize=\"small\"\n                  >\n                    <span>Submit</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </nb-step>\n        </nb-stepper>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { AddScheduleComponent } from './add-schedule.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [{ path: '', component: AddScheduleComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddScheduleRoutingModule {}\n","import { RepeatScheduleComponent } from './repeat-schedule/repeat-schedule.component';\nimport { BranchEmployeeService } from './../../../../../services/branch-employee.service';\nimport { EmployeeNameIdModel } from './../../../../../models/branch-employee.model';\nimport { ScheduleService } from './../../../../../services/schedule.service';\nimport { NbToastrService, NbStepperComponent, NbDialogService } from '@nebular/theme';\nimport { BatchService } from './../../../../../services/batch.service';\nimport { CourseService } from './../../../../../services/course.service';\nimport { BatchModel } from './../../../../../models/batch.model';\nimport { CourseModel, SubjectModel } from './../../../../../models/course.model';\nimport { CategoryModel } from './../../../../../models/branch.model';\nimport { ScheduleModel } from './../../../../../models/schedule.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { DateService } from './../../../../../services/shared-services/date.service';\n\n@Component({\n  selector: 'ngx-add-schedule',\n  templateUrl: './add-schedule.component.html',\n  styleUrls: ['./add-schedule.component.scss'],\n})\nexport class AddScheduleComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  branchId: string;\n  category: CategoryModel;\n  course: CourseModel;\n  batch: BatchModel;\n  scheduleForm: FormGroup;\n\n  weekDays: string[];\n  repeat: boolean;\n  repeatUpTo: string;\n  repeatDays: number[];\n  scheduleId: string;\n  repeatSchedules: any[];\n  repeatSchedule: any;\n  repeatScheduleEdit: boolean;\n  repeatScheduleIndex: number;\n\n  schedule: ScheduleModel;\n  subjects: SubjectModel[];\n  teachers: EmployeeNameIdModel[];\n\n  repeatUpToTouched: boolean;\n  repeatDaysTouched: boolean;\n\n  weekdaysTouched: boolean;\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private branchEmployeeService: BranchEmployeeService,\n    private dialogService: NbDialogService,\n    public dateService: DateService,\n    private batchService: BatchService,\n    private scheduleService: ScheduleService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    this.scheduleId = this.scheduleService.getScheduleId();\n\n    if (mode && !['edit', 'date'].includes(mode)) {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.back();\n      return;\n    } else if (mode && mode === 'edit' && !this.scheduleId) {\n      this.showToastr('top-right', 'danger', 'Schedule Not Found');\n      // this.back()\n      return;\n    }\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.subjects = [];\n    this.teachers = [];\n    this.weekDays = [];\n    this.repeatDays = [];\n    this.repeatSchedules = [];\n    this.repeat = false;\n    this.repeatScheduleEdit = false;\n\n    this.repeatUpTo = this.dateService.convertToDateString(\n      this.dateService.addDaysInDate(\n        this.batch.basicDetails.startDate,\n        +this.course.basicDetails.duration * 30,\n      ),\n    );\n\n    this.repeatUpToTouched = false;\n    this.repeatDaysTouched = false;\n\n    this.weekdaysTouched = false;\n\n    this.weekDays = this.dateService.getWeekDays();\n\n    this.branchEmployeeService\n      .getBranchEmployeeNameIdsData()\n      .subscribe((employees: EmployeeNameIdModel[]) => {\n        this.teachers = employees;\n      });\n\n    this.batch.subjects.forEach((curSubject: any) => {\n      const mySubject = this.course.subjects.find(\n        (subject: SubjectModel) => subject._id === curSubject.subject,\n      );\n      this.subjects.push(mySubject);\n    });\n\n    let day: string;\n    if (mode && mode === 'date') {\n      const date = this.scheduleService.getScheduleDay();\n      day = this.dateService.convertToDateString(date);\n    }\n\n    this.scheduleForm = new FormGroup({\n      date: new FormControl(day ? day : this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n      startTime: new FormControl(null, { validators: [Validators.required] }),\n      endTime: new FormControl(null, { validators: [Validators.required] }),\n      subject: new FormControl('', { validators: [Validators.required] }),\n      teacher: new FormControl('', { validators: [Validators.required] }),\n      topic: new FormControl(null, { validators: [Validators.required] }),\n      sessionType: new FormControl('classroom', { validators: [Validators.required] }),\n    });\n\n    if (mode && mode === 'edit' && this.scheduleId) {\n      this.scheduleService.getSchedule(this.scheduleId).subscribe(\n        (schedule: ScheduleModel) => {\n          this.schedule = schedule;\n\n          this.scheduleForm.patchValue({\n            date: this.schedule.date,\n            startTime: this.schedule.startTime,\n            endTime: this.schedule.endTime,\n            subject: this.schedule.subject,\n            teacher: this.schedule.teacher,\n            topic: this.schedule.topic,\n            sessionType: this.schedule.sessionType,\n          });\n\n          this.loading = false;\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.back();\n        },\n      );\n    } else {\n      this.loading = false;\n    }\n  }\n\n  onSelectSubject(subject: any) {\n    const mySubject = this.batch.subjects.find((curSubject: any) => curSubject.subject === subject);\n    if (mySubject && mySubject.teacher) {\n      this.scheduleForm.patchValue({ teacher: mySubject.teacher });\n    }\n  }\n\n  getSchedule() {\n    const schedule: any = this.scheduleForm.value;\n    schedule.branch = this.branchId;\n    schedule.category = this.category._id;\n    schedule.course = this.course._id;\n    schedule.batch = this.batch._id;\n    return { ...schedule };\n  }\n\n  CalculateRepeatSchedule() {\n    const schedule: any = this.getSchedule();\n\n    this.repeatSchedules = [];\n\n    this.repeatSchedules.push(schedule);\n\n    if (this.repeat && this.repeatUpTo && this.repeatDays.length > 0) {\n      const day = 24 * 60 * 60 * 1000; // 1 Day mille-seconds\n\n      let scheduleDateInMS = this.dateService.dateToMilliseconds(schedule.date);\n      const repeatUpToDateInMS = this.dateService.dateToMilliseconds(this.repeatUpTo);\n\n      const noOfDays = (repeatUpToDateInMS - scheduleDateInMS) / day;\n\n      for (let i = 0; i < noOfDays; i++) {\n        scheduleDateInMS += day;\n        const date = new Date(scheduleDateInMS);\n        if (this.repeatDays.includes(date.getDay())) {\n          const newSchedule: any = {\n            ...schedule,\n          };\n          newSchedule.date = this.dateService.convertToDateString(date);\n          this.repeatSchedules.push(newSchedule);\n        }\n      }\n    }\n  }\n\n  removeRepeatSchedule(i: number) {\n    this.repeatSchedules.splice(i, 1);\n  }\n\n  openRepeatScheduleDialog(type: string) {\n    this.dialogService\n      .open(RepeatScheduleComponent, {\n        context: {\n          subjects: this.subjects,\n          teachers: this.teachers,\n          repeatSchedule: this.repeatSchedule,\n          type: type,\n        },\n      })\n      .onClose.subscribe((schedule: any) => {\n        if (schedule) {\n          this.saveRepeatSchedule(schedule);\n        } else {\n          this.cancelRepeatSchedule();\n        }\n      });\n  }\n\n  editRepeatSchedule(schedule: any, i: number) {\n    this.repeatSchedule = { ...schedule };\n    this.repeatScheduleIndex = i;\n    this.repeatScheduleEdit = true;\n    this.openRepeatScheduleDialog('Edit');\n  }\n\n  cloneRepeatSchedule(schedule: any, i: number) {\n    this.repeatSchedule = { ...schedule };\n    this.repeatScheduleIndex = i;\n    this.openRepeatScheduleDialog('Clone');\n  }\n\n  saveRepeatSchedule(schedule: any) {\n    if (this.repeatScheduleEdit) {\n      this.repeatSchedules[this.repeatScheduleIndex] = { ...schedule };\n    } else {\n      this.repeatSchedules.splice(this.repeatScheduleIndex + 1, 0, { ...schedule });\n    }\n    this.cancelRepeatSchedule();\n  }\n\n  cancelRepeatSchedule() {\n    this.repeatScheduleIndex = null;\n    this.repeatSchedule = null;\n    this.repeatScheduleEdit = false;\n  }\n\n  onChangeRepeatUpToDate() {\n    this.repeatUpToTouched = true;\n    this.CalculateRepeatSchedule();\n  }\n\n  onSelectRepeatDay(checked: any, day: number) {\n    this.repeatDaysTouched = true;\n    if (checked) {\n      this.repeatDays.push(day);\n    } else {\n      const i = this.repeatDays.indexOf(day);\n      this.repeatDays.splice(i, 1);\n    }\n    this.CalculateRepeatSchedule();\n  }\n\n  previousStep() {\n    this.stepper.previous();\n  }\n\n  submitScheduleForm() {\n    this.scheduleForm.markAllAsTouched();\n    if (this.scheduleForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Schedule Fields are Required');\n      return;\n    }\n\n    if (!this.schedule) {\n      this.CalculateRepeatSchedule();\n    }\n\n    this.stepper.next();\n  }\n\n  submitScheduleRepeatForm() {\n    if (this.schedule) {\n      return;\n    } else if (this.repeat && !this.repeatUpTo) {\n      this.showToastr('top-right', 'danger', 'Receipt Up To date is Required');\n      return;\n    } else if (this.repeat && this.repeatDays.length === 0) {\n      this.showToastr('top-right', 'danger', 'At least one Repeat Day is Required');\n      return;\n    }\n\n    this.stepper.next();\n  }\n\n  saveSchedule() {\n    this.scheduleForm.markAllAsTouched();\n    if (this.scheduleForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Schedule Fields are Required');\n      return;\n    }\n\n    this.submit = true;\n\n    if (!this.schedule) {\n      this.scheduleService.addSchedule(this.repeatSchedules).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Schedule Added Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      const schedule: any = this.getSchedule();\n      schedule._id = this.scheduleId;\n\n      this.scheduleService.editSchedule(schedule).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Schedule Updated Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  getSubject(subjectId: string) {\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === subjectId);\n    if (subject) {\n      return subject.subject;\n    }\n\n    return '--';\n  }\n\n  getTeacher(teacherId: string) {\n    const teacher = this.teachers.find(\n      (curTeacher: EmployeeNameIdModel) => curTeacher.employee === teacherId,\n    );\n    if (teacher) {\n      return teacher.name;\n    }\n\n    return '--';\n  }\n\n  getRepeatDays() {\n    const repeatDays = [];\n    this.weekDays.forEach((day: string, i: number) => {\n      if (this.repeatDays.includes(i)) {\n        repeatDays.push(day);\n      }\n    });\n\n    return repeatDays.join(', ');\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  ngOnDestroy() {\n    this.scheduleService.deleteScheduleId();\n    this.scheduleService.deleteScheduleDay();\n    this.scheduleService.deleteScheduleData();\n  }\n}\n","import { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbInputModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbSelectModule,\n  NbCheckboxModule,\n  NbTooltipModule,\n} from '@nebular/theme';\nimport { AddScheduleComponent } from './add-schedule.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddScheduleRoutingModule } from './add-schedule-routing.module';\nimport { RepeatScheduleComponent } from './repeat-schedule/repeat-schedule.component';\n\n@NgModule({\n  declarations: [AddScheduleComponent, RepeatScheduleComponent],\n  imports: [\n    CommonModule,\n    AddScheduleRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbCheckboxModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbTooltipModule,\n    NbButtonModule,\n    NbInputModule,\n    NbIconModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n})\nexport class AddScheduleModule {}\n"]}