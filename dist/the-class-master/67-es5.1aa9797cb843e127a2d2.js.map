{"version":3,"sources":["webpack:///src/app/authentication/register/terms-and-conditions/terms-and-conditions.component.ts","webpack:///src/app/authentication/register/terms-and-conditions/terms-and-conditions.component.html","webpack:///src/app/authentication/register/register.component.html","webpack:///src/app/authentication/register/register-routing.module.ts","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/authentication/register/register.module.ts"],"names":["TermsAndConditionsComponent","ref","this","close","agree","RegisterComponent","RegisterRoutingModule","RegisterModule","routes","path","component","authService","roleService","toastrService","router","route","encryptService","userService","dialogService","loading","submit","roles","getUserRoles","userExist","form","name","validators","required","minLength","maxLength","email","phone","password","confirmPassword","userRole","passwordValidator","bind","group","value","invalidConfirmPassword","open","closeOnEsc","hasScroll","onClose","subscribe","status","termsConditions","get","valid","checkUser","res","exist","error","e","markAllAsTouched","showToastr","openTermsAndConditions","data","toLowerCase","encrypt","environment","encKey","createUser","navigate","relativeTo","position","message","show","register","acceptTermsConditions","canActivate","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { NbDialogRef } from '@nebular/theme';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-terms-and-conditions',\n  templateUrl: './terms-and-conditions.component.html',\n  styleUrls: ['./terms-and-conditions.component.scss'],\n})\nexport class TermsAndConditionsComponent implements OnInit {\n  constructor(protected ref: NbDialogRef<TermsAndConditionsComponent>) {}\n\n  ngOnInit(): void {}\n\n  close() {\n    this.ref.close(false);\n  }\n\n  agree() {\n    this.ref.close(true);\n  }\n}\n","<nb-card class=\"terms-and-conditions-box\">\n  <nb-card-body>\n    <ngx-terms-conditions></ngx-terms-conditions>\n  </nb-card-body>\n  <nb-card-footer>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <button\n          class=\"float-right ml-3\"\n          type=\"button\"\n          nbButton\n          size=\"small\"\n          status=\"success\"\n          (click)=\"agree()\"\n        >\n          Agree\n        </button>\n        <button\n          class=\"float-right ml-3\"\n          type=\"button\"\n          nbButton\n          size=\"small\"\n          status=\"basic\"\n          (click)=\"close()\"\n        >\n          Disagree\n        </button>\n      </div>\n    </div>\n  </nb-card-footer>\n</nb-card>\n","<div class=\"main-container\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-sm-10 col-12 mx-auto\">\n      <nb-card>\n        <nb-card-body>\n          <h1 id=\"title\" class=\"title\">Register</h1>\n\n          <form (ngSubmit)=\"register()\" [formGroup]=\"form\">\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-name\">Full name:</label>\n              <input\n                type=\"text\"\n                nbInput\n                id=\"input-name\"\n                name=\"fullName\"\n                placeholder=\"Full name\"\n                formControlName=\"name\"\n                minlength=\"5\"\n                maxlength=\"30\"\n                autofocus\n                fullWidth\n                [status]=\"\n                  form.get('name').touched\n                    ? form.get('name').invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              />\n              <ng-container *ngIf=\"form.get('name').invalid && form.get('name').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"form.get('name').errors?.required\">\n                  Full name is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"form.get('name').errors?.minlength\">\n                  Full name should contains minimum 5\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-email\">Email address:</label>\n              <input\n                type=\"email\"\n                nbInput\n                id=\"input-email\"\n                name=\"email\"\n                formControlName=\"email\"\n                placeholder=\"Email address\"\n                fullWidth\n                [status]=\"\n                  form.get('email').touched\n                    ? form.get('email').invalid || userExist\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n                (input)=\"checkUser()\"\n              />\n              <ng-container\n                *ngIf=\"(form.get('email').invalid || userExist) && form.get('email').touched\"\n              >\n                <p class=\"caption status-danger\" *ngIf=\"form.get('email').errors?.required\">\n                  Email is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"form.get('email').errors?.email\">\n                  Email should be the real one!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"userExist\">\n                  Email Already registered, Please try another Email!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-phone\">Phone:</label>\n              <input\n                type=\"number\"\n                nbInput\n                id=\"input-phone\"\n                name=\"phone\"\n                formControlName=\"phone\"\n                placeholder=\"phone\"\n                minlength=\"10\"\n                maxlength=\"10\"\n                min=\"0\"\n                fullWidth\n                [status]=\"\n                  form.get('phone').touched\n                    ? form.get('phone').invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              />\n              <ng-container *ngIf=\"form.get('phone').invalid && form.get('phone').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"form.get('phone').errors?.required\">\n                  Phone is required!\n                </p>\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"form.get('phone').errors?.pattern || form.get('phone').errors?.minlength\"\n                >\n                  Phone should contain 10 digits\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-password\">Password:</label>\n              <input\n                type=\"password\"\n                nbInput\n                id=\"input-password\"\n                name=\"password\"\n                formControlName=\"password\"\n                placeholder=\"Password\"\n                minlength=\"7\"\n                maxlength=\"20\"\n                fullWidth\n                [status]=\"\n                  form.get('password').touched\n                    ? form.get('password').invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              />\n              <ng-container *ngIf=\"form.get('password').invalid && form.get('password').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"form.get('password').errors?.required\">\n                  Password is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"form.get('password').errors?.minlength\">\n                  Password should contain minimum 7 characters\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n              <input\n                nbInput\n                type=\"password\"\n                id=\"input-re-password\"\n                name=\"rePass\"\n                formControlName=\"confirmPassword\"\n                placeholder=\"Confirm Password\"\n                minlength=\"5\"\n                maxlength=\"30\"\n                fullWidth\n                [status]=\"\n                  form.get('confirmPassword').touched\n                    ? form.get('confirmPassword').invalid ||\n                      form.get('password').value != form.get('confirmPassword').value\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              />\n              <ng-container\n                *ngIf=\"form.get('confirmPassword').invalid && form.get('confirmPassword').touched\"\n              >\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"form.get('confirmPassword').errors?.required\"\n                >\n                  Password confirmation is required!\n                </p>\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"\n                    form.get('password').value != form.get('confirmPassword').value &&\n                    !form.get('confirmPassword').errors?.required\n                  \"\n                >\n                  Password does not match the confirm password.\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-role\">User Role:</label>\n              <nb-select\n                type=\"text\"\n                selected=\"institute\"\n                id=\"input-role\"\n                name=\"userRole\"\n                placeholder=\"Select User Role\"\n                formControlName=\"userRole\"\n                fullWidth\n                [status]=\"\n                  form.get('userRole').touched\n                    ? form.get('userRole').invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n              >\n                <nb-option *ngFor=\"let role of roles\" [value]=\"role\">{{\n                  role | uppercase\n                }}</nb-option>\n              </nb-select>\n              <ng-container *ngIf=\"form.get('userRole').invalid && form.get('userRole').touched\">\n                <p class=\"caption status-danger\" *ngIf=\"form.get('userRole').errors?.required\">\n                  User Role is required!\n                </p>\n              </ng-container>\n            </div>\n\n            <br />\n            <div class=\"form-control-group accept-group\">\n              <nb-checkbox\n                name=\"terms\"\n                [checked]=\"termsConditions\"\n                (checkedChange)=\"acceptTermsConditions($event)\"\n              >\n                Agree to\n                <a class=\"pointer\" (click)=\"openTermsAndConditions()\"\n                  ><strong>Terms & Conditions</strong></a\n                >\n              </nb-checkbox>\n            </div>\n            <br />\n            <button nbButton size=\"medium\" fullWidth status=\"primary\" [disabled]=\"submit\">\n              Register\n            </button>\n          </form>\n\n          <br />\n\n          <section class=\"another-action text-right\" aria-label=\"Sign in\">\n            Already have an account? <a class=\"text-link\" routerLink=\"/login\">Log in</a>\n          </section>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n</div>\n","import { RegisterComponent } from './register.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterComponent,\n    canActivate: [],\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterRoutingModule {}\n","import { TermsAndConditionsComponent } from './terms-and-conditions/terms-and-conditions.component';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { RoleService } from './../../services/role.service';\nimport { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth/auth-service/auth.service';\nimport { Observable } from 'rxjs';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { EncryptService } from '../../services/shared-services/encrypt.service';\nimport { environment } from '../../../environments/environment';\nimport { UserService } from '../../services/shared-services/user.service';\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss', '../authentication.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  loading: boolean;\n  submit: boolean;\n  form: FormGroup;\n  userExist: boolean;\n  termsConditions: boolean;\n  roles: string[];\n  constructor(\n    private authService: AuthService,\n    private roleService: RoleService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private encryptService: EncryptService,\n    private userService: UserService,\n    private dialogService: NbDialogService,\n  ) {}\n\n  ngOnInit() {\n    this.loading = true;\n    this.submit = false;\n    this.roles = this.roleService.getUserRoles();\n    this.userExist = false;\n    this.form = new FormGroup(\n      {\n        name: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(5), Validators.maxLength(30)],\n        }),\n        email: new FormControl(null, {\n          validators: [Validators.required, Validators.email],\n        }),\n        phone: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(10), Validators.maxLength(10)],\n        }),\n        password: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n        confirmPassword: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n        userRole: new FormControl(this.roles[0], {\n          validators: [Validators.required],\n        }),\n      },\n      {\n        validators: this.passwordValidator.bind(this),\n      },\n    );\n    this.loading = false;\n  }\n\n  passwordValidator(group: FormGroup): { [s: string]: boolean } {\n    if (group.value.password !== group.value.confirmPassword) {\n      return { invalidConfirmPassword: true };\n    }\n    return null;\n  }\n\n  openTermsAndConditions() {\n    this.dialogService\n      .open(TermsAndConditionsComponent, {\n        closeOnEsc: true,\n        hasScroll: false,\n      })\n      .onClose.subscribe((status: boolean) => {\n        this.termsConditions = status;\n      });\n  }\n\n  checkUser() {\n    if (this.form.get('email').valid) {\n      this.userService.checkUser(this.form.value.email).subscribe(\n        (res: any) => {\n          this.userExist = res.exist;\n        },\n        (error: any) => {},\n      );\n    }\n  }\n\n  acceptTermsConditions(e: any) {\n    this.termsConditions = e;\n  }\n\n  register() {\n    this.form.markAllAsTouched();\n    if (!this.form.valid) {\n      this.showToastr('top-right', 'danger', 'All Fields are required');\n      return;\n    } else if (this.userExist) {\n      this.showToastr('top-right', 'danger', 'This user Already exist, Please try another Email');\n      return;\n    } else if (!this.termsConditions) {\n      this.showToastr('top-right', 'warning', 'Accept Terms & Conditions');\n      this.openTermsAndConditions();\n      return;\n    }\n\n    this.submit = true;\n\n    const data = {\n      name: this.form.value.name.toLowerCase(),\n      userRole: this.form.value.userRole,\n      email: this.form.value.email,\n      phone: this.form.value.phone,\n      password: this.encryptService.encrypt(this.form.value.password, environment.encKey),\n    };\n\n    let authObs: Observable<any>;\n\n    authObs = this.authService.createUser(data);\n\n    authObs.subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', 'New User Created Successfully');\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.submit = false;\n      },\n    );\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { SharedModule } from './../../shared/shared.module';\nimport { RegisterComponent } from './register.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegisterRoutingModule } from './register-routing.module';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbActionsModule,\n  NbCheckboxModule,\n  NbAlertModule,\n  NbSelectModule,\n} from '@nebular/theme';\nimport { TermsAndConditionsComponent } from './terms-and-conditions/terms-and-conditions.component';\n\n@NgModule({\n  declarations: [RegisterComponent, TermsAndConditionsComponent],\n  imports: [\n    CommonModule,\n    RegisterRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbButtonModule,\n    NbActionsModule,\n    NbInputModule,\n    NbCheckboxModule,\n    NbAlertModule,\n    NbSelectModule,\n    SharedModule,\n  ],\n})\nexport class RegisterModule {}\n"]}