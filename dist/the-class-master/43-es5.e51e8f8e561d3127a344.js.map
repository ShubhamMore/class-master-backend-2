{"version":3,"sources":["webpack:///src/app/institute/branch/lecture/question-answers/add-question-answers/add-question-answers.module.ts","webpack:///src/app/institute/branch/lecture/question-answers/add-question-answers/add-question-answers-routing.module.ts","webpack:///src/app/institute/branch/lecture/question-answers/add-question-answers/add-question/add-question.component.ts","webpack:///src/app/institute/branch/lecture/question-answers/add-question-answers/add-question/add-question.component.html","webpack:///src/app/institute/branch/lecture/question-answers/question-answers.component.html","webpack:///src/app/institute/branch/lecture/question-answers/question-answers-routing.module.ts","webpack:///src/app/institute/branch/lecture/question-answers/question-answers.component.ts","webpack:///src/app/institute/branch/lecture/question-answers/question-answers.module.ts"],"names":["AddQuestionAnswersModule","AddQuestionAnswersRoutingModule","routes","forChild","AddQuestionComponent","toastrService","branchService","lectureService","questionAnswersService","ref","this","loading","submit","branchId","getBranchId","lectureQuestionForm","question","validators","required","getQuestion","subscribe","questionAnswers","lectureQuestion","patchValue","getLectureData","lecture","onClose","markAllAsTouched","invalid","showToastr","value","branch","category","course","batch","_id","editLectureQuestion","res","close","error","newLectureQuestion","position","status","message","show","deleteQuestionId","deleteQuestion","saveLectureQuestion","QuestionAnswersComponent","QuestionAnswersModule","QuestionAnswersRoutingModule","path","component","authService","questionAnswerService","router","route","dialogService","dateService","user","getUserData","questionsAnswers","getQuestionAnswers","back","getLectureQuestionAnswers","err","openQuestionDialog","open","context","questionAnswer","setQuestionId","setQuestion","questionDate","convertToDate","toString","substr","id","i","deleteLectureQuestion","splice","setQuestionAnswersId","setQuestionAnswers","navigate","relativeTo","index","findIndex","curQuestion","name","push","addQuestion","loadChildren","then","m","ViewQuestionAnswersModule","PageNotFoundModule","redirectTo"],"mappings":"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","file":"x","sourcesContent":["import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbInputModule,\n  NbSpinnerModule,\n  NbIconModule,\n} from '@nebular/theme';\nimport { AddAnswerComponent } from './add-answer/add-answer.component';\nimport { AddQuestionComponent } from './add-question/add-question.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddQuestionAnswersRoutingModule } from './add-question-answers-routing.module';\n\n@NgModule({\n  declarations: [AddQuestionComponent, AddAnswerComponent],\n  imports: [\n    CommonModule,\n    AddQuestionAnswersRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbInputModule,\n    NbIconModule,\n    NbSpinnerModule,\n    ReactiveFormsModule,\n  ],\n  exports: [AddQuestionComponent, AddAnswerComponent],\n})\nexport class AddQuestionAnswersModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddQuestionAnswersRoutingModule {}\n","import { QuestionAnswersService } from './../../../../../../services/question-answers.service';\nimport { LectureService } from './../../../../../../services/lecture.service';\nimport { BranchService } from './../../../../../../services/branch.service';\nimport { LectureQuestionModel } from './../../../../../../models/lecture-question.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { NbToastrService, NbDialogRef } from '@nebular/theme';\nimport { ScheduleModel as LectureModel } from './../../../../../../models/schedule.model';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'ngx-add-question',\n  templateUrl: './add-question.component.html',\n  styleUrls: ['./add-question.component.scss'],\n})\nexport class AddQuestionComponent implements OnInit, OnDestroy {\n  loading: boolean;\n  submit: boolean;\n\n  lectureQuestion: LectureQuestionModel;\n  branchId: string;\n  lecture: LectureModel;\n  lectureQuestionForm: FormGroup;\n\n  constructor(\n    private toastrService: NbToastrService,\n    private branchService: BranchService,\n    private lectureService: LectureService,\n    private questionAnswersService: QuestionAnswersService,\n    protected ref: NbDialogRef<AddQuestionComponent>, // private router: Router, // private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.onClose();\n      return;\n    }\n\n    this.lectureQuestionForm = new FormGroup({\n      question: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n    });\n\n    this.questionAnswersService.getQuestion().subscribe((questionAnswers: LectureQuestionModel) => {\n      this.lectureQuestion = questionAnswers;\n      if (questionAnswers) {\n        this.lectureQuestionForm.patchValue({ question: this.lectureQuestion.question });\n      }\n    });\n\n    this.lectureService.getLectureData().subscribe((lecture: LectureModel) => {\n      this.lecture = lecture;\n      if (!this.lecture) {\n        this.onClose();\n        return;\n      }\n      this.loading = false;\n    });\n  }\n\n  saveLectureQuestion() {\n    this.lectureQuestionForm.markAllAsTouched();\n    if (this.lectureQuestionForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Question is Required');\n      return;\n    }\n    this.submit = true;\n\n    const question: string = this.lectureQuestionForm.value.question;\n\n    const lectureQuestion: any = {\n      branch: this.branchId,\n      category: this.lecture.category,\n      course: this.lecture.course,\n      batch: this.lecture.batch,\n      lecture: this.lecture._id,\n      question: question,\n    };\n\n    if (!this.lectureQuestion) {\n      this.questionAnswersService.newLectureQuestion(lectureQuestion).subscribe(\n        (newLectureQuestion: LectureQuestionModel) => {\n          this.showToastr('top-right', 'success', 'New Question Added Successfully!');\n          this.ref.close(newLectureQuestion);\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      lectureQuestion._id = this.lectureQuestion._id;\n      this.questionAnswersService.editLectureQuestion(lectureQuestion).subscribe(\n        (res: any) => {\n          this.lectureQuestion.question = question;\n          this.showToastr('top-right', 'success', 'Question Updated Successfully!');\n          this.ref.close(this.lectureQuestion);\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  onClose() {\n    this.ref.close();\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {\n    this.questionAnswersService.deleteQuestionId();\n    this.questionAnswersService.deleteQuestion();\n  }\n}\n","<nb-card class=\"question-box\">\n  <nb-card-header>\n    <nb-icon class=\"float-right pointer\" icon=\"close-outline\" (click)=\"onClose()\"></nb-icon>\n    <h3>{{ lectureQuestion ? 'Edit' : 'New' }} Question</h3>\n  </nb-card-header>\n\n  <nb-card-body>\n    <form [formGroup]=\"lectureQuestionForm\" (submit)=\"saveLectureQuestion()\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"form-control-group\">\n            <label class=\"label\" for=\"input-question\">Question:</label>\n            <textarea\n              type=\"text\"\n              nbInput\n              id=\"input-question\"\n              name=\"question\"\n              formControlName=\"question\"\n              placeholder=\"Question\"\n              fullWidth\n              [status]=\"\n                lectureQuestionForm.get('question').touched\n                  ? lectureQuestionForm.get('question').invalid\n                    ? 'danger'\n                    : 'success'\n                  : 'basic'\n              \"\n            ></textarea>\n            <ng-container\n              *ngIf=\"\n                lectureQuestionForm.get('question').invalid &&\n                lectureQuestionForm.get('question').touched\n              \"\n            >\n              <p\n                class=\"caption status-danger\"\n                *ngIf=\"lectureQuestionForm.get('question').errors?.required\"\n              >\n                Question is required!\n              </p>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <button\n            type=\"button\"\n            nbButton\n            size=\"small\"\n            status=\"danger\"\n            (click)=\"onClose()\"\n            [disabled]=\"submit\"\n          >\n            Cancel\n          </button>\n        </div>\n        <div class=\"col-6 text-right\">\n          <button\n            type=\"submit\"\n            nbButton\n            size=\"small\"\n            status=\"success\"\n            [disabled]=\"submit\"\n            [nbSpinner]=\"submit\"\n            nbSpinnerStatus=\"primary\"\n            nbSpinnerSize=\"small\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </form>\n  </nb-card-body>\n</nb-card>\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>Question & Answers</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <button nbButton size=\"small\" status=\"primary\" fullWidth (click)=\"addQuestion()\">\n          Add Question <nb-icon icon=\"plus-circle-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\" *ngIf=\"!loading; else loadingData\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"questionsAnswers.length > 0; else noQuestions\">\n          <nb-card *ngFor=\"let lectureQuestion of questionsAnswers; let i = index\">\n            <nb-card-header>\n              <div class=\"row\">\n                <div class=\"col-md-6 col-12\">\n                  <nb-user\n                    [name]=\"lectureQuestion.name ? lectureQuestion.name : 'Unknown'\"\n                    [title]=\"formatQuestionAnswerDate(lectureQuestion.createdAt)\"\n                  ></nb-user>\n                </div>\n                <div class=\"col-md-6 col-12 text-right\">\n                  <button\n                    *ngIf=\"lectureQuestion.createdBy === user.imsMasterId\"\n                    class=\"mr-3\"\n                    nbButton\n                    size=\"small\"\n                    status=\"basic\"\n                    (click)=\"editQuestion(lectureQuestion)\"\n                  >\n                    Edit\n                  </button>\n                  <button\n                    class=\"mr-3\"\n                    nbButton\n                    size=\"small\"\n                    status=\"primary\"\n                    (click)=\"viewQuestionAnswer(lectureQuestion)\"\n                  >\n                    View\n                  </button>\n                  <button\n                    *ngIf=\"lectureQuestion.createdBy === user.imsMasterId\"\n                    class=\"mr-3\"\n                    nbButton\n                    size=\"small\"\n                    status=\"danger\"\n                    (click)=\"deleteQuestion(lectureQuestion._id)\"\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            </nb-card-header>\n            <nb-card-body>\n              <div [innerHTML]=\"lectureQuestion.question\"></div>\n            </nb-card-body>\n          </nb-card>\n        </ng-container>\n        <ng-template #noQuestions>\n          <p class=\"text-center pt-5 pb-5\">You are first to Ask the Question</p>\n        </ng-template>\n      </div>\n    </div>\n    <ng-template #loadingData>\n      <p class=\"text-center pt-5 pb-5\">Loading...</p>\n    </ng-template>\n  </nb-card-body>\n</nb-card>\n","import { QuestionAnswersComponent } from './question-answers.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QuestionAnswersComponent,\n  },\n\n  {\n    path: 'view',\n    loadChildren: () =>\n      import('./view-question-answers/view-question-answers.module').then(\n        (m) => m.ViewQuestionAnswersModule,\n      ),\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class QuestionAnswersRoutingModule {}\n","import { AddQuestionComponent } from './add-question-answers/add-question/add-question.component';\nimport { DateService } from './../../../../services/shared-services/date.service';\nimport { AuthService } from './../../../../authentication/auth/auth-service/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { LectureQuestionModel } from '../../../../models/lecture-question.model';\nimport { Component, OnInit } from '@angular/core';\nimport { ScheduleModel as LectureModel } from './../../../../models/schedule.model';\nimport { LectureService } from './../../../../services/lecture.service';\nimport { QuestionAnswersService } from './../../../../services/question-answers.service';\nimport { BranchService } from './../../../../services/branch.service';\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-question-answers',\n  templateUrl: './question-answers.component.html',\n  styleUrls: ['./question-answers.component.scss'],\n})\nexport class QuestionAnswersComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n  lecture: LectureModel;\n  questionsAnswers: LectureQuestionModel[];\n  editLectureQuestion: boolean;\n  user: { name: string; imsMasterId: string };\n\n  constructor(\n    private authService: AuthService,\n    private branchService: BranchService,\n    private lectureService: LectureService,\n    private questionAnswerService: QuestionAnswersService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private dialogService: NbDialogService,\n    public dateService: DateService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.editLectureQuestion = false;\n\n    this.user = this.authService.getUserData();\n\n    this.questionsAnswers = [];\n\n    this.lectureService.getLectureData().subscribe((lecture: LectureModel) => {\n      this.lecture = lecture;\n      if (!this.lecture) {\n        this.back();\n        return;\n      }\n      this.getQuestionAnswers();\n    });\n  }\n\n  getQuestionAnswers() {\n    this.loading = true;\n    this.questionAnswerService\n      .getLectureQuestionAnswers(\n        this.branchId,\n        this.lecture.category,\n        this.lecture.course,\n        this.lecture.batch,\n        this.lecture._id,\n      )\n      .subscribe(\n        (questionsAnswers: LectureQuestionModel[]) => {\n          this.questionsAnswers = questionsAnswers;\n          this.loading = false;\n        },\n        (err: any) => {\n          this.loading = false;\n        },\n      );\n  }\n\n  addQuestion() {\n    this.openQuestionDialog();\n  }\n\n  openQuestionDialog() {\n    this.dialogService\n      .open(AddQuestionComponent, {\n        context: {},\n      })\n      .onClose.subscribe(\n        (question: LectureQuestionModel) => question && this.saveLectureQuestion(question),\n      );\n  }\n\n  editQuestion(questionAnswer: LectureQuestionModel) {\n    this.questionAnswerService.setQuestionId(questionAnswer._id);\n    this.questionAnswerService.setQuestion(questionAnswer);\n    this.editLectureQuestion = true;\n    this.openQuestionDialog();\n  }\n\n  formatQuestionAnswerDate(questionDate: any) {\n    const date: string = this.dateService.convertToDate(questionDate).toString();\n    return date.substr(0, 21);\n  }\n\n  deleteQuestion(id: string, i: number) {\n    this.loading = true;\n    this.questionAnswerService.deleteLectureQuestion(id).subscribe(\n      (res: any) => {\n        this.questionsAnswers.splice(i, 1);\n        this.showToastr('top-right', 'success', `Question Deleted Successfully!`);\n        this.loading = false;\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.loading = false;\n      },\n    );\n  }\n\n  viewQuestionAnswer(questionAnswer: LectureQuestionModel) {\n    this.questionAnswerService.setQuestionAnswersId(questionAnswer._id);\n    this.questionAnswerService.setQuestionAnswers(questionAnswer);\n    this.router.navigate(['./view'], { relativeTo: this.route });\n  }\n\n  saveLectureQuestion(question: LectureQuestionModel) {\n    if (!this.editLectureQuestion) {\n      question.name = this.user.name;\n      this.questionsAnswers.push(question);\n    } else {\n      const index = this.questionsAnswers.findIndex(\n        (curQuestion: LectureQuestionModel) => curQuestion._id === question._id,\n      );\n\n      if (index >= 0) {\n        this.questionsAnswers[index] = question;\n      }\n\n      this.editLectureQuestion = false;\n    }\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { AddQuestionAnswersModule } from './add-question-answers/add-question-answers.module';\nimport { QuestionAnswersComponent } from './question-answers.component';\nimport { NbCardModule, NbButtonModule, NbIconModule, NbUserModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { QuestionAnswersRoutingModule } from './question-answers-routing.module';\n\n@NgModule({\n  declarations: [QuestionAnswersComponent],\n  imports: [\n    CommonModule,\n    QuestionAnswersRoutingModule,\n    AddQuestionAnswersModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbUserModule,\n  ],\n})\nexport class QuestionAnswersModule {}\n"]}