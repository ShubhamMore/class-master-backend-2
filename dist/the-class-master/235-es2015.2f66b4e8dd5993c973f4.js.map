{"version":3,"sources":["webpack:///src/app/student/checkout/checkout.component.ts","webpack:///src/app/student/checkout/checkout.component.html","webpack:///src/app/services/institute-order.service.ts","webpack:///src/app/student/payment/payment.component.ts","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment.component.html","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment-routing.module.ts","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment.component.ts","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment.module.ts"],"names":["CheckoutComponent","dateService","studentCourseService","studentCourseInstallmentService","toastrService","ref","this","getStudentCourseData","subscribe","studentCourse","getStudentCourseInstallmentData","courseInstallment","getCourseInstallmentData","installment","onClose","close","status","checkout","InstituteOrderService","httpService","instituteOrderDetails","instituteOrder","id","httpPost","api","data","pipe","map","response","catchError","err","throwError","PaymentComponent","branchService","paymentService","instituteKeysService","instituteOrderService","authService","loading","user","getUserData","branchId","getBranchId","getBranchData","branch","paymentGatewayAccessKey","getLocalInstitutePaymentAccessKey","studentCourseInstallment","orderDetails","userId","_id","userPhone","phone","userName","name","userEmail","email","imsMasterId","amount","installmentAmount","studentInstallment","options","key","currency","basicDetails","branchName","description","getPaymentDescription","order_id","handler","verifyPayment","modal","ondismiss","deleteOrder","prefill","contact","notes","address","theme","color","razorPay","Razorpay","generateOrder","installmentNo","courseName","generateInstituteOrder","res","placedOrderReceipt","paymentReceipt","order","pay","showToastr","open","deleteInstituteOrder","payment","verifyInstitutePayment","orderId","receipt","receiptId","position","message","show","routes","path","component","ManageCourseInstallmentComponent","dialogService","studentCourseInstallmentReceiptService","router","route","submit","studentCourseInstallmentId","getStudentCourseInstallmentId","getStudentCourseInstallment","navigate","relativeTo","setStudentCourseInstallmentData","setStudentCourseInstallmentReceiptId","generateStudentCourseInstallmentReceipt","context","closeOnBackdropClick","closeOnEsc","onClosePayment","setCourseInstallmentId","setCourseInstallmentData","onCheckout","error","deleteStudentCourseInstallmentData","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageCourseInstallmentRoutingModule","forChild","ManageCourseInstallmentModule"],"mappings":"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","file":"x","sourcesContent":["import { DateService } from './../../services/shared-services/date.service';\nimport { StudentCourseService } from './../../services/student-course.service';\nimport { StudentCourseModel } from './../../models/student-course.model';\nimport {\n  InstallmentModel,\n  StudentCourseInstallmentModel,\n} from './../../models/student-course-installment.model';\nimport { StudentCourseInstallmentService } from './../../services/student-course-installment.service';\nimport { Component, OnInit } from '@angular/core';\nimport { NbDialogRef, NbToastrService } from '@nebular/theme';\nimport { CheckoutService } from '../../services/checkout.service';\nimport { PaymentService } from '../../services/payment.service';\n\n@Component({\n  selector: 'ngx-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.scss'],\n})\nexport class CheckoutComponent implements OnInit {\n  courseInstallment: StudentCourseInstallmentModel;\n  installment: InstallmentModel;\n  studentCourse: StudentCourseModel;\n\n  constructor(\n    public dateService: DateService,\n    private studentCourseService: StudentCourseService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n    private toastrService: NbToastrService,\n    protected ref: NbDialogRef<CheckoutComponent>,\n  ) {}\n\n  ngOnInit(): void {\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    this.studentCourseInstallmentService\n      .getStudentCourseInstallmentData()\n      .subscribe((courseInstallment: StudentCourseInstallmentModel) => {\n        this.courseInstallment = courseInstallment;\n      });\n\n    this.studentCourseInstallmentService\n      .getCourseInstallmentData()\n      .subscribe((installment: InstallmentModel) => {\n        this.installment = installment;\n      });\n\n    if (!this.installment && !this.courseInstallment) {\n      this.onClose();\n    }\n  }\n\n  onClose() {\n    this.ref.close({ status: false });\n  }\n\n  checkout() {\n    this.ref.close({ status: true });\n  }\n}\n","<nb-card class=\"checkout\">\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" (click)=\"onClose()\">\n      <nb-icon icon=\"close\"></nb-icon>\n    </button>\n    <h3>Checkout</h3>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"table-responsive\">\n      <table class=\"table table-bordered\">\n        <tbody>\n          <tr>\n            <th>Category:</th>\n            <td>{{ studentCourse.categoryName }}</td>\n          </tr>\n          <tr>\n            <th>Course/Batch:</th>\n            <td>{{ studentCourse.courseName }}/{{ studentCourse.batchName }}</td>\n          </tr>\n          <tr>\n            <th>Date:</th>\n            <td>{{ dateService.formatDate(courseInstallment.date) }}</td>\n          </tr>\n          <tr>\n            <th>Installment No:</th>\n            <td>{{ installment.installmentNo }}</td>\n          </tr>\n          <tr>\n            <th>Installment Date:</th>\n            <td>{{ dateService.formatDate(installment.installmentDate) }}</td>\n          </tr>\n          <tr>\n            <th>Installment Amount:</th>\n            <td>{{ installment.installmentAmount }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </nb-card-body>\n  <nb-card-footer>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"primary\" (click)=\"checkout()\">\n      Checkout\n    </button>\n  </nb-card-footer>\n</nb-card>\n","import { HttpService } from './shared-services/http.service';\nimport { Injectable } from '@angular/core';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InstituteOrderService {\n  private instituteOrderDetails: any;\n\n  getInstituteOrderDetails() {\n    return this.instituteOrderDetails;\n  }\n\n  setInstituteOrderDetails(instituteOrder: any) {\n    this.instituteOrderDetails = instituteOrder;\n  }\n\n  deleteInstituteOrderDetails() {\n    this.instituteOrderDetails = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  deleteInstituteOrder(id: string) {\n    const data = { api: 'deleteInstituteOrder', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  generateInstituteOrder(instituteOrder: any) {\n    const data = { api: 'generateInstituteOrder', data: instituteOrder };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { StudentCourseService } from './../../services/student-course.service';\nimport { StudentCourseModel } from './../../models/student-course.model';\nimport { BranchModel } from './../../models/branch.model';\nimport { BranchService } from './../../services/branch.service';\nimport {\n  StudentCourseInstallmentModel,\n  InstallmentModel,\n} from './../../models/student-course-installment.model';\nimport { InstituteOrderService } from './../../services/institute-order.service';\nimport { StudentCourseInstallmentService } from './../../services/student-course-installment.service';\nimport { InstituteKeysService } from './../../services/institute-keys.service';\nimport { AuthService } from './../../authentication/auth/auth-service/auth.service';\nimport { PaymentService } from './../../services/payment.service';\nimport { NbToastrService, NbDialogRef } from '@nebular/theme';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\n\ndeclare const Razorpay: any;\n@Component({\n  selector: 'ngx-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.scss'],\n})\nexport class PaymentComponent implements OnInit, OnDestroy {\n  loading: boolean;\n  private user: any;\n  private branchId: string;\n  private orderDetails: any;\n  private options: any;\n  private razorPay: any;\n  private placedOrderReceipt: any;\n\n  branch: BranchModel;\n\n  private paymentGatewayAccessKey: string;\n\n  studentCourseInstallment: StudentCourseInstallmentModel;\n  courseInstallment: InstallmentModel;\n  studentCourse: StudentCourseModel;\n\n  constructor(\n    private branchService: BranchService,\n    private paymentService: PaymentService,\n    private instituteKeysService: InstituteKeysService,\n    private studentCourseService: StudentCourseService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n    private instituteOrderService: InstituteOrderService,\n    private authService: AuthService,\n    private toastrService: NbToastrService,\n    protected ref: NbDialogRef<PaymentComponent>, // private router: Router, // private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.loading = true;\n\n    this.user = this.authService.getUserData();\n\n    this.branchId = this.branchService.getBranchId();\n\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\n      this.branch = branch;\n    });\n\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    this.paymentGatewayAccessKey = this.instituteKeysService.getLocalInstitutePaymentAccessKey();\n\n    if (!this.branchId || !this.paymentGatewayAccessKey) {\n      this.onClose();\n      return;\n    }\n\n    this.studentCourseInstallmentService\n      .getStudentCourseInstallmentData()\n      .subscribe((studentCourseInstallment: StudentCourseInstallmentModel) => {\n        this.studentCourseInstallment = studentCourseInstallment;\n      });\n\n    this.studentCourseInstallmentService\n      .getCourseInstallmentData()\n      .subscribe((courseInstallment: InstallmentModel) => {\n        this.courseInstallment = courseInstallment;\n      });\n\n    this.orderDetails = {\n      userId: this.user._id,\n      userPhone: this.user.phone,\n      userName: this.user.name,\n      userEmail: this.user.email,\n      imsMasterId: this.user.imsMasterId,\n      amount: this.courseInstallment.installmentAmount,\n      studentInstallment: this.studentCourseInstallment._id,\n      installment: this.courseInstallment._id,\n      branch: this.branchId,\n    };\n\n    this.options = {\n      key: this.paymentGatewayAccessKey, // Enter the Key ID generated from the Dashboard\n      amount: '', // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\n      currency: 'INR',\n      name: this.branch ? this.branch.basicDetails.branchName : 'Institute Fees',\n      description: this.getPaymentDescription(),\n      // image: '../../../assets/brand/the-class-master-mini.png',\n      // tslint:disable-next-line: max-line-length\n      order_id: '', // This is a sample Order ID. Pass the `id` obtained in the response of Step 1 order_9A33XWu170gUtm\n      handler: (response: any) => {\n        this.verifyPayment(response);\n      },\n      modal: {\n        ondismiss: () => {\n          this.deleteOrder();\n        },\n      },\n      prefill: {\n        name: this.user.name,\n        email: this.user.email,\n        contact: this.user.phone,\n      },\n      notes: {\n        address: '',\n      },\n      theme: {\n        color: '#528FF0',\n      },\n    };\n\n    this.razorPay = new Razorpay(this.options);\n\n    this.generateOrder();\n\n    this.loading = false;\n  }\n\n  getPaymentDescription() {\n    return `Installment ${this.courseInstallment.installmentNo} of Course ${this.studentCourse.courseName}`;\n  }\n\n  private generateOrder() {\n    this.instituteOrderService.generateInstituteOrder(this.orderDetails).subscribe(\n      (res: any) => {\n        this.placedOrderReceipt = res.paymentReceipt;\n        // this.options.amount = res.order.amount;\n        this.options.amount = '1';\n        this.options.order_id = res.order.id;\n        this.options.currency = res.order.currency;\n        this.options.prefill.name = this.user.name;\n        this.options.prefill.email = this.user.email;\n        this.options.prefill.contact = this.user.phone;\n        this.razorPay = new Razorpay(this.options);\n        this.pay();\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.onClose();\n      },\n    );\n  }\n\n  private pay() {\n    this.razorPay.open();\n  }\n\n  private deleteOrder() {\n    this.instituteOrderService.deleteInstituteOrder(this.placedOrderReceipt._id).subscribe(\n      (res: any) => {\n        this.placedOrderReceipt = null;\n        this.ref.close({ status: false });\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.onClose();\n      },\n    );\n  }\n\n  verifyPayment(payment: any) {\n    this.paymentService\n      .verifyInstitutePayment(this.branchId, payment, this.placedOrderReceipt)\n      .subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Payment Verified Successfully');\n          this.ref.close({ status: true, order: res.orderId, receipt: res.receiptId });\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.onClose();\n        },\n      );\n  }\n\n  onClose() {\n    this.ref.close();\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {}\n}\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9\">\n        <h3>Installments</h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\">\n            <table class=\"table\">\n              <tbody>\n                <tr class=\"border shadow-sm\">\n                  <td>\n                    <span> <strong>Category: </strong>{{ studentCourse.categoryName }} </span>\n                    <br />\n                    <span>\n                      <strong>Course/Batch: </strong>{{ studentCourse.courseName }}/{{\n                        studentCourse.batchName\n                      }}\n                    </span>\n                    <br />\n                    <span>\n                      <strong>Date: </strong\n                      >{{ dateService.formatDate(studentCourseInstallment.date) }}\n                    </span>\n                  </td>\n                  <td>\n                    <span>\n                      <strong>Collected Amount: </strong\n                      >{{ studentCourseInstallment.amountCollected }}\n                    </span>\n                    <br />\n                    <span>\n                      <strong>Pending Amount: </strong>{{ studentCourseInstallment.pendingAmount }}\n                    </span>\n                    <br />\n                    <span\n                      ><strong>Total Amount: </strong\n                      >{{ studentCourseInstallment.totalAmount }}</span\n                    >\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <br />\n\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"\n              studentCourseInstallment.installments.length > 0;\n              else noStudentCourseInstallments\n            \"\n          >\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Installment No</th>\n                  <th>Installment Date</th>\n                  <th>Installment Amount</th>\n                  <th>Pending Amount</th>\n                  <th>{{ paymentGatewayAccessKey ? 'Pay/' : '' }}Receipt</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr\n                  *ngFor=\"let installment of studentCourseInstallment.installments; let i = index\"\n                >\n                  <td>Installment {{ installment.installmentNo }}</td>\n                  <td>{{ dateService.formatDate(installment.installmentDate) }}</td>\n                  <td>{{ installment.installmentAmount }}</td>\n                  <td>{{ installment.amountPending }}</td>\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      [status]=\"installment.receiptId ? 'success' : 'info'\"\n                      (click)=\"\n                        installment.receiptId\n                          ? showReceipt(installment.receiptId)\n                          : payInstallment(installment)\n                      \"\n                      [disabled]=\"submit\"\n                      *ngIf=\"installment.receiptId || paymentGatewayAccessKey\"\n                    >\n                      {{ installment.receiptId ? 'Receipt' : ' Pay' }}\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noStudentCourseInstallments>\n            <p class=\"text-center pt-5 pb-5\">No Course Installments Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageCourseInstallmentComponent } from './manage-course-installment.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageCourseInstallmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageCourseInstallmentRoutingModule {}\n","import { CheckoutComponent } from './../../../../checkout/checkout.component';\nimport { PaymentComponent } from './../../../../payment/payment.component';\nimport { PaymentService } from './../../../../../services/payment.service';\nimport { InstituteKeysService } from './../../../../../services/institute-keys.service';\nimport { StudentCourseService } from './../../../../../services/student-course.service';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { StudentCourseInstallmentReceiptService } from './../../../../../services/student-course-installment-receipt.service';\nimport { DateService } from './../../../../../services/shared-services/date.service';\nimport {\n  InstallmentModel,\n  StudentCourseInstallmentModel,\n} from './../../../../../models/student-course-installment.model';\nimport { StudentCourseInstallmentService } from './../../../../../services/student-course-installment.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-manage-course-installment',\n  templateUrl: './manage-course-installment.component.html',\n  styleUrls: ['./manage-course-installment.component.scss'],\n})\nexport class ManageCourseInstallmentComponent implements OnInit, OnDestroy {\n  loading: boolean;\n\n  submit: boolean;\n\n  private branchId: string;\n  private studentCourseInstallmentId: string;\n\n  paymentGatewayAccessKey: string;\n\n  studentCourseInstallment: StudentCourseInstallmentModel;\n  studentCourse: StudentCourseModel;\n\n  constructor(\n    private branchService: BranchService,\n    public dateService: DateService,\n    public toastrService: NbToastrService,\n    private studentCourseService: StudentCourseService,\n    private instituteKeysService: InstituteKeysService,\n    private paymentService: PaymentService,\n    private dialogService: NbDialogService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n    private studentCourseInstallmentReceiptService: StudentCourseInstallmentReceiptService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    this.studentCourseInstallmentId = this.studentCourseInstallmentService.getStudentCourseInstallmentId();\n\n    if (!this.branchId) {\n      this.router.navigate(['../../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.paymentGatewayAccessKey = this.instituteKeysService.getLocalInstitutePaymentAccessKey();\n\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    this.getStudentCourseInstallment();\n  }\n\n  getStudentCourseInstallment() {\n    this.loading = true;\n    this.studentCourseInstallmentService\n      .getStudentCourseInstallment(this.studentCourseInstallmentId)\n      .subscribe(\n        (studentCourseInstallment: StudentCourseInstallmentModel) => {\n          this.studentCourseInstallmentService.setStudentCourseInstallmentData(\n            studentCourseInstallment,\n          );\n          this.studentCourseInstallment = studentCourseInstallment;\n          this.loading = false;\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.loading = false;\n        },\n      );\n  }\n\n  showReceipt(receiptId: string) {\n    this.studentCourseInstallmentReceiptService.setStudentCourseInstallmentReceiptId(receiptId);\n    this.router.navigate(['../receipt'], { relativeTo: this.route });\n  }\n\n  onClosePayment(order: any) {\n    if (order.status) {\n      this.generateStudentCourseInstallmentReceipt(order.order, order.receipt);\n    }\n  }\n\n  onCheckout(checkout: any) {\n    if (checkout.status) {\n      this.dialogService\n        .open(PaymentComponent, {\n          context: {},\n          closeOnBackdropClick: false,\n          closeOnEsc: false,\n        })\n        .onClose.subscribe((order: any) => order && this.onClosePayment(order));\n    }\n  }\n\n  payInstallment(installment: InstallmentModel) {\n    if (this.paymentGatewayAccessKey) {\n      this.studentCourseInstallmentService.setCourseInstallmentId(installment._id);\n      this.studentCourseInstallmentService.setCourseInstallmentData(installment);\n      this.dialogService\n        .open(CheckoutComponent, {\n          context: {},\n          closeOnBackdropClick: false,\n          closeOnEsc: false,\n        })\n        .onClose.subscribe((checkout: any) => checkout && this.onCheckout(checkout));\n    }\n  }\n\n  generateStudentCourseInstallmentReceipt(order: string, receipt: string) {\n    this.submit = true;\n\n    this.studentCourseInstallmentReceiptService\n      .generateStudentCourseInstallmentReceipt(order, receipt)\n      .subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Receipt Generated Successfully');\n          this.submit = false;\n          this.getStudentCourseInstallment();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {\n    this.studentCourseInstallmentService.deleteStudentCourseInstallmentData();\n  }\n}\n","import { NbCardModule, NbButtonModule, NbIconModule, NbTooltipModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageCourseInstallmentRoutingModule } from './manage-course-installment-routing.module';\nimport { ManageCourseInstallmentComponent } from './manage-course-installment.component';\n\n@NgModule({\n  declarations: [ManageCourseInstallmentComponent],\n  imports: [\n    CommonModule,\n    ManageCourseInstallmentRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageCourseInstallmentModule {}\n"]}