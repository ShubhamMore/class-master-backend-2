{"version":3,"sources":["webpack:///src/app/employee/branch/lecture/manage-lecture/online-lecture/online-lecture.component.html","webpack:///src/app/employee/branch/lecture/manage-lecture/online-lecture/online-lecture.component.ts","webpack:///src/app/employee/branch/lecture/manage-lecture/manage-lecture.component.html","webpack:///src/app/employee/branch/lecture/manage-lecture/manage-lecture-routing.module.ts","webpack:///src/app/employee/branch/lecture/manage-lecture/manage-lecture.component.ts","webpack:///src/app/employee/branch/lecture/manage-lecture/manage-lecture.module.ts"],"names":["OnlineLectureComponent","lectureService","authService","encryptService","this","loading","lecture","getLectureId","user","getUserData","imsMasterId","zoomURL","environment","zoomLiveURL","routes","path","component","ManageLectureComponent","branchService","courseService","batchService","dateService","router","route","windowService","toastrService","branchId","getBranchId","getCategoryData","subscribe","category","getCourseData","course","getBatchData","batch","date","getSearchDate","getDateString","onlineLectures","classroomLectures","getLecture","navigate","relativeTo","startTime","endTime","formatTime","subject","mySubject","subjects","find","curSubject","_id","setLectureId","setLectureData","sessionType","open","title","topic","context","showToastr","getLectures","lectures","filter","error","setSearchDate","position","status","message","show","dateChanged","loadChildren","then","m","PageNotFoundModule","redirectTo","ManageLectureRoutingModule","forChild","ManageLectureModule"],"mappings":"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","file":"x","sourcesContent":["<div class=\"zoom-meeting\" *ngIf=\"!loading\">\n  <iframe\n    width=\"100%\"\n    height=\"100%\"\n    [src]=\"zoomURL | safeUrl\"\n    frameborder=\"0\"\n    allowfullscreen=\"true\"\n    allow=\"camera; microphone;\"\n  >\n  </iframe>\n</div>\n","import { EncryptService } from '../../../../../services/shared-services/encrypt.service';\nimport { AuthService } from '../../../../../authentication/auth/auth-service/auth.service';\nimport { environment } from '../../../../../../environments/environment';\nimport { LectureService } from '../../../../../services/lecture.service';\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'ngx-online-lecture',\n  templateUrl: './online-lecture.component.html',\n  styleUrls: ['./online-lecture.component.scss'],\n})\nexport class OnlineLectureComponent implements OnInit {\n  loading: boolean;\n  error: string;\n  zoomURL: any;\n  constructor(\n    private lectureService: LectureService,\n    private authService: AuthService,\n    private encryptService: EncryptService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    const lecture = this.lectureService.getLectureId();\n    const user = this.authService.getUserData().imsMasterId;\n\n    this.zoomURL = environment.zoomLiveURL + '?lecture=' + lecture + '&user=' + user;\n    this.loading = false;\n  }\n}\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>\n          Lecture of <small *ngIf=\"batch\">{{ batch.basicDetails.batchName }}</small>\n        </h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <input type=\"date\" nbInput fullWidth [(ngModel)]=\"date\" (change)=\"dateChanged()\" />\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body *ngIf=\"!loading; else loadingTemplate\">\n    <nb-tabset fullWidth>\n      <nb-tab tabTitle=\"Classroom Lecture\">\n        <div class=\"table-responsive\" *ngIf=\"classroomLectures.length > 0; else noClassroomLecture\">\n          <table class=\"table\">\n            <tbody>\n              <tr *ngFor=\"let lecture of classroomLectures\">\n                <td>{{ getTime(lecture.startTime, lecture.endTime) }}</td>\n                <td>{{ getSubject(lecture.subject) }}</td>\n                <td>{{ lecture.topic }}</td>\n                <td>{{ lecture.teacher }}</td>\n\n                <td>\n                  <button status=\"primary\" nbButton size=\"small\" (click)=\"markAttendance(lecture)\">\n                    Attendance\n                  </button>\n                </td>\n                <td>\n                  <button status=\"warning\" nbButton size=\"small\" (click)=\"lectureMaterial(lecture)\">\n                    Study Material\n                  </button>\n                </td>\n                <td>\n                  <button status=\"success\" nbButton size=\"small\" (click)=\"questionAnswers(lecture)\">\n                    Q&A\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </nb-tab>\n      <nb-tab tabTitle=\"Online Lecture\">\n        <div class=\"table-responsive\" *ngIf=\"onlineLectures.length > 0; else noOnlineLecture\">\n          <table class=\"table\">\n            <tbody>\n              <tr *ngFor=\"let lecture of onlineLectures\">\n                <td>{{ getTime(lecture.startTime, lecture.endTime) }}</td>\n                <td>{{ getSubject(lecture.subject) }}</td>\n                <td>{{ lecture.topic }}</td>\n                <td>{{ lecture.teacher }}</td>\n                <td>\n                  <button status=\"info\" nbButton size=\"small\" (click)=\"startOnlineLecture(lecture)\">\n                    Go Live\n                  </button>\n                </td>\n                <td>\n                  <button status=\"primary\" nbButton size=\"small\" (click)=\"markAttendance(lecture)\">\n                    Attendance\n                  </button>\n                </td>\n                <td>\n                  <button status=\"warning\" nbButton size=\"small\" (click)=\"lectureMaterial(lecture)\">\n                    Study Material\n                  </button>\n                </td>\n                <td>\n                  <button status=\"success\" nbButton size=\"small\" (click)=\"questionAnswers(lecture)\">\n                    Q&A\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </nb-tab>\n    </nb-tabset>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #noClassroomLecture>\n  <p class=\"text-center pt-5 pb-5\">No Classroom Lecture</p>\n</ng-template>\n\n<ng-template #noOnlineLecture>\n  <p class=\"text-center pt-5 pb-5\">No Online Lecture</p>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <p class=\"text-center pt-5 pb-5\">Loading...</p>\n</ng-template>\n","import { ManageLectureComponent } from './manage-lecture.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageLectureComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageLectureRoutingModule {}\n","import { OnlineLectureComponent } from './online-lecture/online-lecture.component';\nimport { NbToastrService, NbWindowService } from '@nebular/theme';\nimport { BatchModel } from './../../../../models/batch.model';\nimport { CategoryModel } from './../../../../models/branch.model';\nimport { CourseModel, SubjectModel } from './../../../../models/course.model';\nimport { CourseService } from './../../../../services/course.service';\nimport { LectureService } from './../../../../services/lecture.service';\nimport { ScheduleModel as LectureModel } from './../../../../models/schedule.model';\nimport { DateService } from './../../../../services/shared-services/date.service';\nimport { Component, OnInit } from '@angular/core';\nimport { BranchService } from './../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BatchService } from './../../../../services/batch.service';\n\n@Component({\n  selector: 'ngx-manage-lecture',\n  templateUrl: './manage-lecture.component.html',\n  styleUrls: ['./manage-lecture.component.scss'],\n})\nexport class ManageLectureComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  category: CategoryModel;\n  course: CourseModel;\n  batch: BatchModel;\n\n  onlineLectures: LectureModel[];\n  classroomLectures: LectureModel[];\n\n  date: string;\n\n  constructor(\n    private branchService: BranchService,\n    private lectureService: LectureService,\n    private courseService: CourseService,\n    private batchService: BatchService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private windowService: NbWindowService,\n    private toastrService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.date = this.lectureService.getSearchDate();\n    if (!this.date) {\n      this.date = this.dateService.getDateString();\n    }\n\n    this.onlineLectures = [];\n    this.classroomLectures = [];\n\n    this.getLecture();\n  }\n\n  getTime(startTime: string, endTime: string) {\n    startTime = this.dateService.formatTime(startTime);\n    endTime = this.dateService.formatTime(endTime);\n    return startTime + ' - ' + endTime;\n  }\n\n  getSubject(subject: string) {\n    const mySubject = this.course.subjects.find(\n      (curSubject: SubjectModel) => curSubject._id === subject,\n    );\n\n    if (!mySubject) {\n      return '--';\n    }\n\n    return mySubject.subject;\n  }\n\n  markAttendance(lecture: LectureModel) {\n    this.lectureService.setLectureId(lecture._id);\n    this.lectureService.setLectureData(lecture);\n    this.router.navigate(['../attendance'], {\n      relativeTo: this.route,\n    });\n  }\n\n  startOnlineLecture(lecture: LectureModel) {\n    if (lecture.sessionType === 'online') {\n      this.lectureService.setLectureId(lecture._id);\n      this.windowService.open(OnlineLectureComponent, {\n        title: lecture.topic,\n        context: {},\n      });\n    } else {\n      this.showToastr('top-right', 'danger', 'This os not an Online Lecture');\n    }\n  }\n\n  lectureMaterial(lecture: LectureModel) {\n    this.lectureService.setLectureId(lecture._id);\n    this.lectureService.setLectureData(lecture);\n    this.router.navigate(['../material'], {\n      relativeTo: this.route,\n    });\n  }\n\n  questionAnswers(lecture: LectureModel) {\n    this.lectureService.setLectureId(lecture._id);\n    this.lectureService.setLectureData(lecture);\n    this.router.navigate(['../q&a'], {\n      relativeTo: this.route,\n    });\n  }\n\n  getLecture() {\n    this.loading = true;\n    this.lectureService\n      .getLectures(this.branchId, this.category._id, this.course._id, this.batch._id, this.date)\n      .subscribe(\n        (lectures: LectureModel[]) => {\n          this.onlineLectures = lectures.filter(\n            (lecture: LectureModel) => lecture.sessionType === 'online',\n          );\n          this.classroomLectures = lectures.filter(\n            (lecture: LectureModel) => lecture.sessionType === 'classroom',\n          );\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n  }\n\n  dateChanged() {\n    if (this.date) {\n      this.lectureService.setSearchDate(this.date);\n      this.getLecture();\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { SharedModule } from './../../../../shared/shared.module';\nimport { OnlineLectureComponent } from './online-lecture/online-lecture.component';\nimport { FormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbIconModule,\n  NbButtonModule,\n  NbInputModule,\n  NbTooltipModule,\n  NbAccordionModule,\n  NbTabsetModule,\n  NbFormFieldModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageLectureRoutingModule } from './manage-lecture-routing.module';\nimport { ManageLectureComponent } from './manage-lecture.component';\nimport { SafeUrlPipe } from '../../../../pipe/safe-url.pipe';\n\n@NgModule({\n  declarations: [ManageLectureComponent, OnlineLectureComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    ManageLectureRoutingModule,\n    NbCardModule,\n    NbTooltipModule,\n    NbIconModule,\n    NbButtonModule,\n    NbInputModule,\n    NbAccordionModule,\n    NbTabsetModule,\n    NbFormFieldModule,\n    FormsModule,\n  ],\n})\nexport class ManageLectureModule {}\n"]}