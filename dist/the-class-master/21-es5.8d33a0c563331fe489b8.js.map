{"version":3,"sources":["webpack:///src/app/employee/branch/student/student-course/student-course-installment/collect-student-course-installment/collect-student-course-installment.component.html","webpack:///src/app/employee/branch/student/student-course/student-course-installment/collect-student-course-installment/collect-student-course-installment-routing.module.ts","webpack:///src/app/employee/branch/student/student-course/student-course-installment/collect-student-course-installment/collect-student-course-installment.component.ts","webpack:///src/app/employee/branch/student/student-course/student-course-installment/collect-student-course-installment/collect-student-course-installment.module.ts"],"names":["CollectStudentCourseInstallmentComponent","CollectStudentCourseInstallmentModule","CollectStudentCourseInstallmentRoutingModule","routes","path","component","dateService","branchService","toastrService","studentService","courseService","studentCourseInstallmentService","studentCourseInstallmentReceiptService","router","route","mode","this","loading","submit","branchId","getBranchId","categoryId","getCategoryId","courseId","getCourseId","studentId","getStudentId","courseInstallmentId","getCourseInstallmentId","studentCourseInstallmentId","getStudentCourseInstallmentId","courseInstallmentReceiptForm","generatedBy","validators","required","date","amount","min","lateFee","totalAmount","paymentDate","getDateString","paymentMode","bankDetails","transactionDetails","description","amountDue","queryParams","subscribe","param","showToastr","back","studentCourseInstallmentReceiptId","getStudentCourseInstallmentReceiptId","getStudentCourseInstallmentReceiptForEditing","studentCourseInstallmentReceipt","patchValue","err","getCourseInstallment","courseInstallment","installmentDate","installmentAmount","amountPending","calculateTotalAmount","getRawValue","stepper","previous","markAllAsTouched","invalid","next","receiptDetails","branch","category","course","student","_id","editStudentCourseInstallmentReceipt","res","addStudentCourseInstallmentReceipt","getCourseName","pipe","map","courseName","navigate","relativeTo","replaceUrl","position","status","message","show","deleteStudentCourseInstallmentReceiptId","deleteCourseInstallmentId","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card *ngIf=\"!loading\">\n  <nb-card-header>\n    <button\n      type=\"button\"\n      class=\"float-right\"\n      nbButton\n      size=\"small\"\n      status=\"warning\"\n      (click)=\"back()\"\n    >\n      Back\n    </button>\n    <h3 class=\"\">Collect Installment</h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n      <nb-step [stepControl]=\"courseInstallmentReceiptForm\" label=\"Receipt Details\">\n        <form\n          class=\"\"\n          (submit)=\"courseInstallmentReceiptFormSubmit()\"\n          [formGroup]=\"courseInstallmentReceiptForm\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-generatedBy\">Generated By:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-generatedBy\"\n                  name=\"generatedBy\"\n                  formControlName=\"generatedBy\"\n                  placeholder=\"Generated By\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('generatedBy').touched\n                      ? courseInstallmentReceiptForm.get('generatedBy').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('generatedBy').invalid &&\n                    courseInstallmentReceiptForm.get('generatedBy').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('generatedBy').errors?.required\"\n                  >\n                    Generated By is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-date\">Installment Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-date\"\n                  name=\"date\"\n                  formControlName=\"date\"\n                  placeholder=\"Date\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('date').touched\n                      ? courseInstallmentReceiptForm.get('date').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('date').invalid &&\n                    courseInstallmentReceiptForm.get('date').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('date').errors?.required\"\n                  >\n                    Installment Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-amount\">Installment Amount:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-amount\"\n                  name=\"amount\"\n                  min=\"0\"\n                  formControlName=\"amount\"\n                  placeholder=\"amount\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('amount').touched\n                      ? courseInstallmentReceiptForm.get('amount').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('amount').invalid &&\n                    courseInstallmentReceiptForm.get('amount').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('amount').errors?.required\"\n                  >\n                    Installment Amount is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('amount').errors?.min\"\n                  >\n                    Minimum Installment Amount should be 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-lateFee\">Late Fee:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-lateFee\"\n                  name=\"lateFee\"\n                  min=\"0\"\n                  formControlName=\"lateFee\"\n                  placeholder=\"lateFee\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('lateFee').touched\n                      ? courseInstallmentReceiptForm.get('lateFee').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"calculateTotalAmount()\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('lateFee').invalid &&\n                    courseInstallmentReceiptForm.get('lateFee').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('lateFee').errors?.min\"\n                  >\n                    Minimum late fee Amount should be 0.\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-totalAmount\">Total Fee:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-totalAmount\"\n                  name=\"totalAmount\"\n                  min=\"0\"\n                  formControlName=\"totalAmount\"\n                  placeholder=\"totalAmount\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('totalAmount').touched\n                      ? courseInstallmentReceiptForm.get('totalAmount').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('totalAmount').invalid &&\n                    courseInstallmentReceiptForm.get('totalAmount').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('totalAmount').errors?.required\"\n                  >\n                    Total Amount is Required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('totalAmount').errors?.min\"\n                  >\n                    Minimum late fee Amount should be 0.\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-amountDue\">Pending Amount:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-amountDue\"\n                  name=\"amountDue\"\n                  min=\"0\"\n                  formControlName=\"amountDue\"\n                  placeholder=\"Amount Due\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('amountDue').touched\n                      ? courseInstallmentReceiptForm.get('amountDue').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('amountDue').invalid &&\n                    courseInstallmentReceiptForm.get('amountDue').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('amountDue').errors?.required\"\n                  >\n                    Pending Amount is Required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('amountDue').errors?.min\"\n                  >\n                    Minimum Pending Amount should be 0.\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-paymentDate\">Payment Date:</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-paymentDate\"\n                  name=\"paymentDate\"\n                  formControlName=\"paymentDate\"\n                  placeholder=\"Payment Date\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('paymentDate').touched\n                      ? courseInstallmentReceiptForm.get('paymentDate').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('paymentDate').touched &&\n                    courseInstallmentReceiptForm.get('paymentDate').invalid\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('paymentDate').errors?.required\"\n                  >\n                    Payment date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-paymentMode\">Payment Mode:</label>\n                <nb-select\n                  id=\"input-paymentMode\"\n                  name=\"paymentMode\"\n                  formControlName=\"paymentMode\"\n                  placeholder=\"paymentMode\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('paymentMode').touched\n                      ? courseInstallmentReceiptForm.get('paymentMode').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Payment Mode</nb-option>\n                  <nb-option value=\"cash\">Cash</nb-option>\n                  <nb-option value=\"card\">Card</nb-option>\n                  <nb-option value=\"wallet\">Waller</nb-option>\n                  <nb-option value=\"online\">Online</nb-option>\n                  <nb-option value=\"other\">Other</nb-option>\n                </nb-select>\n              </div>\n              <ng-container\n                *ngIf=\"\n                  courseInstallmentReceiptForm.get('paymentMode').touched &&\n                  courseInstallmentReceiptForm.get('paymentMode').invalid\n                \"\n              >\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"courseInstallmentReceiptForm.get('paymentMode').errors?.required\"\n                >\n                  Payment Mode is required!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-bankDetails\">Bank Details:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-bankDetails\"\n                  name=\"bankDetails\"\n                  formControlName=\"bankDetails\"\n                  placeholder=\"Bank Details\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('bankDetails').touched\n                      ? courseInstallmentReceiptForm.get('bankDetails').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('bankDetails').invalid &&\n                    courseInstallmentReceiptForm.get('bankDetails').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('bankDetails').errors?.required\"\n                  >\n                    Bank Details are required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-transactionDetails\">Transaction Details:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-transactionDetails\"\n                  name=\"transactionDetails\"\n                  formControlName=\"transactionDetails\"\n                  placeholder=\"Transaction Details\"\n                  fullWidth\n                  [status]=\"\n                    courseInstallmentReceiptForm.get('transactionDetails').touched\n                      ? courseInstallmentReceiptForm.get('transactionDetails').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseInstallmentReceiptForm.get('transactionDetails').invalid &&\n                    courseInstallmentReceiptForm.get('transactionDetails').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseInstallmentReceiptForm.get('transactionDetails').errors?.required\"\n                  >\n                    Transaction Details are required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-description\">Description:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  rows=\"2\"\n                  id=\"input-description\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  placeholder=\"Description (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Course</th>\n                  <td>{{ getCourseName(courseId) | async }}</td>\n                </tr>\n\n                <tr>\n                  <th>Generated By</th>\n                  <td>{{ courseInstallmentReceiptForm.value.generatedBy }}</td>\n                </tr>\n                <tr>\n                  <th>Installment Date</th>\n                  <td>{{ dateService.formatDate(courseInstallmentReceiptForm.value.date) }}</td>\n                </tr>\n                <tr>\n                  <th>Installment Amount</th>\n                  <td>\n                    {{ courseInstallmentReceiptForm.value.amount }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Late Fee</th>\n                  <td>{{ courseInstallmentReceiptForm.value.lateFee }}</td>\n                </tr>\n                <tr>\n                  <th>Total Amount</th>\n                  <td>{{ courseInstallmentReceiptForm.value.totalAmount }}</td>\n                </tr>\n                <tr>\n                  <th>Payment Date</th>\n                  <td>\n                    {{ dateService.formatDate(courseInstallmentReceiptForm.value.paymentDate) }}\n                  </td>\n                </tr>\n\n                <tr>\n                  <th>Payment Mode</th>\n                  <td>{{ courseInstallmentReceiptForm.value.paymentMode | uppercase }}</td>\n                </tr>\n                <tr>\n                  <th>Bank Details</th>\n                  <td>{{ courseInstallmentReceiptForm.value.bankDetails }}</td>\n                </tr>\n                <tr>\n                  <th>Transaction Details</th>\n                  <td>{{ courseInstallmentReceiptForm.value.transactionDetails }}</td>\n                </tr>\n                <tr>\n                  <th>description</th>\n                  <td>{{ courseInstallmentReceiptForm.value.description }}</td>\n                </tr>\n                <tr>\n                  <th>Pending Amount</th>\n                  <td>{{ courseInstallmentReceiptForm.value.amountDue }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button\n                type=\"button\"\n                class=\"\"\n                nbButton\n                size=\"small\"\n                (click)=\"previousStep()\"\n                [disabled]=\"submit\"\n              >\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                type=\"button\"\n                (click)=\"saveCourseInstallmentReceipt()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CollectStudentCourseInstallmentComponent } from './collect-student-course-installment.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CollectStudentCourseInstallmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CollectStudentCourseInstallmentRoutingModule {}\n","import { StudentCourseInstallmentService } from './../../../../../../services/student-course-installment.service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { StudentCourseInstallmentReceiptModel } from './../../../../../../models/student-course-installment-receipt.model';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { CourseService } from './../../../../../../services/course.service';\nimport { DateService } from './../../../../../../services/shared-services/date.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { InstallmentModel } from './../../../../../../models/student-course-installment.model';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { BranchService } from '../../../../../../services/branch.service';\nimport { StudentService } from '../../../../../../services/student.service';\n\nimport { StudentCourseInstallmentReceiptService } from '../../../../../../services/student-course-installment-receipt.service';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-collect-student-course-installment',\n  templateUrl: './collect-student-course-installment.component.html',\n  styleUrls: ['./collect-student-course-installment.component.scss'],\n})\nexport class CollectStudentCourseInstallmentComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n  private categoryId: string;\n  courseId: string;\n  private studentId: string;\n\n  private courseInstallmentId: string;\n\n  courseInstallment: InstallmentModel;\n  private studentCourseInstallmentId: string;\n  private studentCourseInstallmentReceiptId: string;\n  private studentCourseInstallmentReceipt: StudentCourseInstallmentReceiptModel;\n  courseInstallmentReceiptForm: FormGroup;\n\n  constructor(\n    public dateService: DateService,\n    private branchService: BranchService,\n    private toastrService: NbToastrService,\n    private studentService: StudentService,\n    private courseService: CourseService,\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\n    private studentCourseInstallmentReceiptService: StudentCourseInstallmentReceiptService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    this.categoryId = this.branchService.getCategoryId();\n    this.courseId = this.courseService.getCourseId();\n    this.studentId = this.studentService.getStudentId();\n    this.courseInstallmentId = this.studentCourseInstallmentService.getCourseInstallmentId();\n\n    if (!this.branchId || !this.categoryId || !this.courseId || !this.studentId) {\n      this.back();\n\n      return;\n    }\n\n    this.studentCourseInstallmentId = this.studentCourseInstallmentService.getStudentCourseInstallmentId();\n\n    this.courseInstallmentReceiptForm = new FormGroup({\n      generatedBy: new FormControl(null, { validators: [Validators.required] }),\n      date: new FormControl(null, { validators: [Validators.required] }),\n      amount: new FormControl(null, { validators: [Validators.min(0)] }),\n      lateFee: new FormControl(0, { validators: [Validators.min(0)] }),\n      totalAmount: new FormControl(null, { validators: [Validators.required, Validators.min(0)] }),\n      paymentDate: new FormControl(this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n      paymentMode: new FormControl('', { validators: [Validators.required] }),\n      bankDetails: new FormControl(null, { validators: [] }),\n      transactionDetails: new FormControl(null, { validators: [] }),\n      description: new FormControl(null, { validators: [] }),\n      amountDue: new FormControl(null, { validators: [Validators.required, Validators.min(0)] }),\n    });\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.back();\n\n      return;\n    }\n\n    // tslint:disable-next-line: max-line-length\n    this.studentCourseInstallmentReceiptId = this.studentCourseInstallmentReceiptService.getStudentCourseInstallmentReceiptId();\n\n    if (mode && !this.studentCourseInstallmentReceiptId) {\n      this.showToastr('top-right', 'danger', 'Receipt Id Not Provided');\n      this.back();\n\n      return;\n    }\n\n    if (this.studentCourseInstallmentReceiptId) {\n      this.studentCourseInstallmentReceiptService\n        .getStudentCourseInstallmentReceiptForEditing(this.studentCourseInstallmentReceiptId)\n        .subscribe(\n          (studentCourseInstallmentReceipt: StudentCourseInstallmentReceiptModel) => {\n            if (!studentCourseInstallmentReceipt) {\n              this.showToastr('top-right', 'danger', 'Receipt Not Available');\n              this.back();\n\n              return;\n            }\n            this.studentCourseInstallmentReceipt = studentCourseInstallmentReceipt;\n\n            this.courseInstallmentReceiptForm.patchValue({\n              generatedBy: this.studentCourseInstallmentReceipt.generatedBy,\n              date: this.studentCourseInstallmentReceipt.date,\n              amount: this.studentCourseInstallmentReceipt.amount,\n              lateFee: this.studentCourseInstallmentReceipt.lateFee,\n              totalAmount: this.studentCourseInstallmentReceipt.totalAmount,\n              paymentDate: this.studentCourseInstallmentReceipt.paymentDate,\n              paymentMode: this.studentCourseInstallmentReceipt.paymentMode,\n              bankDetails: this.studentCourseInstallmentReceipt.bankDetails,\n              transactionDetails: this.studentCourseInstallmentReceipt.transactionDetails,\n              description: this.studentCourseInstallmentReceipt.description,\n              amountDue: this.studentCourseInstallmentReceipt.amountDue,\n            });\n\n            this.loading = false;\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', 'Receipt Not Available');\n            this.back();\n          },\n        );\n    } else {\n      this.studentCourseInstallmentService\n        .getCourseInstallment(this.courseInstallmentId)\n        .subscribe((courseInstallment: InstallmentModel) => {\n          if (!courseInstallment) {\n            this.back();\n            return;\n          }\n\n          this.courseInstallment = courseInstallment;\n\n          this.courseInstallmentReceiptForm.patchValue({\n            date: courseInstallment.installmentDate,\n            amount: courseInstallment.installmentAmount,\n            amountDue: courseInstallment.amountPending,\n          });\n\n          this.calculateTotalAmount();\n\n          this.loading = false;\n        });\n    }\n  }\n\n  calculateTotalAmount() {\n    let lateFee = +this.courseInstallmentReceiptForm.getRawValue().lateFee;\n    if (!lateFee || lateFee < 0) {\n      lateFee = 0;\n    }\n    const amount = +this.courseInstallmentReceiptForm.getRawValue().amount;\n\n    const totalAmount = amount + lateFee;\n\n    this.courseInstallmentReceiptForm.patchValue({ totalAmount });\n  }\n\n  previousStep() {\n    this.stepper.previous();\n  }\n\n  courseInstallmentReceiptFormSubmit() {\n    this.courseInstallmentReceiptForm.markAllAsTouched();\n    if (this.courseInstallmentReceiptForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Receipt Details are Required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveCourseInstallmentReceipt() {\n    if (this.courseInstallmentReceiptForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Receipt Details are Required');\n      return;\n    }\n    this.submit = true;\n\n    const receiptDetails: any = this.courseInstallmentReceiptForm.getRawValue();\n    receiptDetails.studentCourseInstallmentId = this.studentCourseInstallmentId;\n    receiptDetails.courseInstallmentId = this.courseInstallmentId;\n    receiptDetails.branch = this.branchId;\n    receiptDetails.category = this.categoryId;\n    receiptDetails.course = this.courseId;\n    receiptDetails.student = this.studentId;\n\n    if (!this.studentCourseInstallmentReceipt) {\n      this.studentCourseInstallmentReceiptService\n        .addStudentCourseInstallmentReceipt(receiptDetails)\n        .subscribe(\n          (res: { receiptId: string }) => {\n            this.showToastr('top-right', 'success', 'Installment Receipt Generated Successfully!');\n            // this.studentCourseInstallmentService.setCourseInstallmentReceipt(\n            //   this.courseInstallmentId,\n            //   res.receiptId,\n            // );\n            this.back();\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.submit = false;\n          },\n        );\n    } else {\n      receiptDetails._id = this.studentCourseInstallmentReceipt._id;\n      this.studentCourseInstallmentReceiptService\n        .editStudentCourseInstallmentReceipt(receiptDetails)\n        .subscribe(\n          (res: any) => {\n            this.showToastr('top-right', 'success', 'Installment Receipt Updated Successfully!');\n            this.back();\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.submit = false;\n          },\n        );\n    }\n  }\n\n  getCourseName(courseId: string): Observable<string> {\n    return this.courseService.getCourseName(courseId).pipe(\n      map((courseName: string) => {\n        return courseName;\n      }),\n    );\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {\n    this.studentCourseInstallmentReceiptService.deleteStudentCourseInstallmentReceiptId();\n    this.studentCourseInstallmentService.deleteCourseInstallmentId();\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbInputModule,\n  NbSelectModule,\n  NbButtonModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbStepperModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CollectStudentCourseInstallmentRoutingModule } from './collect-student-course-installment-routing.module';\nimport { CollectStudentCourseInstallmentComponent } from './collect-student-course-installment.component';\n\n@NgModule({\n  declarations: [CollectStudentCourseInstallmentComponent],\n  imports: [\n    CommonModule,\n    CollectStudentCourseInstallmentRoutingModule,\n\n    NbCardModule,\n    NbInputModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n    NbSpinnerModule,\n    NbStepperModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class CollectStudentCourseInstallmentModule {}\n"]}