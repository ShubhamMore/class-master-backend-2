{"version":3,"sources":["webpack:///src/app/employee/branch/salary/view-salary-receipt/view-salary-receipt.component.html","webpack:///src/app/employee/branch/salary/view-salary-receipt/view-salary-receipt-routing.module.ts","webpack:///src/app/employee/branch/salary/view-salary-receipt/view-salary-receipt.component.ts","webpack:///src/app/employee/branch/salary/view-salary-receipt/view-salary-receipt.module.ts"],"names":["routes","path","component","ViewSalaryReceiptComponent","branchService","salaryService","employeeService","branchEmployeeService","dateService","router","toastrService","receiptService","route","this","loading","branchId","getBranchId","getEmployeeSalaryData","subscribe","salary","showToastr","back","getBillingDetails","receipt","error","totalEarningAmount","earnings","forEach","earning","amount","parseFloat","toFixed","totalDeductionAmount","deductions","deduction","navigate","relativeTo","window","print","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ViewSalaryReceiptRoutingModule","forChild","ViewSalaryReceiptModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-body>\n    <div class=\"row\" *ngIf=\"!loading\">\n      <div class=\"col-12 text-center\">\n        <h1>{{ receipt.name }}</h1>\n        <h3>{{ receipt.address }}</h3>\n      </div>\n    </div>\n\n    <h5 class=\"text-center\">Salary Slip</h5>\n\n    <br />\n\n    <div class=\"row\">\n      <div class=\"col-md-10 col-12 mx-auto\">\n        <div class=\"row\">\n          <div class=\"col-12 text-right\">\n            <span><strong>Date: </strong> {{ dateService.formatDate(salary.date) }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Employee Name: </strong> {{ salary.name }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Employee Role: </strong> {{ salary.role }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span\n              ><strong>Month: </strong> {{ dateService.getMonthByMonthNumber(salary.month) }}</span\n            >\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span><strong>Year: </strong>{{ salary.year }}</span>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <span\n              ><strong>Description: </strong\n              >{{ salary.description ? salary.description : '--' }}</span\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <br />\n\n    <div class=\"row\">\n      <div class=\"col-md-6 col-12\">\n        <h5>Earnings</h5>\n        <div class=\"table-responsive\" *ngIf=\"salary.earnings.length > 0; else noEarnings\">\n          <table class=\"table table-am\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Earning</th>\n                <th>Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let earning of salary.earnings; let i = index\">\n                <td>{{ i + 1 }}</td>\n                <td>{{ earning.description }}</td>\n                <td>{{ earning.amount }}</td>\n              </tr>\n              <tr>\n                <th colspan=\"2\">Total</th>\n                <th>{{ totalEarning() }}</th>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div class=\"col-md-6 col-12\">\n        <h5>Deductions</h5>\n        <div class=\"table-responsive\" *ngIf=\"salary.deductions.length > 0; else noDeductions\">\n          <table class=\"table table-sm\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Deduction</th>\n                <th>Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let deduction of salary.deductions; let i = index\">\n                <td>{{ i + 1 }}</td>\n                <td>{{ deduction.description }}</td>\n                <td>{{ deduction.amount }}</td>\n              </tr>\n              <tr>\n                <th colspan=\"2\">Total</th>\n                <th>{{ totalDeduction() }}</th>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"text-right\">\n          <span><strong>Net Salary: </strong> {{ salary.netSalary }}/-</span>\n        </div>\n        <span><strong>Net Salary in Words: </strong> {{ salary.netSalaryInWords }}</span>\n      </div>\n    </div>\n\n    <br />\n\n    <div class=\"row\">\n      <div class=\"col-md-6 col-12\">\n        <span><strong>Generated By: </strong>{{ salary.generatedBy }}</span>\n      </div>\n      <div class=\"col-md-6 col-12\">\n        <span><strong>Payment Mode: </strong>{{ salary.paymentMode | uppercase }}</span>\n      </div>\n      <div class=\"col-md-6 col-12\">\n        <span\n          ><strong>Bank Details: </strong>\n          {{ salary.bankDetails ? salary.bankDetails : '--' }}</span\n        >\n      </div>\n      <div class=\"col-md-6 col-12\">\n        <span>\n          <strong>Transaction Details: </strong>\n          {{ salary.transactionDetails ? salary.transactionDetails : '--' }}\n        </span>\n      </div>\n    </div>\n\n    <br />\n\n    <h6 class=\"text-center\">\n      <small>*This is Computer Generated Receipt, Does not Required any Stamp or Signature</small>\n    </h6>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <button\n          class=\"float-right\"\n          type=\"button\"\n          (click)=\"print()\"\n          nbButton\n          size=\"small\"\n          status=\"success\"\n        >\n          <nb-icon icon=\"printer-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #noEarnings>\n  <span class=\"text-center\">No Earnings</span>\n</ng-template>\n<ng-template #noDeductions>\n  <span class=\"text-center\">No Deductions</span>\n</ng-template>\n","import { ViewSalaryReceiptComponent } from './view-salary-receipt.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ViewSalaryReceiptComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ViewSalaryReceiptRoutingModule {}\n","import { BranchEmployeeService } from './../../../../services/branch-employee.service';\nimport { BranchService } from './../../../../services/branch.service';\nimport { InstituteBillingService } from './../../../../services/billing.service';\nimport { InstituteBillingModel } from './../../../../models/institute-billing.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { DateService } from './../../../../services/shared-services/date.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { EmployeeService } from './../../../../services/employee.service';\nimport { EmployeeSalaryService } from './../../../../services/employee-salary.service';\nimport { EmployeeSalaryModel } from './../../../../models/employee-salary.model';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'ngx-view-salary-receipt',\n  templateUrl: './view-salary-receipt.component.html',\n  styleUrls: ['./view-salary-receipt.component.scss'],\n})\nexport class ViewSalaryReceiptComponent implements OnInit, OnDestroy {\n  loading: boolean;\n  salary: EmployeeSalaryModel;\n  receipt: InstituteBillingModel;\n  branchId: string;\n\n  constructor(\n    private branchService: BranchService,\n    private salaryService: EmployeeSalaryService,\n    private employeeService: EmployeeService,\n    private branchEmployeeService: BranchEmployeeService,\n    public dateService: DateService,\n    private router: Router,\n    private toastrService: NbToastrService,\n    private receiptService: InstituteBillingService,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    const branchId = this.branchService.getBranchId();\n    if (!branchId) {\n      this.back();\n      return;\n    }\n\n    this.salaryService.getEmployeeSalaryData().subscribe((salary: EmployeeSalaryModel) => {\n      this.salary = salary;\n    });\n\n    if (!this.salary) {\n      this.showToastr('top-right', 'danger', 'Salary Not Found');\n      this.back();\n    }\n\n    this.receiptService.getBillingDetails(branchId).subscribe(\n      (receipt: InstituteBillingModel) => {\n        this.receipt = receipt;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.back();\n      },\n    );\n  }\n\n  totalEarning() {\n    let totalEarningAmount: any = 0;\n    this.salary.earnings.forEach((earning: any) => {\n      totalEarningAmount += +earning.amount;\n    });\n    return parseFloat(totalEarningAmount).toFixed(2);\n  }\n\n  totalDeduction() {\n    let totalDeductionAmount: any = 0;\n    this.salary.deductions.forEach((deduction: any) => {\n      totalDeductionAmount += +deduction.amount;\n    });\n    return parseFloat(totalDeductionAmount).toFixed(2);\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  print() {\n    window.print();\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ViewSalaryReceiptRoutingModule } from './view-salary-receipt-routing.module';\nimport { ViewSalaryReceiptComponent } from './view-salary-receipt.component';\n\nimport { NbCardModule, NbButtonModule, NbIconModule } from '@nebular/theme';\n\n@NgModule({\n  declarations: [ViewSalaryReceiptComponent],\n  imports: [\n    CommonModule,\n    ViewSalaryReceiptRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class ViewSalaryReceiptModule {}\n"]}