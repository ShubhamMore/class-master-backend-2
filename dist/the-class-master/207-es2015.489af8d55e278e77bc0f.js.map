{"version":3,"sources":["webpack:///src/app/institute/branch/student/manage-student/manage-student.component.html","webpack:///src/app/institute/branch/student/manage-student/manage-student-routing.module.ts","webpack:///src/app/institute/branch/student/manage-student/manage-student.component.ts","webpack:///src/app/institute/branch/student/manage-student/manage-student.module.ts"],"names":["routes","path","component","ManageStudentComponent","branchService","studentService","toastrService","branchStudentService","router","route","this","queryParams","subscribe","param","ngOnInit","loading","branchId","getBranchId","type","setStudentType","branchStudents","filteredBranchStudents","categories","category","getCategories","getStudents","navigate","relativeTo","getBranchData","branch","getBranch","setBranchData","error","showToastr","getBranchStudentNameIds","err","student","trim","toLowerCase","filter","branchStudent","name","includes","id","setStudentId","setBranchStudentId","mode","setCategoryId","status","i","changeBranchStudentStatus","res","splice","categoryId","find","curCategory","_id","position","message","show","searchStudent","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageStudentRoutingModule","forChild","ManageStudentModule"],"mappings":"2QAgBU,gDAAsE,yBAEpE,+B,yBAF6C,yCAAuB,0E,kEA4ChE,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAAwB,8BAC5B,sCAAI,yBAAyC,8BAE7C,sCACE,0CACE,6CAKE,6LAQA,sCACF,8BACA,8CAOE,gMAQA,0CACF,8BACF,8BACF,8BAEA,uCACE,8CAIE,+KAEA,mCACF,8BACF,8BAEA,uCACE,8CAKE,mMAIA,0BACF,8BACF,8BACF,8B,wEAjEM,kEACA,qEACA,wFAuDA,6FAKA,yG,yBA9EZ,0CAIE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,mCAAO,8BACX,sCAAI,oCAAQ,8BACZ,uCAAI,oCAAO,8BACX,0CAAgB,mCAAM,8BACxB,8BACF,8BACA,0CACE,6CAmEF,8BACF,8BACF,+B,6CArEU,4F,sBAuER,wCAAiC,iDAAqB,+B,yBAvF1D,0CACE,6CAqFA,+FAGF,wC,4EAtFI,gGAAgE,e,sBAwFlE,wCAAiC,sCAAU,+BCnIrD,MAAMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCOG,M,MAAMC,EASX,YACUC,EACAC,EACAC,EACAC,EAEAC,EACAC,GANA,KAAAL,gBACA,KAAAC,iBACA,KAAAC,gBACA,KAAAC,uBAEA,KAAAC,SACA,KAAAC,QAERC,KAAKD,MAAME,YAAYC,UAAWC,IAEhCH,KAAKI,aAIT,WACEJ,KAAKK,SAAU,EACfL,KAAKM,SAAWN,KAAKN,cAAca,cAC9BP,KAAKM,UAKVN,KAAKD,MAAME,YAAYC,UAAWC,IAChCH,KAAKQ,KAAOL,EAAMK,OAGF,WAAdR,KAAKQ,MAAmC,aAAdR,KAAKQ,MAQnCR,KAAKL,eAAec,eAAeT,KAAKQ,MAExCR,KAAKU,eAAiB,GACtBV,KAAKW,uBAAyB,GAC9BX,KAAKY,WAAa,GAClBZ,KAAKa,SAAW,GAChBb,KAAKc,gBACLd,KAAKe,YAAYf,KAAKa,WAdpBb,KAAKF,OAAOkB,SAAS,CAAC,aAAc,CAClCC,WAAYjB,KAAKD,MACjBE,YAAa,CAAEO,KAAM,aAXvBR,KAAKF,OAAOkB,SAAS,CAAC,OAAQ,CAAEC,WAAYjB,KAAKD,QA0B7C,gBACNC,KAAKN,cAAcwB,gBAAgBhB,UAAWiB,IACxCA,IACFnB,KAAKY,WAAaO,EAAOP,cAIxBZ,KAAKY,YACRZ,KAAKN,cAAc0B,UAAUpB,KAAKM,UAAUJ,UACzCiB,IACCnB,KAAKN,cAAc2B,cAAcF,GACjCnB,KAAKY,WAAaO,EAAOP,YAE1BU,IACCtB,KAAKuB,WAAW,YAAa,SAAUD,GACvCtB,KAAKK,SAAU,IAMvB,YAAYQ,GACVb,KAAKK,SAAU,EACfL,KAAKH,qBAAqB2B,wBAAwBxB,KAAKM,SAAUO,EAAUb,KAAKQ,MAAMN,UACnFQ,IACCV,KAAKU,eAAiBA,EACtBV,KAAKW,uBAAyBD,EAC9BV,KAAKK,SAAU,GAEhBoB,IACCzB,KAAKuB,WAAW,YAAa,SAAUE,GACvCzB,KAAKK,SAAU,IAKrB,cAAcqB,GACZA,EAAUA,EAAQC,OAAOC,cAEvB5B,KAAKW,uBADHe,EAC4B1B,KAAKU,eAAemB,OAC/CC,GAAsCA,EAAcC,KAAKH,cAAcI,SAASN,IAGrD,IAAI1B,KAAKU,gBAI3C,kBAAkBuB,EAAYP,GAC5B1B,KAAKL,eAAeuC,aAAaR,GACjC1B,KAAKH,qBAAqBsC,mBAAmBF,GAC7CjC,KAAKF,OAAOkB,SAAS,CAAC,WAAY,CAAEC,WAAYjB,KAAKD,MAAOE,YAAa,CAAEmC,KAAM,UAGnF,qBAAqBH,EAAYP,EAAiBb,GAChDb,KAAKL,eAAeuC,aAAaR,GACjC1B,KAAKN,cAAc2C,cAAcxB,GACjCb,KAAKH,qBAAqBsC,mBAAmBF,GAC7CjC,KAAKF,OAAOkB,SAAS,CAAC,aAAc,CAAEC,WAAYjB,KAAKD,QAGzD,wBAAwBkC,EAAYP,EAAiBb,GACnDb,KAAKL,eAAeuC,aAAaR,GACjC1B,KAAKN,cAAc2C,cAAcxB,GACjCb,KAAKH,qBAAqBsC,mBAAmBF,GAC7CjC,KAAKF,OAAOkB,SAAS,CAAC,iBAAkB,CAAEC,WAAYjB,KAAKD,QAG7D,0BAA0BkC,EAAYK,EAAiBC,GACrDvC,KAAKH,qBAAqB2C,0BAA0BP,EAAIK,GAAQpC,UAC7DuC,IACCzC,KAAKU,eAAegC,OAAOH,EAAG,GAC9BvC,KAAKK,SAAU,GAEhBoB,IACCzB,KAAKK,SAAU,IAKrB,YAAYsC,GACV,MAAM9B,EAAWb,KAAKY,WAAWgC,KAC9BC,GAA+BA,EAAYC,MAAQH,GAGtD,OAAI9B,EACKA,EAASA,SAGX,KAGD,WAAWkC,EAAeT,EAAaU,GAC7ChD,KAAKJ,cAAcqD,KAAKX,EAAQU,EAAS,CACvCD,WACAT,Y,6CApJO7C,GAAsB,uO,mDAAtBA,EAAsB,kkC,GAAA,MFdnC,2CACE,kDACE,yCACE,yCACE,sCAAI,yB,qCAA+B,8BACrC,8BACA,yCACE,+CAME,+DAAkB,EAAAsB,YAAA,MAElB,+CAAoB,gCAAG,8BACvB,kDAGF,8BACF,8BACF,8BACF,8BACA,mDACE,0CACE,0CACE,kDACE,yCACA,4CAME,sDAAS,EAAAmC,cAAA,mBANX,8BAQF,8BACF,8BACF,8BAEA,kCAEA,0CACE,2CACE,sDA0FA,gGAGF,8BACF,8BACF,8BACF,+B,4CAxIY,qHAMF,6EAMW,8EA4BC,0EAAkC,gB,uGE9BjD,IDJL,CACE3D,KAAM,iBACN4D,aAAc,IACZ,iCAAkEC,KAC/DC,GAAMA,EAAEC,qBAIf,CACE/D,KAAM,KACNgE,WAAY,iBACZC,UAAW,SAQR,Y,MAAMC,G,yDAAAA,I,+EAAAA,IAA0B,SAH5B,CAAC,IAAaC,SAASpE,IACtB,O,GAEL,GECA,Q,MAAMqE,G,yDAAAA,I,+EAAAA,IAAmB,SAZrB,CACP,IACA,EACA,IACA,IACA,KACA,IACA,IACA,IACA,S,GAGG","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>{{ type | uppercase }} Students</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-category\"\n          name=\"category\"\n          [selected]=\"category\"\n          fullWidth\n          placeholder=\"Select Category\"\n          (selectedChange)=\"getStudents($event)\"\n        >\n          <nb-option value=\"\">All</nb-option>\n          <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n            category.category\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-6 col-sm-8 col-12\">\n        <nb-form-field>\n          <nb-icon nbPrefix icon=\"search-outline\" pack=\"eva\"></nb-icon>\n          <input\n            type=\"text\"\n            nbInput\n            shape=\"round\"\n            placeholder=\"Search\"\n            fullWidth\n            (input)=\"searchStudent($event.target.value)\"\n          />\n        </nb-form-field>\n      </div>\n    </div>\n\n    <br />\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"filteredBranchStudents.length > 0; else noBranchStudents\"\n          >\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Student</th>\n                  <th>Category</th>\n                  <th>Courses</th>\n                  <th colspan=\"2\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let branchStudent of filteredBranchStudents; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ branchStudent.name }}</td>\n                  <td>{{ getCategory(branchStudent.category) }}</td>\n\n                  <td>\n                    <div class=\"btn-group\">\n                      <button\n                        nbButton\n                        size=\"small\"\n                        status=\"success\"\n                        nbPrefix\n                        (click)=\"\n                          branchStudentCourses(\n                            branchStudent._id,\n                            branchStudent.student,\n                            branchStudent.category\n                          )\n                        \"\n                      >\n                        Courses\n                      </button>\n                      <button\n                        class=\"\"\n                        nbButton\n                        size=\"small\"\n                        nbTooltip=\"Add Course\"\n                        nbSuffix\n                        status=\"success\"\n                        (click)=\"\n                          branchAddStudentCourses(\n                            branchStudent._id,\n                            branchStudent.student,\n                            branchStudent.category\n                          )\n                        \"\n                      >\n                        <nb-icon icon=\"plus-outline\"></nb-icon>\n                      </button>\n                    </div>\n                  </td>\n\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      status=\"basic\"\n                      (click)=\"editBranchStudent(branchStudent._id, branchStudent.student)\"\n                    >\n                      Edit\n                    </button>\n                  </td>\n\n                  <td>\n                    <button\n                      class=\"\"\n                      nbButton\n                      size=\"small\"\n                      [status]=\"!branchStudent.status ? 'warning' : 'danger'\"\n                      (click)=\"\n                        changeBranchStudentStatus(branchStudent._id, !branchStudent.status, i)\n                      \"\n                    >\n                      {{ !branchStudent.status ? 'Activate' : 'Deactivate' }}\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBranchStudents>\n            <p class=\"text-center pt-5 pb-5\">No Students Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageStudentComponent } from './manage-student.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageStudentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageStudentRoutingModule {}\n","import { NbToastrService } from '@nebular/theme';\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\nimport { StudentService } from './../../../../services/student.service';\nimport { BranchStudentService } from '../../../../services/branch-student.service';\nimport { BranchStudentModel } from '../../../../models/branch-student.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../services/branch.service';\n\n@Component({\n  selector: 'ngx-manage-student',\n  templateUrl: './manage-student.component.html',\n  styleUrls: ['./manage-student.component.scss'],\n})\nexport class ManageStudentComponent implements OnInit {\n  loading: boolean;\n  private branchId: string;\n  type: string;\n  branchStudents: BranchStudentModel[];\n  filteredBranchStudents: BranchStudentModel[];\n\n  categories: CategoryModel[];\n  category: string;\n  constructor(\n    private branchService: BranchService,\n    private studentService: StudentService,\n    private toastrService: NbToastrService,\n    private branchStudentService: BranchStudentService,\n\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      // put the code from `ngOnInit` here\n      this.ngOnInit();\n    });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.route.queryParams.subscribe((param: Params) => {\n      this.type = param.type;\n    });\n\n    if (this.type !== 'active' && this.type !== 'inactive') {\n      this.router.navigate(['../manage'], {\n        relativeTo: this.route,\n        queryParams: { type: 'active' },\n      });\n      return;\n    }\n\n    this.studentService.setStudentType(this.type);\n\n    this.branchStudents = [];\n    this.filteredBranchStudents = [];\n    this.categories = [];\n    this.category = '';\n    this.getCategories();\n    this.getStudents(this.category);\n  }\n\n  private getCategories() {\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\n      if (branch) {\n        this.categories = branch.categories;\n      }\n    });\n\n    if (!this.categories) {\n      this.branchService.getBranch(this.branchId).subscribe(\n        (branch: BranchModel) => {\n          this.branchService.setBranchData(branch);\n          this.categories = branch.categories;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n    }\n  }\n\n  getStudents(category: string) {\n    this.loading = true;\n    this.branchStudentService.getBranchStudentNameIds(this.branchId, category, this.type).subscribe(\n      (branchStudents: BranchStudentModel[]) => {\n        this.branchStudents = branchStudents;\n        this.filteredBranchStudents = branchStudents;\n        this.loading = false;\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.loading = false;\n      },\n    );\n  }\n\n  searchStudent(student: string) {\n    student = student.trim().toLowerCase();\n    if (student) {\n      this.filteredBranchStudents = this.branchStudents.filter(\n        (branchStudent: BranchStudentModel) => branchStudent.name.toLowerCase().includes(student),\n      );\n    } else {\n      this.filteredBranchStudents = [...this.branchStudents];\n    }\n  }\n\n  editBranchStudent(id: string, student: string) {\n    this.studentService.setStudentId(student);\n    this.branchStudentService.setBranchStudentId(id);\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\n  }\n\n  branchStudentCourses(id: string, student: string, category: string) {\n    this.studentService.setStudentId(student);\n    this.branchService.setCategoryId(category);\n    this.branchStudentService.setBranchStudentId(id);\n    this.router.navigate(['../course'], { relativeTo: this.route });\n  }\n\n  branchAddStudentCourses(id: string, student: string, category: string) {\n    this.studentService.setStudentId(student);\n    this.branchService.setCategoryId(category);\n    this.branchStudentService.setBranchStudentId(id);\n    this.router.navigate(['../course/add'], { relativeTo: this.route });\n  }\n\n  changeBranchStudentStatus(id: string, status: boolean, i: number) {\n    this.branchStudentService.changeBranchStudentStatus(id, status).subscribe(\n      (res: any) => {\n        this.branchStudents.splice(i, 1);\n        this.loading = false;\n      },\n      (err: any) => {\n        this.loading = false;\n      },\n    );\n  }\n\n  getCategory(categoryId: string) {\n    const category = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\n    );\n\n    if (category) {\n      return category.category;\n    }\n\n    return '--';\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ManageStudentComponent } from './manage-student.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageStudentRoutingModule } from './manage-student-routing.module';\n\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbTooltipModule,\n  NbSelectModule,\n  NbFormFieldModule,\n  NbInputModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [ManageStudentComponent],\n  imports: [\n    CommonModule,\n    ManageStudentRoutingModule,\n    NbCardModule,\n    NbInputModule,\n    NbSelectModule,\n    NbFormFieldModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageStudentModule {}\n"]}