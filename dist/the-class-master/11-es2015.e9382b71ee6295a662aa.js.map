{"version":3,"sources":["webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions.component.html","webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions-routing.module.ts","webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions.component.ts","webpack:///src/app/employee/branch/exam/online-test/online-test-question/add-online-test-questions/add-online-test-questions.module.ts"],"names":["routes","path","component","AddOnlineTestQuestionsComponent","branchService","onlineExamQuestionService","onlineExamService","dateService","toastrService","router","route","this","loading","submit","branchId","getBranchId","getOnlineExamData","subscribe","onlineExam","back","mode","queryParams","param","onlineExamQuestionId","getOnlineExamQuestionId","showToastr","onlineExamQuestionForm","question","validators","required","answers","marks","eachQuestionMarks","atLeastOneCorrectAnswerValidator","bind","getOnlineExamQuestion","onlineExamQuestion","patchValue","get","controls","forEach","answer","addOption","err","generateOption","navigate","relativeTo","group","isCorrect","value","atLeastOneCorrectAnswerError","answerData","push","newAnswer","i","removeAt","stepper","previous","markAllAsTouched","invalid","next","_id","editOnlineExamQuestion","res","newOnlineExamQuestion","position","status","message","show","replaceUrl","deleteOnlineExamQuestionId","deleteOnlineExamQuestionData","submitOnlineExamQuestionForm","previousStep","saveOnlineExamQuestion","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddOnlineTestQuestionsRoutingModule","forChild","AddOnlineTestQuestionsModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-9\">\n        <h3>{{ onlineExam ? 'Edit' : 'Add' }} Online Exam Question</h3>\n      </div>\n      <div class=\"col-3\">\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n          Back\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n          <nb-step [stepControl]=\"onlineExamQuestionForm\" label=\"Online Exam Details\">\n            <form [formGroup]=\"onlineExamQuestionForm\" (submit)=\"submitOnlineExamQuestionForm()\">\n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <nb-card>\n                    <nb-card-header>\n                      <label class=\"label\" for=\"input-question\">Question:</label>\n                    </nb-card-header>\n                    <nb-card-body>\n                      <div class=\"form-control-group\">\n                        <textarea\n                          type=\"text\"\n                          nbInput\n                          id=\"input-question\"\n                          name=\"question\"\n                          rows=\"2\"\n                          formControlName=\"question\"\n                          placeholder=\"Question\"\n                          fullWidth\n                          [status]=\"\n                            onlineExamQuestionForm.get('question').touched\n                              ? onlineExamQuestionForm.get('question').invalid\n                                ? 'danger'\n                                : 'success'\n                              : 'basic'\n                          \"\n                        ></textarea>\n                        <ng-container\n                          *ngIf=\"\n                            onlineExamQuestionForm.get('question').invalid &&\n                            onlineExamQuestionForm.get('question').touched\n                          \"\n                        >\n                          <p\n                            class=\"caption status-danger\"\n                            *ngIf=\"onlineExamQuestionForm.get('question').errors?.required\"\n                          >\n                            Online Exam Question is required!\n                          </p>\n                        </ng-container>\n                      </div>\n                    </nb-card-body>\n                  </nb-card>\n                </div>\n\n                <div\n                  class=\"col-md-12\"\n                  *ngFor=\"\n                    let answer of onlineExamQuestionForm.get('answers')['controls'];\n                    let i = index\n                  \"\n                >\n                  <nb-card [formGroup]=\"answer\">\n                    <nb-card-header>\n                      <div class=\"row\">\n                        <div class=\"col-12\">\n                          <button\n                            class=\"float-right\"\n                            type=\"button\"\n                            nbButton\n                            size=\"small\"\n                            status=\"danger\"\n                            (click)=\"deleteOption(i)\"\n                            *ngIf=\"i !== 0 && i !== 1\"\n                          >\n                            <nb-icon icon=\"trash-outline\"></nb-icon>\n                          </button>\n                          <nb-checkbox\n                            [checked]=\"answer.get('isCorrect').value\"\n                            formControlName=\"isCorrect\"\n                          >\n                            Answer {{ i + 1 }}\n                          </nb-checkbox>\n                        </div>\n                      </div>\n                    </nb-card-header>\n                    <nb-card-body>\n                      <div class=\"form-control-group\">\n                        <textarea\n                          type=\"text\"\n                          nbInput\n                          rows=\"2\"\n                          id=\"input-answer-{{ i }}\"\n                          name=\"answer-{{ i }}\"\n                          formControlName=\"answer\"\n                          placeholder=\"Answer {{ i + 1 }}\"\n                          fullWidth\n                          [status]=\"\n                            answer.get('answer').touched\n                              ? answer.get('answer').invalid\n                                ? 'danger'\n                                : 'success'\n                              : 'basic'\n                          \"\n                        ></textarea>\n                        <ng-container\n                          *ngIf=\"answer.get('answer').invalid && answer.get('answer').touched\"\n                        >\n                          <p\n                            class=\"caption status-danger\"\n                            *ngIf=\"answer.get('answer').errors?.required\"\n                          >\n                            Answer {{ i + 1 }} is required!\n                          </p>\n                        </ng-container>\n                      </div>\n                    </nb-card-body>\n                  </nb-card>\n                </div>\n\n                <div class=\"col-md-12\">\n                  <button\n                    class=\"float-right\"\n                    type=\"button\"\n                    nbButton\n                    size=\"small\"\n                    status=\"primary\"\n                    (click)=\"generateOption()\"\n                  >\n                    Add Option\n                  </button>\n                </div>\n              </div>\n\n              <div class=\"col-12\">\n                <ng-container\n                  *ngIf=\"\n                    onlineExamQuestionForm.hasError('atLeastOneCorrectAnswerError') &&\n                    onlineExamQuestionForm.touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      onlineExamQuestionForm.hasError('atLeastOneCorrectAnswerError') &&\n                      onlineExamQuestionForm.touched\n                    \"\n                  >\n                    *Please Select at least One Correct Answer\n                  </p>\n                </ng-container>\n                <p><strong>*For correct answers, Tick the checkbox</strong></p>\n              </div>\n\n              <hr />\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"basic\">\n                    Next\n                  </button>\n                </div>\n              </div>\n            </form>\n          </nb-step>\n\n          <nb-step label=\"Submit\">\n            <div class=\"step-container\">\n              <div class=\"table-responsive\">\n                <table class=\"table table-bordered\">\n                  <tbody>\n                    <tr>\n                      <th>Online Exam Question</th>\n                      <td>{{ onlineExamQuestionForm.value.question }}</td>\n                    </tr>\n                    <tr\n                      *ngFor=\"\n                        let answer of onlineExamQuestionForm.get('answers')['controls'];\n                        let i = index\n                      \"\n                    >\n                      <th>Answer {{ i + 1 }}</th>\n                      <td>\n                        <nb-icon\n                          [status]=\"answer.value.isCorrect ? 'success' : 'danger'\"\n                          [icon]=\"answer.value.isCorrect ? 'checkmark-outline' : 'close-outline'\"\n                        ></nb-icon>\n                        &nbsp;&nbsp;\n                        <span>{{ answer.value.answer }}</span>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n\n              <hr />\n\n              <div class=\"row\">\n                <div class=\"col-md-6 text-left\">\n                  <button\n                    type=\"button\"\n                    class=\"\"\n                    nbButton\n                    size=\"small\"\n                    (click)=\"previousStep()\"\n                    [disabled]=\"submit\"\n                  >\n                    <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                    <span>prev</span>\n                  </button>\n                </div>\n                <div class=\"col-md-6 text-right\">\n                  <button\n                    nbButton\n                    size=\"small\"\n                    (click)=\"saveOnlineExamQuestion()\"\n                    [disabled]=\"submit\"\n                    [nbSpinner]=\"submit\"\n                    nbSpinnerStatus=\"primary\"\n                    nbSpinnerSize=\"small\"\n                  >\n                    <span>Submit</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </nb-step>\n        </nb-stepper>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { AddOnlineTestQuestionsComponent } from './add-online-test-questions.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddOnlineTestQuestionsComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddOnlineTestQuestionsRoutingModule {}\n","import { NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { DateService } from './../../../../../../services/shared-services/date.service';\nimport { OnlineExamQuestionService } from './../../../../../../services/online-exam-question.service';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { OnlineExamService } from './../../../../../../services/online-exam.service';\nimport { OnlineExamModel } from './../../../../../../models/online-exam.model';\nimport { OnlineExamQuestionModel } from './../../../../../../models/online-exam-question.model';\nimport { BranchService } from './../../../../../../services/branch.service';\n\n@Component({\n  selector: 'ngx-add-online-test-questions',\n  templateUrl: './add-online-test-questions.component.html',\n  styleUrls: ['./add-online-test-questions.component.scss'],\n})\nexport class AddOnlineTestQuestionsComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  branchId: string;\n  onlineExam: OnlineExamModel;\n  onlineExamQuestion: OnlineExamQuestionModel;\n  onlineExamQuestionId: string;\n  onlineExamQuestionForm: FormGroup;\n\n  constructor(\n    private branchService: BranchService,\n    private onlineExamQuestionService: OnlineExamQuestionService,\n    private onlineExamService: OnlineExamService,\n    public dateService: DateService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.onlineExamService.getOnlineExamData().subscribe((onlineExam: OnlineExamModel) => {\n      if (!onlineExam) {\n        this.back();\n        return;\n      }\n\n      this.onlineExam = onlineExam;\n\n      let mode: string;\n\n      this.route.queryParams.subscribe((param: Params) => {\n        mode = param.mode;\n      });\n\n      this.onlineExamQuestionId = this.onlineExamQuestionService.getOnlineExamQuestionId();\n\n      if (mode && mode !== 'edit') {\n        this.showToastr('top-right', 'danger', 'Invalid Route');\n        return;\n      } else if (mode && !this.onlineExamQuestionId) {\n        this.showToastr('top-right', 'danger', 'Online Exam Question Not Found');\n        return;\n      }\n\n      this.onlineExamQuestionForm = new FormGroup(\n        {\n          question: new FormControl(null, { validators: [Validators.required] }),\n          answers: new FormArray([]),\n          marks: new FormControl(this.onlineExam.eachQuestionMarks, {\n            validators: [Validators.required],\n          }),\n        },\n        { validators: this.atLeastOneCorrectAnswerValidator.bind(this) },\n      );\n\n      if (mode && this.onlineExamQuestionId) {\n        this.onlineExamQuestionService.getOnlineExamQuestion(this.onlineExamQuestionId).subscribe(\n          (question: OnlineExamQuestionModel) => {\n            this.onlineExamQuestion = question;\n\n            this.onlineExamQuestionForm.patchValue({\n              question: this.onlineExamQuestion.question,\n              marks: this.onlineExamQuestion.marks,\n            });\n\n            const answers = this.onlineExamQuestionForm.get('answers') as FormArray;\n            answers.controls = [];\n            this.onlineExamQuestion.answers.forEach((answer) => {\n              this.addOption(answer);\n            });\n            this.loading = false;\n          },\n          (err: any) => {\n            this.showToastr('top-right', 'danger', err);\n            this.back();\n            this.loading = false;\n          },\n        );\n      } else {\n        this.generateOption();\n        this.generateOption();\n        this.loading = false;\n      }\n    });\n  }\n\n  atLeastOneCorrectAnswerValidator(group: FormGroup): { [s: string]: boolean } {\n    const answers = group.value.answers;\n    let isCorrect = false;\n    answers.forEach((answer: any) => {\n      if (answer.isCorrect) {\n        isCorrect = true;\n      }\n    });\n\n    if (!isCorrect) {\n      return { atLeastOneCorrectAnswerError: true };\n    }\n    return null;\n  }\n\n  newAnswer(answerData: any) {\n    return new FormGroup({\n      answer: new FormControl(answerData.answer ? answerData.answer : null, {\n        validators: [Validators.required],\n      }),\n      isCorrect: new FormControl(answerData.isCorrect, {\n        validators: [],\n      }),\n    });\n  }\n\n  addOption(answer: any) {\n    const answers = this.onlineExamQuestionForm.get('answers') as FormArray;\n    answers.push(this.newAnswer(answer));\n  }\n\n  generateOption() {\n    const answer = {\n      answer: '',\n      isCorrect: false,\n    };\n    this.addOption(answer);\n  }\n\n  deleteOption(i: number) {\n    if (i !== 0 && i !== 1) {\n      const answers = this.onlineExamQuestionForm.get('answers') as FormArray;\n      answers.removeAt(i);\n    }\n  }\n\n  previousStep() {\n    this.stepper.previous();\n  }\n\n  submitOnlineExamQuestionForm() {\n    this.onlineExamQuestionForm.markAllAsTouched();\n    if (this.onlineExamQuestionForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Online Exam Question are Required');\n      return;\n    }\n\n    this.stepper.next();\n  }\n\n  saveOnlineExamQuestion() {\n    this.onlineExamQuestionForm.markAllAsTouched();\n    if (this.onlineExamQuestionForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Online Exam Question Fields are Required');\n      return;\n    }\n\n    this.submit = true;\n\n    const onlineExamQuestion: any = this.onlineExamQuestionForm.value;\n    onlineExamQuestion.onlineExam = this.onlineExam._id;\n\n    if (!this.onlineExamQuestion) {\n      this.onlineExamQuestionService.newOnlineExamQuestion(onlineExamQuestion).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Question Added Successfully');\n          this.back();\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.submit = false;\n        },\n      );\n    } else {\n      onlineExamQuestion._id = this.onlineExamQuestion._id;\n      this.onlineExamQuestionService.editOnlineExamQuestion(onlineExamQuestion).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Question Added Successfully');\n          this.back();\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {\n    this.onlineExamQuestionService.deleteOnlineExamQuestionId();\n    this.onlineExamQuestionService.deleteOnlineExamQuestionData();\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport { AddOnlineTestQuestionsComponent } from './add-online-test-questions.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddOnlineTestQuestionsRoutingModule } from './add-online-test-questions-routing.module';\n\nimport {\n  NbInputModule,\n  NbButtonModule,\n  NbCardModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbSelectModule,\n  NbIconModule,\n  NbCheckboxModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [AddOnlineTestQuestionsComponent],\n  imports: [\n    CommonModule,\n    AddOnlineTestQuestionsRoutingModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCardModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbSelectModule,\n    NbIconModule,\n    NbCheckboxModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AddOnlineTestQuestionsModule {}\n"]}