{"version":3,"sources":["webpack:///src/app/institute/branch/exam/online-test/add-online-test/add-online-test.component.html","webpack:///src/app/institute/branch/exam/online-test/add-online-test/add-online-test-routing.module.ts","webpack:///src/app/institute/branch/exam/online-test/add-online-test/add-online-test.component.ts","webpack:///src/app/institute/branch/exam/online-test/add-online-test/add-online-test.module.ts"],"names":["routes","path","component","AddOnlineTestComponent","branchService","courseService","dateService","batchService","onlineExamService","toastrService","router","route","this","loading","submit","branchId","getBranchId","navigate","relativeTo","mode","queryParams","subscribe","param","onlineExamId","getOnlineExamId","showToastr","getCategoryData","category","getCourseData","course","getBatchData","batch","subjects","forEach","curSubject","mySubject","find","subject","_id","push","onlineExamForm","title","validators","required","date","getDateString","time","duration","description","eachQuestionMarks","min","totalQuestions","totalMarks","passingMarks","getOnlineExam","onlineExam","patchValue","branch","err","back","stepper","previous","markAllAsTouched","invalid","next","value","getRawValue","editOnlineExam","res","error","addOnlineExam","subjectId","position","status","message","show","replaceUrl","deleteOnlineExamId","deleteOnlineExamData","submitOnlineExamForm","calculateTotalMarks","previousStep","saveOnlineExam","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddOnlineTestRoutingModule","forChild","AddOnlineTestModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-9\">\n        <h3>{{ onlineExam ? 'Edit' : 'Add' }} Online Test</h3>\n      </div>\n      <div class=\"col-3\">\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n          Back\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\n          <nb-step [stepControl]=\"onlineExamForm\" label=\"Online Exam Details\">\n            <form [formGroup]=\"onlineExamForm\" (submit)=\"submitOnlineExamForm()\">\n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-online-exam-title\">Online Exam Title:</label>\n                    <input\n                      type=\"text\"\n                      nbInput\n                      id=\"input-online-exam-title\"\n                      name=\"title\"\n                      formControlName=\"title\"\n                      placeholder=\"Online Exam Title\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('title').touched\n                          ? onlineExamForm.get('title').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('title').invalid && onlineExamForm.get('title').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('title').errors?.required\"\n                      >\n                        Online Exam Title is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-subject\">Subject:</label>\n                    <nb-select\n                      id=\"input-subject\"\n                      name=\"subject\"\n                      formControlName=\"subject\"\n                      placeholder=\"Subject\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('subject').touched\n                          ? onlineExamForm.get('subject').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    >\n                      <nb-option value=\"\">Select Subject</nb-option>\n                      <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n                        subject.subject\n                      }}</nb-option>\n                    </nb-select>\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('subject').invalid &&\n                        onlineExamForm.get('subject').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('subject').errors?.required\"\n                      >\n                        Subject is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-date\">Date:</label>\n                    <input\n                      type=\"date\"\n                      nbInput\n                      id=\"input-date\"\n                      name=\"date\"\n                      [min]=\"onlineExam ? onlineExam.date : dateService.getDateString()\"\n                      formControlName=\"date\"\n                      placeholder=\"Date\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('date').touched\n                          ? onlineExamForm.get('date').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('date').invalid && onlineExamForm.get('date').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('date').errors?.required\"\n                      >\n                        Date is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-time\">Time:</label>\n                    <input\n                      type=\"time\"\n                      step=\"300\"\n                      nbInput\n                      id=\"input-time\"\n                      name=\"time\"\n                      formControlName=\"time\"\n                      placeholder=\"Time\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('time').touched\n                          ? onlineExamForm.get('time').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('time').invalid && onlineExamForm.get('time').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('time').errors?.required\"\n                      >\n                        Time is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-duration\">Duration (in Min):</label>\n                    <input\n                      type=\"number\"\n                      nbInput\n                      id=\"input-duration\"\n                      name=\"duration\"\n                      min=\"0\"\n                      formControlName=\"duration\"\n                      placeholder=\"Duration (in Min)\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('duration').touched\n                          ? onlineExamForm.get('duration').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('duration').invalid &&\n                        onlineExamForm.get('duration').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('duration').errors?.required\"\n                      >\n                        Duration is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('duration').errors?.min\"\n                      >\n                        Duration should be greater than 0\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-12\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-description\">Description:</label>\n                    <textarea\n                      type=\"text\"\n                      nbInput\n                      rows=\"2\"\n                      id=\"input-description\"\n                      name=\"description\"\n                      min=\"0\"\n                      formControlName=\"description\"\n                      placeholder=\"Description\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('description').touched\n                          ? onlineExamForm.get('description').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    ></textarea>\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('description').invalid &&\n                        onlineExamForm.get('description').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('description').errors?.required\"\n                      >\n                        Description is required!\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-each-question-marks\"\n                      >Each Question Marks:</label\n                    >\n                    <input\n                      type=\"number\"\n                      nbInput\n                      id=\"input-each-question-marks\"\n                      name=\"eachQuestionMarks\"\n                      min=\"0\"\n                      formControlName=\"eachQuestionMarks\"\n                      placeholder=\"Each Question Marks\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('eachQuestionMarks').touched\n                          ? onlineExamForm.get('eachQuestionMarks').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                      (input)=\"calculateTotalMarks()\"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('eachQuestionMarks').invalid &&\n                        onlineExamForm.get('eachQuestionMarks').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('eachQuestionMarks').errors?.required\"\n                      >\n                        Each Question Marks is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('eachQuestionMarks').errors?.min\"\n                      >\n                        Each Question Marks should be greater than 0\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-total-question\">Total Question:</label>\n                    <input\n                      type=\"number\"\n                      nbInput\n                      id=\"input-total-question\"\n                      name=\"totalQuestions\"\n                      min=\"0\"\n                      formControlName=\"totalQuestions\"\n                      placeholder=\"Total Question\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('totalQuestions').touched\n                          ? onlineExamForm.get('totalQuestions').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                      (input)=\"calculateTotalMarks()\"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('totalQuestions').invalid &&\n                        onlineExamForm.get('totalQuestions').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('totalQuestions').errors?.required\"\n                      >\n                        Total Questions are required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('totalQuestions').errors?.min\"\n                      >\n                        Total Questions should be greater than 0\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-total-marks\">Total Marks:</label>\n                    <input\n                      type=\"number\"\n                      nbInput\n                      id=\"input-total-marks\"\n                      name=\"totalMarks\"\n                      min=\"0\"\n                      formControlName=\"totalMarks\"\n                      placeholder=\"Total Marks\"\n                      disabled=\"true\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('totalMarks').touched\n                          ? onlineExamForm.get('totalMarks').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('totalMarks').invalid &&\n                        onlineExamForm.get('totalMarks').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('totalMarks').errors?.required\"\n                      >\n                        Total Marks are required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('totalMarks').errors?.min\"\n                      >\n                        Total Marks should be greater than 0\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <div class=\"form-control-group\">\n                    <label class=\"label\" for=\"input-onlineExam-passing-marks\">Passing Marks:</label>\n                    <input\n                      type=\"number\"\n                      nbInput\n                      id=\"input-onlineExam-passing-marks\"\n                      name=\"passingMarks\"\n                      min=\"0\"\n                      formControlName=\"passingMarks\"\n                      placeholder=\"Passing Marks\"\n                      fullWidth\n                      [status]=\"\n                        onlineExamForm.get('passingMarks').touched\n                          ? onlineExamForm.get('passingMarks').invalid\n                            ? 'danger'\n                            : 'success'\n                          : 'basic'\n                      \"\n                    />\n                    <ng-container\n                      *ngIf=\"\n                        onlineExamForm.get('passingMarks').invalid &&\n                        onlineExamForm.get('passingMarks').touched\n                      \"\n                    >\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('passingMarks').errors?.required\"\n                      >\n                        Passing Marks is required!\n                      </p>\n                      <p\n                        class=\"caption status-danger\"\n                        *ngIf=\"onlineExamForm.get('passingMarks').errors?.min\"\n                      >\n                        Passing Marks should be greater than 0\n                      </p>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n\n              <hr />\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"basic\">\n                    Next\n                  </button>\n                </div>\n              </div>\n            </form>\n          </nb-step>\n\n          <nb-step label=\"Submit\">\n            <div class=\"step-container\">\n              <div class=\"table-responsive\">\n                <table class=\"table table-bordered\">\n                  <tbody>\n                    <tr>\n                      <th>Online Exam Title</th>\n                      <td>{{ onlineExamForm.value.title }}</td>\n                    </tr>\n                    <tr>\n                      <th>Subject</th>\n                      <td>{{ getSubject(onlineExamForm.value.subject) }}</td>\n                    </tr>\n                    <tr>\n                      <th>Date</th>\n                      <td>{{ dateService.formatDate(onlineExamForm.value.date) }}</td>\n                    </tr>\n                    <tr>\n                      <th>Time</th>\n                      <td>{{ dateService.formatTime(onlineExamForm.value.time) }}</td>\n                    </tr>\n                    <tr>\n                      <th>Duration (in Min)</th>\n                      <td>{{ onlineExamForm.value.duration }} Min</td>\n                    </tr>\n                    <tr>\n                      <th>Description</th>\n                      <td>{{ onlineExamForm.value.description }}</td>\n                    </tr>\n                    <tr>\n                      <th>Each Question Marks</th>\n                      <td>{{ onlineExamForm.value.eachQuestionMarks }}</td>\n                    </tr>\n                    <tr>\n                      <th>Total Questions</th>\n                      <td>{{ onlineExamForm.value.totalQuestions }}</td>\n                    </tr>\n                    <tr>\n                      <th>Total Marks</th>\n                      <td>{{ onlineExamForm.value.totalMarks }}</td>\n                    </tr>\n                    <tr>\n                      <th>Passing Marks</th>\n                      <td>{{ onlineExamForm.value.passingMarks }}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n\n              <hr />\n\n              <div class=\"row\">\n                <div class=\"col-md-6 text-left\">\n                  <button\n                    type=\"button\"\n                    class=\"\"\n                    nbButton\n                    size=\"small\"\n                    (click)=\"previousStep()\"\n                    [disabled]=\"submit\"\n                  >\n                    <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                    <span>prev</span>\n                  </button>\n                </div>\n                <div class=\"col-md-6 text-right\">\n                  <button\n                    nbButton\n                    size=\"small\"\n                    (click)=\"saveOnlineExam()\"\n                    [disabled]=\"submit\"\n                    [nbSpinner]=\"submit\"\n                    nbSpinnerStatus=\"primary\"\n                    nbSpinnerSize=\"small\"\n                  >\n                    <span>Submit</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </nb-step>\n        </nb-stepper>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { AddOnlineTestComponent } from './add-online-test.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddOnlineTestComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddOnlineTestRoutingModule {}\n","import { Router, ActivatedRoute, Params } from '@angular/router';\nimport { DateService } from './../../../../../services/shared-services/date.service';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { OnlineExamService } from './../../../../../services/online-exam.service';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { BatchService } from './../../../../../services/batch.service';\nimport { CourseService } from './../../../../../services/course.service';\nimport { BatchModel } from './../../../../../models/batch.model';\nimport { CourseModel, SubjectModel } from './../../../../../models/course.model';\nimport { CategoryModel } from './../../../../../models/branch.model';\nimport { OnlineExamModel } from './../../../../../models/online-exam.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'ngx-add-online-test',\n  templateUrl: './add-online-test.component.html',\n  styleUrls: ['./add-online-test.component.scss'],\n})\nexport class AddOnlineTestComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n\n  submit: boolean;\n\n  branchId: string;\n  category: CategoryModel;\n  course: CourseModel;\n  batch: BatchModel;\n  onlineExamForm: FormGroup;\n  onlineExamId: string;\n  onlineExam: OnlineExamModel;\n  subjects: SubjectModel[];\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    public dateService: DateService,\n    private batchService: BatchService,\n    private onlineExamService: OnlineExamService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    this.onlineExamId = this.onlineExamService.getOnlineExamId();\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.onlineExamId) {\n      this.showToastr('top-right', 'danger', 'Online Exam Not Found');\n      // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\n      this.category = category;\n    });\n\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\n      this.course = course;\n    });\n\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\n      this.batch = batch;\n    });\n\n    this.subjects = [];\n    this.batch.subjects.forEach((curSubject: any) => {\n      const mySubject = this.course.subjects.find(\n        (subject: SubjectModel) => subject._id === curSubject.subject,\n      );\n      this.subjects.push(mySubject);\n    });\n\n    this.onlineExamForm = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      subject: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      date: new FormControl(this.dateService.getDateString(), {\n        validators: [Validators.required],\n      }),\n      time: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      duration: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      description: new FormControl(null, {\n        validators: [],\n      }),\n      eachQuestionMarks: new FormControl(null, {\n        validators: [Validators.required, Validators.min(1)],\n      }),\n      totalQuestions: new FormControl(null, {\n        validators: [Validators.required, Validators.min(1)],\n      }),\n      totalMarks: new FormControl(null, {\n        validators: [],\n      }),\n      passingMarks: new FormControl(null, {\n        validators: [Validators.required, Validators.min(1)],\n      }),\n    });\n\n    if (mode && this.onlineExamId) {\n      this.onlineExamService.getOnlineExam(this.onlineExamId).subscribe(\n        (onlineExam: OnlineExamModel) => {\n          this.onlineExam = onlineExam;\n\n          this.onlineExamForm.patchValue({\n            title: this.onlineExam.title,\n            subject: this.onlineExam.subject,\n            date: this.onlineExam.date,\n            time: this.onlineExam.time,\n            duration: this.onlineExam.duration,\n            branch: this.onlineExam.branch,\n            description: this.onlineExam.description,\n            eachQuestionMarks: this.onlineExam.eachQuestionMarks,\n            totalQuestions: this.onlineExam.totalQuestions,\n            totalMarks: this.onlineExam.totalMarks,\n            passingMarks: this.onlineExam.passingMarks,\n          });\n\n          this.loading = false;\n        },\n        (err: any) => {\n          this.showToastr('top-right', 'danger', err);\n          this.back();\n        },\n      );\n    } else {\n      this.loading = false;\n    }\n  }\n\n  previousStep() {\n    this.stepper.previous();\n  }\n\n  submitOnlineExamForm() {\n    this.onlineExamForm.markAllAsTouched();\n    if (this.onlineExamForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Online Exam Fields are Required');\n      return;\n    }\n\n    this.stepper.next();\n  }\n\n  calculateTotalMarks() {\n    const totalQuestions = this.onlineExamForm.value.totalQuestions;\n    const eachQuestionMarks = this.onlineExamForm.value.eachQuestionMarks;\n    const totalMarks =\n      (totalQuestions ? totalQuestions : 0) * (eachQuestionMarks ? eachQuestionMarks : 0);\n    this.onlineExamForm.patchValue({ totalMarks });\n  }\n\n  saveOnlineExam() {\n    this.onlineExamForm.markAllAsTouched();\n    if (this.onlineExamForm.invalid) {\n      this.showToastr('top-right', 'danger', 'All Online Exam Fields are Required');\n      return;\n    }\n    this.submit = true;\n\n    const onlineExam: any = { ...this.onlineExamForm.getRawValue() };\n    onlineExam.branch = this.branchId;\n    onlineExam.category = this.category._id;\n    onlineExam.course = this.course._id;\n    onlineExam.batch = this.batch._id;\n\n    if (!this.onlineExam) {\n      this.onlineExamService.addOnlineExam(onlineExam).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Online Exam Added Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      onlineExam._id = this.onlineExam._id;\n\n      this.onlineExamService.editOnlineExam(onlineExam).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Online Exam Updated Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  getSubject(subjectId: string) {\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === subjectId);\n    if (subject) {\n      return subject.subject;\n    }\n\n    return '--';\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    this.router.navigate(['../manage'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {\n    this.onlineExamService.deleteOnlineExamId();\n    this.onlineExamService.deleteOnlineExamData();\n  }\n}\n","import { ReactiveFormsModule } from '@angular/forms';\nimport { AddOnlineTestComponent } from './add-online-test.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  NbInputModule,\n  NbButtonModule,\n  NbSpinnerModule,\n  NbCardModule,\n  NbStepperModule,\n  NbSelectModule,\n  NbIconModule,\n} from '@nebular/theme';\nimport { AddOnlineTestRoutingModule } from './add-online-test-routing.module';\n\n@NgModule({\n  declarations: [AddOnlineTestComponent],\n  imports: [\n    CommonModule,\n    AddOnlineTestRoutingModule,\n    NbSpinnerModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCardModule,\n    NbStepperModule,\n    NbSelectModule,\n    NbIconModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AddOnlineTestModule {}\n"]}