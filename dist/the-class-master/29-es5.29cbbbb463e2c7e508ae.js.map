{"version":3,"sources":["webpack:///src/app/institute/branch/manage-branch/course/add-course/add-course.component.html","webpack:///src/app/institute/branch/manage-branch/course/add-course/add-course-routing.module.ts","webpack:///src/app/institute/branch/manage-branch/course/add-course/add-course.component.ts","webpack:///src/app/institute/branch/manage-branch/course/add-course/add-course.module.ts"],"names":["AddCourseComponent","AddCourseModule","AddCourseRoutingModule","routes","path","component","branchService","courseService","toastrService","router","route","this","queryParams","subscribe","param","mode","ngOnInit","loading","submit","branchId","getBranchId","courseId","getCourseId","showToastr","navigate","relativeTo","courseBasicDetailsForm","courseName","validators","required","duration","maxLength","min","max","category","description","courseSubjectForm","subjects","atLeastOneSubjectValidator","bind","courseFeeDetailsForm","fees","gst","totalFees","getCategories","inclusiveGST","getCourseForEditing","course","patchValue","basicDetails","feeDetails","calculateTotal","getSubjects","controls","forEach","subject","addSubject","err","generateSubject","back","getBranchData","branch","categories","getBranch","setBranchData","error","group","status","value","atLeastOneSubjectError","get","subjectData","_id","toString","push","newSubject","i","removeAt","fee","markAllAsTouched","invalid","stepper","next","editCourse","res","addCourse","position","message","show","getRawValue","Math","round","categoryId","find","curCategory","join","replaceUrl","deleteCourseId","submitBasicDetails","submitSubjects","submitFeeDetails","inclusiveGSTChanged","saveCourse","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n      Back\n    </button>\n    <h3 class=\"\">\n      {{\n        !course ? 'Add New Course' : 'Edit Course ' + (course.basicDetails.courseName | uppercase)\n      }}\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <nb-stepper #stepper [linear]=\"true\">\n      <nb-step [stepControl]=\"courseBasicDetailsForm\" label=\"Basic Details\">\n        <form class=\"\" (submit)=\"submitBasicDetails()\" [formGroup]=\"courseBasicDetailsForm\">\n          <h6>Course Details:</h6>\n          <div class=\"row\">\n            <div class=\"col-md-5\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input -course-name\">Course Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-course-name\"\n                  name=\"courseName\"\n                  formControlName=\"courseName\"\n                  placeholder=\"Course Name\"\n                  minlength=\"3\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    courseBasicDetailsForm.get('courseName').touched\n                      ? courseBasicDetailsForm.get('courseName').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n\n                <ng-container\n                  *ngIf=\"\n                    courseBasicDetailsForm.get('courseName').invalid &&\n                    courseBasicDetailsForm.get('courseName').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseBasicDetailsForm.get('courseName').errors?.required\"\n                  >\n                    Course Name is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseBasicDetailsForm.get('courseName').errors?.minlength\"\n                  >\n                    Course Name should contain minimum 3 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-3\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-duration\">Course Duration:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-duration\"\n                  name=\"duration\"\n                  min=\"1\"\n                  maxlength=\"2\"\n                  formControlName=\"duration\"\n                  placeholder=\"Duration (in Months)\"\n                  fullWidth\n                  [status]=\"\n                    courseBasicDetailsForm.get('duration').touched\n                      ? courseBasicDetailsForm.get('duration').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseBasicDetailsForm.get('duration').invalid &&\n                    courseBasicDetailsForm.get('duration').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseBasicDetailsForm.get('duration').errors?.required\"\n                  >\n                    Course Duration is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseBasicDetailsForm.get('duration').errors?.min\"\n                  >\n                    Course Duration should be greater than 1\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-billing-category\">Category:</label>\n                <nb-select\n                  id=\"input-category\"\n                  name=\"category\"\n                  formControlName=\"category\"\n                  placeholder=\"Select Category\"\n                  fullWidth\n                  [status]=\"\n                    courseBasicDetailsForm.get('category').touched\n                      ? courseBasicDetailsForm.get('category').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                >\n                  <nb-option value=\"\">Select Category</nb-option>\n                  <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n                    category.category\n                  }}</nb-option>\n                </nb-select>\n                <ng-container\n                  *ngIf=\"\n                    courseBasicDetailsForm.get('category').invalid &&\n                    courseBasicDetailsForm.get('category').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseBasicDetailsForm.get('category').errors?.required\"\n                  >\n                    Branch Category is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-billing-description\">Description:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-description\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  placeholder=\"Description (Optional)\"\n                  fullWidth\n                ></textarea>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"courseSubjectForm\" label=\"Subject Details\">\n        <form [formGroup]=\"courseSubjectForm\" (ngSubmit)=\"submitSubjects()\" class=\"step-container\">\n          <div class=\"row\">\n            <div class=\"col-md-9 col-sm-8\">\n              <p>Click on following button to add more Subjects</p>\n            </div>\n            <div class=\"col-md-3 col-sm-4 mb-3\">\n              <button type=\"button\" nbButton size=\"small\" fullWidth (click)=\"generateSubject()\">\n                Add Subject\n              </button>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div\n              class=\"col-md-6\"\n              *ngFor=\"let subject of courseSubjectForm.get('subjects')['controls']; let i = index\"\n            >\n              <div class=\"form-control-group\" [formGroup]=\"subject\">\n                <label class=\"label\" for=\"input-subject-{{ i }}\">Subject {{ i + 1 }}:</label>\n                <nb-form-field>\n                  <input\n                    type=\"text\"\n                    nbInput\n                    id=\"input-subject-{{ i }}\"\n                    name=\"subject-{{ i }}\"\n                    formControlName=\"subject\"\n                    placeholder=\"Subject {{ i + 1 }}\"\n                    fullWidth\n                    [status]=\"\n                      subject.get('subject').touched\n                        ? subject.get('subject').invalid\n                          ? 'danger'\n                          : 'success'\n                        : 'basic'\n                    \"\n                  />\n                  <button\n                    nbSuffix\n                    nbButton\n                    size=\"small\"\n                    ghost\n                    (click)=\"deleteSubject()\"\n                    *ngIf=\"i !== 0\"\n                  >\n                    <nb-icon icon=\"minus-outline\" status=\"danger\"> </nb-icon>\n                  </button>\n                </nb-form-field>\n                <ng-container\n                  *ngIf=\"subject.get('subject').invalid && subject.get('subject').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"subject.get('subject').errors?.required\">\n                    Subject {{ i + 1 }} is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step [stepControl]=\"courseFeeDetailsForm\" label=\"Fee Details\">\n        <form\n          [formGroup]=\"courseFeeDetailsForm\"\n          (ngSubmit)=\"submitFeeDetails()\"\n          class=\"step-container\"\n        >\n          <div class=\"row\">\n            <div class=\"col-md-3\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-fees\">Fees:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-fees\"\n                  name=\"fees\"\n                  min=\"0\"\n                  formControlName=\"fees\"\n                  placeholder=\"fees\"\n                  fullWidth\n                  [status]=\"\n                    courseFeeDetailsForm.get('fees').touched\n                      ? courseFeeDetailsForm.get('fees').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                  (input)=\"calculateTotal()\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseFeeDetailsForm.get('fees').invalid &&\n                    courseFeeDetailsForm.get('fees').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseFeeDetailsForm.get('fees').errors?.required\"\n                  >\n                    Fee is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseFeeDetailsForm.get('fees').errors?.min\"\n                  >\n                    Fee amount should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-3\">\n              <div class=\"form-control-group mt-4\">\n                <nb-checkbox\n                  id=\"input-inclusive-GST\"\n                  name=\"inclusiveGST\"\n                  [checked]=\"inclusiveGST\"\n                  (checkedChange)=\"inclusiveGSTChanged($event)\"\n                >\n                  Inclusive GST\n                </nb-checkbox>\n              </div>\n            </div>\n\n            <div class=\"col-md-3\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-gst\">GST (in %):</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-gst\"\n                  name=\"gst\"\n                  min=\"0\"\n                  max=\"100\"\n                  maxlength=\"3\"\n                  formControlName=\"gst\"\n                  placeholder=\"GST (in %)\"\n                  fullWidth\n                  [status]=\"\n                    courseFeeDetailsForm.get('gst').touched &&\n                    courseFeeDetailsForm.get('gst').invalid\n                      ? 'danger'\n                      : 'basic'\n                  \"\n                  (input)=\"calculateTotal()\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseFeeDetailsForm.get('gst').invalid &&\n                    courseFeeDetailsForm.get('gst').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseFeeDetailsForm.get('gst').errors?.required\"\n                  >\n                    GST is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      courseFeeDetailsForm.get('gst').errors?.max ||\n                      courseFeeDetailsForm.get('gst').errors?.maxLength ||\n                      courseFeeDetailsForm.get('gst').errors?.min\n                    \"\n                  >\n                    GST percentage should be between 0% to 100%\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-3\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-total-fees\">Total Fees:</label>\n                <input\n                  type=\"number\"\n                  nbInput\n                  id=\"input-total-fees\"\n                  name=\"totalFees\"\n                  formControlName=\"totalFees\"\n                  placeholder=\"Total Fees\"\n                  fullWidth\n                  [status]=\"\n                    courseFeeDetailsForm.get('totalFees').touched &&\n                    courseFeeDetailsForm.get('totalFees').invalid\n                      ? 'danger'\n                      : 'basic'\n                  \"\n                  disabled=\"true\"\n                />\n                <ng-container\n                  *ngIf=\"\n                    courseFeeDetailsForm.get('totalFees').invalid &&\n                    courseFeeDetailsForm.get('totalFees').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"courseFeeDetailsForm.get('totalFees').errors?.required\"\n                  >\n                    Total Fee is required, Please enter Fee Amount\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      courseFeeDetailsForm.get('totalFees').errors?.min ||\n                      courseFeeDetailsForm.get('totalFees').errors?.minLength\n                    \"\n                  >\n                    Total Fee amount should be greater than 0\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious>\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button nbButton size=\"small\" type=\"submit\">\n                <span>Next</span>\n                <span>\n                  <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n                </span>\n              </button>\n            </div>\n          </div>\n        </form>\n      </nb-step>\n\n      <nb-step label=\"Submit\">\n        <div class=\"step-container\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <tbody>\n                <tr>\n                  <th>Course Name</th>\n                  <td>{{ courseBasicDetailsForm.value.courseName }}</td>\n                </tr>\n                <tr>\n                  <th>Course Duration</th>\n                  <td>{{ courseBasicDetailsForm.value.duration }} Month/s</td>\n                </tr>\n                <tr>\n                  <th>Category</th>\n                  <td>{{ getCategory(courseBasicDetailsForm.value.category) }}</td>\n                </tr>\n                <tr>\n                  <th>Description</th>\n                  <td>\n                    {{\n                      courseBasicDetailsForm.value.description\n                        ? courseBasicDetailsForm.value.description\n                        : '--'\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Subjects</th>\n                  <td>{{ getSubjectsData() }}</td>\n                </tr>\n                <tr>\n                  <th>Fees</th>\n                  <td>{{ courseFeeDetailsForm.value.fees }}</td>\n                </tr>\n                <tr>\n                  <th>GST (in %)</th>\n                  <td>{{ courseFeeDetailsForm.value.gst }} %</td>\n                </tr>\n                <tr>\n                  <th>GST Amount</th>\n                  <td>\n                    {{ inclusiveGST ? getGstAmount() + ' Included in Fee Amount' : getGstAmount() }}\n                  </td>\n                </tr>\n                <tr>\n                  <th>Total Fees</th>\n                  <td>{{ courseFeeDetailsForm.value.totalFees }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <hr />\n\n          <div class=\"row\">\n            <div class=\"col-6 text-left\">\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n                <span>prev</span>\n              </button>\n            </div>\n            <div class=\"col-6 text-right\">\n              <button\n                nbButton\n                size=\"small\"\n                (click)=\"saveCourse()\"\n                [disabled]=\"submit\"\n                [nbSpinner]=\"submit\"\n                nbSpinnerStatus=\"primary\"\n                nbSpinnerSize=\"small\"\n              >\n                <span>Submit</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </nb-step>\n    </nb-stepper>\n  </nb-card-body>\n</nb-card>\n","import { AddCourseComponent } from './add-course.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddCourseComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddCourseRoutingModule {}\n","import { CourseModel, SubjectModel } from './../../../../../models/course.model';\nimport { FormGroup, Validators, FormControl, FormArray } from '@angular/forms';\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\nimport { CourseService } from './../../../../../services/course.service';\nimport { CategoryModel, BranchModel } from './../../../../../models/branch.model';\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { BranchService } from './../../../../../services/branch.service';\n\nimport { ObjectId } from 'bson';\n\n@Component({\n  selector: 'ngx-add-course',\n  templateUrl: './add-course.component.html',\n  styleUrls: ['./add-course.component.scss'],\n})\nexport class AddCourseComponent implements OnInit, OnDestroy {\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\n\n  loading: boolean;\n  submit: boolean;\n\n  private branchId: string;\n  private courseId: string;\n  course: CourseModel;\n  categories: CategoryModel[];\n  courseBasicDetailsForm: FormGroup;\n  courseFeeDetailsForm: FormGroup;\n  courseSubjectForm: FormGroup;\n\n  inclusiveGST: boolean;\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private toastrService: NbToastrService,\n\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    this.route.queryParams.subscribe((param: Params) => {\n      if (param.mode) {\n        this.ngOnInit();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n\n      return;\n    }\n\n    this.courseId = this.courseService.getCourseId();\n\n    let mode: string;\n\n    this.route.queryParams.subscribe((param: Params) => {\n      mode = param.mode;\n    });\n\n    if (mode && mode !== 'edit') {\n      this.showToastr('top-right', 'danger', 'Invalid Route');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    } else if (mode && !this.courseId) {\n      this.showToastr('top-right', 'danger', 'Course Not Available');\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.courseBasicDetailsForm = new FormGroup({\n      courseName: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      duration: new FormControl(null, {\n        validators: [\n          Validators.required,\n          Validators.maxLength(2),\n          Validators.min(1),\n          Validators.max(99),\n        ],\n      }),\n      category: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      description: new FormControl(null, {\n        validators: [],\n      }),\n    });\n\n    this.courseSubjectForm = new FormGroup(\n      {\n        subjects: new FormArray([]),\n      },\n      { validators: this.atLeastOneSubjectValidator.bind(this) },\n    );\n\n    this.courseFeeDetailsForm = new FormGroup({\n      fees: new FormControl(null, {\n        validators: [Validators.required, Validators.min(0)],\n      }),\n      gst: new FormControl('0', {\n        validators: [\n          Validators.required,\n          Validators.maxLength(3),\n          Validators.min(0),\n          Validators.max(100),\n        ],\n      }),\n      totalFees: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n    });\n\n    this.getCategories();\n\n    this.inclusiveGST = false;\n\n    if (this.courseId) {\n      this.courseService.getCourseForEditing(this.courseId).subscribe(\n        (course: CourseModel) => {\n          if (!course) {\n            this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n            return;\n          }\n          this.course = course;\n          this.courseBasicDetailsForm.patchValue({\n            courseName: course.basicDetails.courseName,\n            duration: course.basicDetails.duration,\n            category: course.basicDetails.category,\n            description: course.basicDetails.description,\n          });\n\n          this.courseFeeDetailsForm.patchValue({\n            fees: course.feeDetails.fees,\n            gst: course.feeDetails.gst,\n          });\n\n          this.inclusiveGST = course.feeDetails.inclusiveGST;\n          this.calculateTotal();\n\n          const subjects = this.getSubjects();\n          subjects.controls = [];\n          this.course.subjects.forEach((subject) => {\n            this.addSubject(subject);\n          });\n          this.loading = false;\n        },\n        (err: any) => {\n          this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n          return;\n        },\n      );\n    } else {\n      this.generateSubject();\n      this.loading = false;\n    }\n  }\n\n  private getCategories() {\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\n      if (branch) {\n        this.categories = branch.categories;\n      }\n    });\n\n    if (!this.categories) {\n      this.branchService.getBranch(this.branchId).subscribe(\n        (branch: BranchModel) => {\n          this.branchService.setBranchData(branch);\n          this.categories = branch.categories;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n    }\n  }\n\n  private atLeastOneSubjectValidator(group: FormGroup): { [s: string]: boolean } {\n    const subjects = group.value.subjects;\n    let status = false;\n    subjects.forEach((subject: any) => {\n      if (subject.status) {\n        status = true;\n      }\n    });\n\n    if (!status) {\n      return { atLeastOneSubjectError: true };\n    }\n    return null;\n  }\n\n  private getSubjects() {\n    return this.courseSubjectForm.get('subjects') as FormArray;\n  }\n\n  private newSubject(subjectData: any) {\n    return new FormGroup({\n      _id: new FormControl(subjectData._id ? subjectData._id : new ObjectId().toString(), {\n        validators: [Validators.required],\n      }),\n      subject: new FormControl(subjectData.subject ? subjectData.subject : null, {\n        validators: [Validators.required],\n      }),\n      status: new FormControl(subjectData.status, {\n        validators: [],\n      }),\n    });\n  }\n\n  private addSubject(subject: any) {\n    const subjects = this.getSubjects();\n    subjects.push(this.newSubject(subject));\n  }\n\n  generateSubject() {\n    const subject = {\n      _id: new ObjectId().toString(),\n      subject: '',\n      status: true,\n    };\n    this.addSubject(subject);\n  }\n\n  deleteSubject(i: number) {\n    if (i !== 0 && i !== 1) {\n      const subjects = this.getSubjects();\n      subjects.removeAt(i);\n    }\n  }\n\n  inclusiveGSTChanged(inclusiveGST: boolean) {\n    this.inclusiveGST = inclusiveGST;\n    this.calculateTotal();\n  }\n\n  calculateTotal() {\n    const inclusiveGST = this.inclusiveGST;\n    const fee = this.courseFeeDetailsForm.value.fees;\n    const gst = this.courseFeeDetailsForm.value.gst;\n\n    if (inclusiveGST) {\n      this.courseFeeDetailsForm.patchValue({ totalFees: fee });\n      return;\n    }\n    const gstValue = (+fee / 100) * +gst;\n    const totalFees = (+fee + gstValue).toString();\n    this.courseFeeDetailsForm.patchValue({ totalFees });\n  }\n\n  submitBasicDetails() {\n    this.courseBasicDetailsForm.markAllAsTouched();\n    if (this.courseBasicDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Basic details are required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  submitSubjects() {\n    this.courseSubjectForm.markAllAsTouched();\n    if (this.courseSubjectForm.invalid) {\n      this.showToastr('top-right', 'danger', 'At least 1 Subject is required');\n      return;\n    }\n    this.stepper.next();\n  }\n\n  submitFeeDetails() {\n    this.courseFeeDetailsForm.markAllAsTouched();\n    if (this.courseFeeDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fee details are required');\n\n      return;\n    }\n    this.stepper.next();\n  }\n\n  saveCourse() {\n    this.courseBasicDetailsForm.markAllAsTouched();\n    this.courseSubjectForm.markAllAsTouched();\n    this.courseFeeDetailsForm.markAllAsTouched();\n\n    if (this.courseBasicDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Basic details are required');\n      return;\n    } else if (this.courseSubjectForm.invalid) {\n      this.showToastr('top-right', 'danger', 'At least 1 Subject is required');\n\n      return;\n    } else if (this.courseFeeDetailsForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fee Details are required');\n      return;\n    }\n    this.submit = true;\n\n    const course: any = {\n      branch: this.branchId,\n      basicDetails: this.courseBasicDetailsForm.value,\n      subjects: this.courseSubjectForm.value.subjects,\n      feeDetails: this.courseFeeDetailsForm.value,\n    };\n    course.feeDetails.inclusiveGST = this.inclusiveGST;\n    if (!this.course) {\n      this.courseService.addCourse(course).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'New Course Added Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      course._id = this.course._id;\n\n      this.courseService.editCourse(course).subscribe(\n        (res: any) => {\n          this.showToastr('top-right', 'success', 'Course Updated Successfully!');\n          this.back();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  getGstAmount() {\n    const totalFees = this.courseFeeDetailsForm.getRawValue().totalFees;\n    const gstPercentage = this.courseFeeDetailsForm.value.gst;\n    const amount = totalFees / (1 + gstPercentage / 100);\n    const gstAmount = totalFees - amount;\n    return Math.round(gstAmount).toString();\n  }\n\n  getCategory(categoryId: string) {\n    const category = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\n    );\n\n    if (category) {\n      return category.category;\n    }\n\n    return '--';\n  }\n\n  getSubjectsData() {\n    const subjects: string[] = [];\n    this.courseSubjectForm.value.subjects.forEach((subject: SubjectModel) => {\n      subjects.push(subject.subject);\n    });\n\n    return subjects.join(', ');\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\n  }\n\n  ngOnDestroy() {\n    this.courseService.deleteCourseId();\n  }\n}\n","import { AddCourseComponent } from './add-course.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddCourseRoutingModule } from './add-course-routing.module';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbIconModule,\n  NbInputModule,\n  NbFormFieldModule,\n  NbCheckboxModule,\n  NbSpinnerModule,\n  NbStepperModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [AddCourseComponent],\n  imports: [\n    CommonModule,\n    AddCourseRoutingModule,\n\n    NbCardModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbIconModule,\n    NbInputModule,\n    NbFormFieldModule,\n    NbCheckboxModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbFormFieldModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddCourseModule {}\n"]}