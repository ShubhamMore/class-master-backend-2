{"version":3,"sources":["webpack:///src/app/institute/branch/manage-branch/course/manage-course/manage-course.component.html","webpack:///src/app/institute/branch/manage-branch/course/manage-course/manage-course-routing.module.ts","webpack:///src/app/institute/branch/manage-branch/course/manage-course/manage-course.component.ts","webpack:///src/app/institute/branch/manage-branch/course/manage-course/manage-course.module.ts"],"names":["routes","path","component","ManageCourseComponent","branchService","courseService","toastrService","router","route","this","loading","branchId","getBranchId","courses","categories","category","getBranch","subscribe","branch","setBranchData","getCourses","err","navigate","relativeTo","categoryId","find","curCategory","_id","course","setCourseId","setCourseData","id","queryParams","mode","status","i","changeCourseStatus","res","showToastr","position","message","show","addCourse","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageCourseRoutingModule","forChild","ManageCourseModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>Courses</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <button nbButton size=\"small\" status=\"primary\" fullWidth (click)=\"addCourse()\">\n          Add Course <nb-icon icon=\"plus-circle-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9\">\n        <h5>Select Category</h5>\n      </div>\n      <div class=\"col-md-3\">\n        <nb-select\n          id=\"select-category\"\n          name=\"category\"\n          [selected]=\"category\"\n          fullWidth\n          placeholder=\"Select Category\"\n          (selectedChange)=\"getCourses($event)\"\n        >\n          <nb-option value=\"\">All</nb-option>\n          <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\n            category.category\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"courses.length > 0; else noCourses\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Course</th>\n                  <th>Category</th>\n                  <th>Fees</th>\n                  <th colspan=\"4\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let course of courses; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ course.basicDetails.courseName }}</td>\n                  <td>{{ getCategory(course.basicDetails.category) }}</td>\n                  <td>{{ course.feeDetails.totalFees }}/-</td>\n                  <td>\n                    <button\n                      class=\"mr-3\"\n                      nbButton\n                      size=\"small\"\n                      status=\"info\"\n                      (click)=\"courseBatches(course)\"\n                    >\n                      Batches\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      class=\"mr-3\"\n                      nbButton\n                      size=\"small\"\n                      status=\"success\"\n                      (click)=\"courseMaterial(course)\"\n                    >\n                      Course Material\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      class=\"mr-3\"\n                      nbButton\n                      size=\"small\"\n                      status=\"basic\"\n                      (click)=\"editCourse(course._id)\"\n                    >\n                      Edit\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      class=\"\"\n                      nbButton\n                      size=\"small\"\n                      [status]=\"!course.status ? 'warning' : 'danger'\"\n                      (click)=\"changeCourseStatus(course._id, !course.status, i)\"\n                    >\n                      {{ !course.status ? 'Activate' : 'Deactivate' }}\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noCourses>\n            <p class=\"text-center pt-5 pb-5\">No Courses Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageCourseComponent } from './manage-course.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: ManageCourseComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageCourseRoutingModule {}\n","import { CourseService } from './../../../../../services/course.service';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { CourseModel } from './../../../../../models/course.model';\nimport { CategoryModel, BranchModel } from './../../../../../models/branch.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'ngx-manage-course',\n  templateUrl: './manage-course.component.html',\n  styleUrls: ['./manage-course.component.scss'],\n})\nexport class ManageCourseComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n  category: string;\n  categories: CategoryModel[];\n  courses: CourseModel[];\n\n  constructor(\n    private branchService: BranchService,\n    private courseService: CourseService,\n    private toastrService: NbToastrService,\n\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n\n      return;\n    }\n\n    this.courses = [];\n    this.categories = [];\n    this.category = '';\n\n    this.branchService.getBranch(this.branchId).subscribe(\n      (branch: BranchModel) => {\n        this.branchService.setBranchData(branch);\n        this.categories = branch.categories;\n        this.getCourses('');\n      },\n      (err: any) => {\n        // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      },\n    );\n  }\n\n  getCourses(category: any) {\n    this.loading = true;\n    this.category = category;\n    this.courseService.getCourses(this.branchId, category).subscribe(\n      (courses: CourseModel[]) => {\n        this.courses = courses;\n        this.loading = false;\n      },\n      (err: any) => {\n        this.loading = false;\n      },\n    );\n  }\n\n  getCategory(categoryId: string) {\n    const category = this.categories.find(\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\n    );\n\n    if (category) {\n      return category.category;\n    }\n\n    return '--';\n  }\n\n  addCourse() {\n    this.router.navigate(['../add'], { relativeTo: this.route });\n  }\n\n  courseBatches(course: CourseModel) {\n    this.courseService.setCourseId(course._id);\n    this.courseService.setCourseData(course);\n    this.router.navigate(['../batch'], { relativeTo: this.route });\n  }\n\n  courseMaterial(course: CourseModel) {\n    this.courseService.setCourseId(course._id);\n    this.courseService.setCourseData(course);\n    this.router.navigate(['../course-material'], { relativeTo: this.route });\n  }\n\n  editCourse(id: string) {\n    this.courseService.setCourseId(id);\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\n  }\n\n  changeCourseStatus(id: string, status: boolean, i: number) {\n    this.loading = true;\n    this.courseService.changeCourseStatus(id, status).subscribe(\n      (res: any) => {\n        this.courses[i].status = status;\n        this.showToastr(\n          'top-right',\n          'success',\n          `Course ${status ? 'Activated' : 'Deactivated'} Successfully!`,\n        );\n        this.loading = false;\n      },\n      (err: any) => {\n        this.showToastr('top-right', 'danger', err);\n        this.loading = false;\n      },\n    );\n  }\n\n  showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ManageCourseComponent } from './manage-course.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageCourseRoutingModule } from './manage-course-routing.module';\n\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbIconModule,\n  NbInputModule,\n} from '@nebular/theme';\n\n@NgModule({\n  declarations: [ManageCourseComponent],\n  imports: [\n    CommonModule,\n    ManageCourseRoutingModule,\n\n    NbCardModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbIconModule,\n    NbInputModule,\n  ],\n})\nexport class ManageCourseModule {}\n"]}