{"version":3,"sources":["webpack:///src/app/student/branch/dashboard/dashboard.component.html","webpack:///src/app/student/branch/dashboard/dashboard-routing.module.ts","webpack:///src/app/student/branch/dashboard/dashboard.component.ts","webpack:///src/app/student/branch/dashboard/dashboard.module.ts"],"names":["routes","path","component","DashboardComponent","branchService","dateService","toastrService","dashboardService","menuService","router","route","this","loading","branchId","getBranchId","showMenu","upcomingLectures","pendingInstallments","getStudentBranchDashboard","subscribe","res","upComingLectures","error","showToastr","navigate","relativeTo","startTime","endTime","formatTime","position","status","message","show","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","DashboardRoutingModule","forChild","DashboardModule"],"mappings":"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","file":"x","sourcesContent":["<div class=\"row\">\n  <div class=\"col-12\">\n    <nb-card>\n      <nb-card-header>\n        <h3>Upcoming Lectures</h3>\n      </nb-card-header>\n      <nb-card-body>\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"upcomingLectures.length > 0; else noUpcomingLectures\"\n          >\n            <table class=\"table table-sm\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Date</th>\n                  <th>Time</th>\n                  <th>Category</th>\n                  <th>Course/Batch</th>\n                  <th>Subject</th>\n                  <th>Teacher</th>\n                  <th>Topic</th>\n                  <th>Session Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let lecture of upcomingLectures; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ dateService.formatDate(lecture.date) }}</td>\n                  <td>{{ getTime(lecture.startTime, lecture.endTime) }}</td>\n                  <td>{{ lecture.categoryName }}</td>\n                  <td>{{ lecture.courseName }}/{{ lecture.batchName }}</td>\n                  <td>{{ lecture.subjectName }}</td>\n                  <td>{{ lecture.teacherName }}</td>\n                  <td>{{ lecture.topic }}</td>\n                  <td>{{ lecture.sessionType | uppercase }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </nb-card-body>\n    </nb-card>\n  </div>\n  <div class=\"col-12\">\n    <nb-card>\n      <nb-card-header>\n        <h3>Pending Installments</h3>\n      </nb-card-header>\n      <nb-card-body>\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"pendingInstallments.length > 0; else noPendingInstallments\"\n          >\n            <table class=\"table table-sm\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Category</th>\n                  <th>Course</th>\n                  <th>Installment No</th>\n                  <th>Installment Date</th>\n                  <th>Installment Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let installment of pendingInstallments; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ installment.categoryName }}</td>\n                  <td>{{ installment.courseName }}</td>\n                  <td>Installment {{ installment.installmentNo }}</td>\n                  <td>{{ dateService.formatDate(installment.installmentDate) }}</td>\n                  <td>{{ installment.installmentAmount }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">\n    Loading...\n  </p>\n</ng-template>\n\n<ng-template #noPendingInstallments>\n  <p class=\"pt-5 pb-5 text-center\">\n    No Pending Installments\n  </p>\n</ng-template>\n\n<ng-template #noUpcomingLectures>\n  <p class=\"pt-5 pb-5 text-center\">\n    No Upcoming Lectures\n  </p>\n</ng-template>\n","import { DashboardComponent } from './dashboard.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n","import { DateService } from './../../../services/shared-services/date.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { DashboardService } from './../../../services/dashboard.service';\nimport { MenuService } from './../../menu.service';\nimport { BranchService } from './../../../services/branch.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'ngx-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  pendingInstallments: any[];\n  upcomingLectures: any[];\n\n  constructor(\n    private branchService: BranchService,\n    public dateService: DateService,\n    private toastrService: NbToastrService,\n    private dashboardService: DashboardService,\n    private menuService: MenuService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n\n      return;\n    }\n\n    this.menuService.showMenu();\n\n    this.upcomingLectures = [];\n    this.pendingInstallments = [];\n\n    this.dashboardService.getStudentBranchDashboard(this.branchId).subscribe(\n      (res: any) => {\n        this.upcomingLectures = res.upComingLectures;\n        this.pendingInstallments = res.pendingInstallments;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  getTime(startTime: string, endTime: string) {\n    return this.dateService.formatTime(startTime) + ' - ' + this.dateService.formatTime(endTime);\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbInputModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { DashboardComponent } from './dashboard.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DashboardRoutingModule } from './dashboard-routing.module';\n\n@NgModule({\n  declarations: [DashboardComponent],\n  imports: [CommonModule, DashboardRoutingModule, NbCardModule, NbButtonModule, NbIconModule],\n})\nexport class DashboardModule {}\n"]}