{"version":3,"sources":["webpack:///src/app/student/branch/course/course-performance/course-performance.component.html","webpack:///src/app/student/branch/course/course-performance/course-performance-routing.module.ts","webpack:///src/app/student/branch/course/course-performance/course-performance.component.ts","webpack:///src/app/student/branch/course/course-performance/course-performance.module.ts"],"names":["routes","path","component","CoursePerformanceComponent","dateService","studentBranchService","branchService","batchService","toastrService","studentCourseService","examService","router","route","this","loading","branchId","getBranchId","setType","getStudentCourseData","subscribe","studentCourse","showToastr","back","scores","subjects","subject","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getBatchSubjects","course","batch","getStudentCourseScore","error","student","_id","type","getType","navigate","relativeTo","queryParams","position","status","message","show","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","CoursePerformanceRoutingModule","forChild","CoursePerformanceModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n          Back\r\n        </button>\r\n        <h3>Exam Score</h3>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n</nb-card>\r\n\r\n<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3 col-sm-4\"></div>\r\n\r\n      <div class=\"col-md-3 col-sm-4\">\r\n        <nb-select\r\n          id=\"select-subject\"\r\n          name=\"subject\"\r\n          [selected]=\"subject\"\r\n          fullWidth\r\n          placeholder=\"All Subjects\"\r\n          (selectedChange)=\"onSelectSubject($event)\"\r\n        >\r\n          <nb-option value=\"\">All Subjects</nb-option>\r\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\r\n            subject.subject\r\n          }}</nb-option>\r\n        </nb-select>\r\n      </div>\r\n\r\n      <div class=\"col-md-3 col-sm-4\">\r\n        <nb-select\r\n          id=\"select-year\"\r\n          name=\"year\"\r\n          [selected]=\"year\"\r\n          fullWidth\r\n          placeholder=\"All Years\"\r\n          (selectedChange)=\"onSelectYear($event)\"\r\n        >\r\n          <nb-option value=\"\">All Years</nb-option>\r\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\r\n        </nb-select>\r\n      </div>\r\n\r\n      <div class=\"col-md-3 col-sm-4\">\r\n        <nb-select\r\n          id=\"select-month\"\r\n          name=\"month\"\r\n          [selected]=\"month\"\r\n          fullWidth\r\n          placeholder=\"All Months\"\r\n          (selectedChange)=\"onSelectMonth($event)\"\r\n        >\r\n          <nb-option value=\"\">All Months</nb-option>\r\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\r\n            month.month\r\n          }}</nb-option>\r\n        </nb-select>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n  <nb-card-body class=\"body-container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <ng-container *ngIf=\"!loading; else loadingData\">\r\n          <div class=\"table-responsive\" *ngIf=\"scores.length > 0; else noScores\">\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Date</th>\r\n                  <th>Subject</th>\r\n                  <th>Title</th>\r\n                  <th>Score</th>\r\n                  <th>Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let score of scores; let i = index\">\r\n                  <td>{{ i + 1 }}</td>\r\n                  <td>{{ dateService.formatDate(score.date) }}</td>\r\n                  <td>{{ score.subject }}</td>\r\n                  <td>{{ score.examTitle }}</td>\r\n                  <td>{{ score.marks }}/{{ score.outOfMarks }}</td>\r\n                  <td>\r\n                    <span [ngClass]=\"score.marks >= score.passingMarks ? 'pass' : 'fail'\">{{\r\n                      score.marks >= score.passingMarks ? 'Pass' : 'Fail'\r\n                    }}</span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <ng-template #noScores>\r\n            <p class=\"text-center pt-5 pb-5\">No Score Available</p>\r\n          </ng-template>\r\n        </ng-container>\r\n        <ng-template #loadingData>\r\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { CoursePerformanceComponent } from './course-performance.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CoursePerformanceComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CoursePerformanceRoutingModule {}\n","import { StudentBranchService } from './../../student-branch.service';\nimport { ExamService } from './../../../../services/exam.service';\nimport { BatchService } from './../../../../services/batch.service';\nimport { StudentCourseModel } from './../../../../models/student-course.model';\nimport { SubjectModel } from './../../../../models/course.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { StudentCourseService } from './../../../../services/student-course.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { BranchService } from './../../../../services/branch.service';\nimport { DateService, Month } from './../../../../services/shared-services/date.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-course-performance',\n  templateUrl: './course-performance.component.html',\n  styleUrls: ['./course-performance.component.scss'],\n})\nexport class CoursePerformanceComponent implements OnInit {\n  private branchId: string;\n\n  private studentCourse: StudentCourseModel;\n\n  loading: boolean;\n\n  scores: any[];\n\n  subjects: SubjectModel[];\n  subject: string;\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  constructor(\n    public dateService: DateService,\n    private studentBranchService: StudentBranchService,\n    private branchService: BranchService,\n    private batchService: BatchService,\n    private toastrService: NbToastrService,\n    private studentCourseService: StudentCourseService,\n    private examService: ExamService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.studentBranchService.setType('report');\n\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    if (!this.studentCourse) {\n      this.showToastr('top-right', 'danger', 'Student Course Not Found');\n      this.back();\n      return;\n    }\n\n    this.scores = [];\n\n    this.subjects = [];\n    this.subject = '';\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.batchService\n      .getBatchSubjects(this.studentCourse.course, this.studentCourse.batch)\n      .subscribe(\n        (subjects: SubjectModel[]) => {\n          this.subjects = subjects;\n          this.getStudentCourseScore();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.back();\n        },\n      );\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getStudentCourseScore();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n    this.getStudentCourseScore();\n  }\n\n  onSelectSubject(subject: string) {\n    this.subject = subject;\n    this.getStudentCourseScore();\n  }\n\n  getStudentCourseScore() {\n    this.loading = true;\n    this.examService\n      .getStudentCourseScore(\n        this.subject,\n        this.month,\n        this.year,\n        this.studentCourse.student,\n        this.studentCourse._id,\n      )\n      .subscribe(\n        (scores: any[]) => {\n          this.scores = scores;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.back();\n        },\n      );\n  }\n\n  back() {\n    const type = this.studentBranchService.getType();\n    this.router.navigate(['../'], { relativeTo: this.route, queryParams: { type } });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { NbCardModule, NbSelectModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CoursePerformanceRoutingModule } from './course-performance-routing.module';\nimport { CoursePerformanceComponent } from './course-performance.component';\n\n@NgModule({\n  declarations: [CoursePerformanceComponent],\n  imports: [\n    CommonModule,\n    CoursePerformanceRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class CoursePerformanceModule {}\n"]}