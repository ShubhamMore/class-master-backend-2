{"version":3,"sources":["webpack:///src/app/student/branch/course/lecture/question-answers/add-question-answers/add-answer/add-answer.component.html","webpack:///src/app/student/branch/course/lecture/question-answers/add-question-answers/add-answer/add-answer.component.ts","webpack:///src/app/student/branch/course/lecture/question-answers/view-question-answers/view-question-answers.component.html","webpack:///src/app/student/branch/course/lecture/question-answers/view-question-answers/view-question-answers-routing.module.ts","webpack:///src/app/student/branch/course/lecture/question-answers/view-question-answers/view-question-answers.component.ts","webpack:///src/app/student/branch/course/lecture/question-answers/view-question-answers/view-question-answers.module.ts"],"names":["AddAnswerComponent","toastrService","branchService","lectureService","questionAnswersService","ref","this","loading","submit","branchId","getBranchId","answerForm","answer","lectureQuestionAnswer","validators","required","getQuestion","subscribe","questionAnswers","lectureQuestion","getQuestionAnswer","questionAnswer","patchValue","getLectureData","lecture","onClose","close","markAllAsTouched","invalid","showToastr","value","branch","category","course","batch","_id","question","editLectureQuestionAnswer","res","error","newLectureQuestionAnswer","position","status","message","show","deleteQuestionAnswerId","deleteQuestionAnswer","ViewQuestionAnswersComponent","ViewQuestionAnswersModule","ViewQuestionAnswersRoutingModule","routes","path","component","authService","dateService","router","route","dialogService","user","getUserData","getQuestionAnswers","back","getLectureQuestionAnswers","id","getQuestionAnswersId","navigate","relativeTo","getLectureQuestionAnswer","openAnswerDialog","open","context","saveLectureQuestionAnswer","setQuestionId","setQuestion","questionDate","convertToDate","toString","substr","deleteLectureQuestion","err","i","deleteLectureQuestionAnswer","answers","splice","setQuestionAnswerId","setQuestionAnswer","index","findIndex","curAnswer","name","push","deleteQuestionAnswersId","deleteQuestionAnswers","loadChildren","then","m","PageNotFoundModule","redirectTo","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card class=\"answer-box\">\n  <nb-card-header>\n    <nb-icon class=\"float-right pointer\" icon=\"close-outline\" (click)=\"onClose()\"></nb-icon>\n    <h3>{{ lectureQuestionAnswer ? 'Edit' : 'New' }} Answer</h3>\n  </nb-card-header>\n\n  <nb-card-body>\n    <form [formGroup]=\"answerForm\" (submit)=\"saveLectureQuestionAnswer()\" *ngIf=\"!loading\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"form-control-group\">\n            <label class=\"label\" for=\"input-answer\">Answer:</label>\n            <textarea\n              type=\"text\"\n              nbInput\n              id=\"input-answer\"\n              name=\"answer\"\n              formControlName=\"answer\"\n              placeholder=\"Answer\"\n              fullWidth\n              [status]=\"\n                answerForm.get('answer').touched\n                  ? answerForm.get('answer').invalid\n                    ? 'danger'\n                    : 'success'\n                  : 'basic'\n              \"\n            ></textarea>\n            <ng-container\n              *ngIf=\"answerForm.get('answer').invalid && answerForm.get('answer').touched\"\n            >\n              <p class=\"caption status-danger\" *ngIf=\"answerForm.get('answer').errors?.required\">\n                Answer is required!\n              </p>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <button\n            type=\"button\"\n            nbButton\n            size=\"small\"\n            status=\"danger\"\n            (click)=\"onClose()\"\n            [disabled]=\"submit\"\n          >\n            Cancel\n          </button>\n        </div>\n        <div class=\"col-6 text-right\">\n          <button\n            type=\"submit\"\n            nbButton\n            size=\"small\"\n            status=\"success\"\n            [disabled]=\"submit\"\n            [nbSpinner]=\"submit\"\n            nbSpinnerStatus=\"primary\"\n            nbSpinnerSize=\"small\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </form>\n  </nb-card-body>\n</nb-card>\n","import { LectureService } from './../../../../../../../services/lecture.service';\nimport { BranchService } from './../../../../../../../services/branch.service';\nimport { QuestionAnswersService } from './../../../../../../../services/question-answers.service';\nimport { LectureQuestionModel } from './../../../../../../../models/lecture-question.model';\nimport { NbDialogRef, NbToastrService } from '@nebular/theme';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LectureQuestionAnswerModel } from './../../../../../../../models/lecture-question-answers.model';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ScheduleModel as LectureModel } from './../../../../../../../models/schedule.model';\n\n@Component({\n  selector: 'ngx-add-answer',\n  templateUrl: './add-answer.component.html',\n  styleUrls: ['./add-answer.component.scss'],\n})\nexport class AddAnswerComponent implements OnInit, OnDestroy {\n  loading: boolean;\n  submit: boolean;\n\n  answerForm: FormGroup;\n\n  branchId: string;\n  lecture: LectureModel;\n  lectureQuestionAnswer: LectureQuestionAnswerModel;\n  lectureQuestion: LectureQuestionModel;\n\n  constructor(\n    private toastrService: NbToastrService,\n    private branchService: BranchService,\n    private lectureService: LectureService,\n    private questionAnswersService: QuestionAnswersService,\n    protected ref: NbDialogRef<AddAnswerComponent>,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.submit = false;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.onClose();\n      return;\n    }\n\n    this.answerForm = new FormGroup({\n      answer: new FormControl(\n        this.lectureQuestionAnswer ? this.lectureQuestionAnswer.answer : null,\n        {\n          validators: [Validators.required],\n        },\n      ),\n    });\n\n    this.questionAnswersService.getQuestion().subscribe((questionAnswers: LectureQuestionModel) => {\n      this.lectureQuestion = questionAnswers;\n    });\n\n    this.questionAnswersService\n      .getQuestionAnswer()\n      .subscribe((questionAnswer: LectureQuestionAnswerModel) => {\n        this.lectureQuestionAnswer = questionAnswer;\n        if (questionAnswer) {\n          this.answerForm.patchValue({ answer: this.lectureQuestionAnswer.answer });\n        }\n      });\n\n    this.lectureService.getLectureData().subscribe((lecture: LectureModel) => {\n      this.lecture = lecture;\n      if (!this.lecture) {\n        this.onClose();\n        return;\n      }\n      this.loading = false;\n    });\n  }\n\n  onClose() {\n    this.ref.close();\n  }\n\n  saveLectureQuestionAnswer() {\n    this.answerForm.markAllAsTouched();\n    if (this.answerForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Answer is Required');\n      return;\n    }\n\n    this.submit = true;\n\n    const answer: string = this.answerForm.value.answer;\n\n    const lectureQuestionAnswer: any = {\n      branch: this.branchId,\n      category: this.lecture.category,\n      course: this.lecture.course,\n      batch: this.lecture.batch,\n      lecture: this.lecture._id,\n      question: this.lectureQuestion._id,\n      answer: answer,\n    };\n\n    if (!this.lectureQuestionAnswer) {\n      this.questionAnswersService.newLectureQuestionAnswer(lectureQuestionAnswer).subscribe(\n        (newLectureQuestionAnswer: LectureQuestionAnswerModel) => {\n          this.showToastr('top-right', 'success', 'New Answer Added Successfully!');\n          this.ref.close(newLectureQuestionAnswer);\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    } else {\n      lectureQuestionAnswer._id = this.lectureQuestionAnswer._id;\n\n      this.questionAnswersService.editLectureQuestionAnswer(lectureQuestionAnswer).subscribe(\n        (res: any) => {\n          this.lectureQuestionAnswer.answer = answer;\n          this.showToastr('top-right', 'success', 'Answer Updated Successfully!');\n          this.ref.close(this.lectureQuestionAnswer);\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.submit = false;\n        },\n      );\n    }\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  ngOnDestroy() {\n    this.questionAnswersService.deleteQuestionAnswerId();\n    this.questionAnswersService.deleteQuestionAnswer();\n  }\n}\n","<!-- <ngx-add-answer\r\n  *ngIf=\"answerModel\"\r\n  [answer]=\"lectureQuestionAnswer\"\r\n  (close)=\"closeAnswerModel()\"\r\n  (submitAnswer)=\"saveLectureQuestionAnswer($event)\"\r\n></ngx-add-answer> -->\r\n\r\n<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n          Back\r\n        </button>\r\n        <h3>Question & Answers</h3>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n  <nb-card-body class=\"body-container\">\r\n    <ng-container *ngIf=\"!loading; else loadingData\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <nb-card>\r\n            <nb-card-header>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6 col-12\">\r\n                  <nb-user\r\n                    [name]=\"lectureQuestion.name ? lectureQuestion.name : 'Unknown'\"\r\n                    [title]=\"formatQuestionAnswerDate(lectureQuestion.createdAt)\"\r\n                  ></nb-user>\r\n                </div>\r\n                <div class=\"col-md-6 col-12 text-right\">\r\n                  <button\r\n                    class=\"mr-3\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    status=\"success\"\r\n                    (click)=\"addQuestionAnswer()\"\r\n                  >\r\n                    Answer\r\n                  </button>\r\n                  <button\r\n                    *ngIf=\"lectureQuestion.createdBy === user.imsMasterId\"\r\n                    class=\"mr-3\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    status=\"basic\"\r\n                    (click)=\"editQuestion(lectureQuestion)\"\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    *ngIf=\"lectureQuestion.createdBy === user.imsMasterId\"\r\n                    class=\"mr-3\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    status=\"danger\"\r\n                    (click)=\"deleteQuestion(lectureQuestion._id)\"\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </nb-card-header>\r\n            <nb-card-body>\r\n              <div [innerHTML]=\"lectureQuestion.question\"></div>\r\n            </nb-card-body>\r\n          </nb-card>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\" *ngIf=\"lectureQuestion.answers.length > 0; else noAnswers\">\r\n        <div class=\"col-1\"></div>\r\n\r\n        <div class=\"col-11\">\r\n          <nb-card *ngFor=\"let lectureQuestionAnswer of lectureQuestion.answers; let i = index\">\r\n            <nb-card-header>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6 col-12\">\r\n                  <nb-user\r\n                    [name]=\"lectureQuestionAnswer.name ? lectureQuestionAnswer.name : 'Unknown'\"\r\n                    [title]=\"formatQuestionAnswerDate(lectureQuestionAnswer.createdAt)\"\r\n                  ></nb-user>\r\n                </div>\r\n                <div class=\"col-md-6 col-12 text-right\">\r\n                  <button\r\n                    *ngIf=\"lectureQuestionAnswer.createdBy === user.imsMasterId\"\r\n                    class=\"mr-3\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    status=\"basic\"\r\n                    (click)=\"editQuestionAnswer(lectureQuestionAnswer)\"\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    *ngIf=\"lectureQuestionAnswer.createdBy === user.imsMasterId\"\r\n                    class=\"mr-3\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    status=\"danger\"\r\n                    (click)=\"deleteQuestionAnswer(lectureQuestionAnswer._id)\"\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </nb-card-header>\r\n            <nb-card-body>\r\n              <div [innerHTML]=\"lectureQuestionAnswer.answer\"></div>\r\n            </nb-card-body>\r\n          </nb-card>\r\n        </div>\r\n      </div>\r\n\r\n      <ng-template #noAnswers>\r\n        <p class=\"pt-5 pb-5 text-center\">You are first to Answer this Question..</p>\r\n      </ng-template>\r\n    </ng-container>\r\n    <ng-template #loadingData>\r\n      <p class=\"text-center pt-5 pb-5\">Loading...</p>\r\n    </ng-template>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { ViewQuestionAnswersComponent } from './view-question-answers.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ViewQuestionAnswersComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ViewQuestionAnswersRoutingModule {}\n","import { AddQuestionComponent } from './../add-question-answers/add-question/add-question.component';\r\nimport { AddAnswerComponent } from './../add-question-answers/add-answer/add-answer.component';\r\nimport { DateService } from './../../../../../../services/shared-services/date.service';\r\nimport { AuthService } from './../../../../../../authentication/auth/auth-service/auth.service';\r\nimport { QuestionAnswersService } from './../../../../../../services/question-answers.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { LectureService } from './../../../../../../services/lecture.service';\r\nimport { BranchService } from './../../../../../../services/branch.service';\r\nimport { LectureQuestionModel } from './../../../../../../models/lecture-question.model';\r\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\r\nimport { ScheduleModel as LectureModel } from './../../../../../../models/schedule.model';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { LectureQuestionAnswerModel } from './../../../../../../models/lecture-question-answers.model';\r\n\r\n@Component({\r\n  selector: 'ngx-view-question-answers',\r\n  templateUrl: './view-question-answers.component.html',\r\n  styleUrls: ['./view-question-answers.component.scss'],\r\n})\r\nexport class ViewQuestionAnswersComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n  lectureQuestion: LectureQuestionModel;\r\n  branchId: string;\r\n  lecture: LectureModel;\r\n  editLectureQuestionAnswer: boolean;\r\n  user: { name: string; imsMasterId: string };\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private toastrService: NbToastrService,\r\n    private branchService: BranchService,\r\n    private lectureService: LectureService,\r\n    private questionAnswersService: QuestionAnswersService,\r\n    private dateService: DateService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private dialogService: NbDialogService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['./../../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.editLectureQuestionAnswer = false;\r\n\r\n    this.user = this.authService.getUserData();\r\n\r\n    this.questionAnswersService\r\n      .getQuestionAnswers()\r\n      .subscribe((questionAnswers: LectureQuestionModel) => {\r\n        if (!questionAnswers) {\r\n        }\r\n        this.lectureQuestion = questionAnswers;\r\n      });\r\n\r\n    this.lectureService.getLectureData().subscribe((lecture: LectureModel) => {\r\n      this.lecture = lecture;\r\n      if (!this.lecture) {\r\n        this.back();\r\n        return;\r\n      }\r\n    });\r\n\r\n    this.getLectureQuestionAnswers(this.lectureQuestion._id);\r\n\r\n    if (!this.lectureQuestion) {\r\n    } else {\r\n      const id = this.questionAnswersService.getQuestionAnswersId();\r\n      if (id) {\r\n        this.getLectureQuestionAnswers(id);\r\n      } else {\r\n        this.showToastr('top-right', 'danger', 'Question Not Found');\r\n        this.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  getLectureQuestionAnswers(id: string) {\r\n    this.questionAnswersService.getLectureQuestionAnswer(id).subscribe(\r\n      (questionAnswer: LectureQuestionModel) => {\r\n        this.lectureQuestion = questionAnswer;\r\n        this.loading = false;\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.back();\r\n      },\r\n    );\r\n  }\r\n\r\n  addQuestionAnswer() {\r\n    this.openAnswerDialog();\r\n  }\r\n\r\n  private openAnswerDialog() {\r\n    this.dialogService\r\n      .open(AddAnswerComponent, {\r\n        context: {},\r\n      })\r\n      .onClose.subscribe(\r\n        (answer: LectureQuestionAnswerModel) => answer && this.saveLectureQuestionAnswer(answer),\r\n      );\r\n  }\r\n\r\n  editQuestion(lectureQuestion: LectureQuestionModel) {\r\n    this.questionAnswersService.setQuestionId(lectureQuestion._id);\r\n    this.questionAnswersService.setQuestion(lectureQuestion);\r\n    this.dialogService\r\n      .open(AddQuestionComponent, {\r\n        context: {},\r\n      })\r\n      .onClose.subscribe((question: LectureQuestionModel) => {\r\n        if (question) {\r\n          this.lectureQuestion = question;\r\n        }\r\n      });\r\n  }\r\n\r\n  formatQuestionAnswerDate(questionDate: any) {\r\n    const date: string = this.dateService.convertToDate(questionDate).toString();\r\n    return date.substr(0, 21);\r\n  }\r\n\r\n  deleteQuestion(id: string) {\r\n    this.loading = true;\r\n    this.questionAnswersService.deleteLectureQuestion(id).subscribe(\r\n      (res: any) => {\r\n        this.back();\r\n        this.showToastr('top-right', 'success', `Question Deleted Successfully!`);\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.loading = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  deleteQuestionAnswer(id: string, i: number) {\r\n    this.questionAnswersService.deleteLectureQuestionAnswer(id).subscribe(\r\n      (res: any) => {\r\n        this.lectureQuestion.answers.splice(i, 1);\r\n        this.showToastr('top-right', 'success', `Answer Deleted Successfully!`);\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n      },\r\n    );\r\n  }\r\n\r\n  editQuestionAnswer(lectureQuestionAnswer: LectureQuestionAnswerModel) {\r\n    if (lectureQuestionAnswer) {\r\n      this.questionAnswersService.setQuestionAnswerId(lectureQuestionAnswer._id);\r\n      this.questionAnswersService.setQuestionAnswer(lectureQuestionAnswer);\r\n      this.editLectureQuestionAnswer = true;\r\n      this.openAnswerDialog();\r\n    } else {\r\n      // tslint:disable-next-line: quotemark\r\n      this.showToastr('top-right', 'danger', \"Can't Edit this Answer\");\r\n    }\r\n  }\r\n\r\n  saveLectureQuestionAnswer(newLectureQuestionAnswer: LectureQuestionAnswerModel) {\r\n    if (!this.editLectureQuestionAnswer) {\r\n      newLectureQuestionAnswer.name = this.user.name;\r\n      this.lectureQuestion.answers.push(newLectureQuestionAnswer);\r\n    } else {\r\n      const index = this.lectureQuestion.answers.findIndex(\r\n        (curAnswer: LectureQuestionAnswerModel) => curAnswer._id === newLectureQuestionAnswer._id,\r\n      );\r\n\r\n      if (index >= 0) {\r\n        this.lectureQuestion.answers[index] = newLectureQuestionAnswer;\r\n      }\r\n      this.editLectureQuestionAnswer = false;\r\n    }\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['./../../'], { relativeTo: this.route });\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.questionAnswersService.deleteQuestionAnswersId();\r\n    this.questionAnswersService.deleteQuestionAnswers();\r\n  }\r\n}\r\n","import { AddQuestionAnswersModule } from './../add-question-answers/add-question-answers.module';\nimport { NbCardModule, NbButtonModule, NbIconModule, NbUserModule } from '@nebular/theme';\nimport { ViewQuestionAnswersComponent } from './view-question-answers.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ViewQuestionAnswersRoutingModule } from './view-question-answers-routing.module';\n\n@NgModule({\n  declarations: [ViewQuestionAnswersComponent],\n  imports: [\n    CommonModule,\n    ViewQuestionAnswersRoutingModule,\n    AddQuestionAnswersModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbUserModule,\n  ],\n})\nexport class ViewQuestionAnswersModule {}\n"]}