{"version":3,"sources":["webpack:///src/app/student/branch/course/online-test/manage-online-test/manage-online-test.component.html","webpack:///src/app/student/branch/course/online-test/manage-online-test/manage-online-test-routing.module.ts","webpack:///src/app/student/branch/course/online-test/manage-online-test/manage-online-test.component.ts","webpack:///src/app/student/branch/course/online-test/manage-online-test/manage-online-test.module.ts"],"names":["routes","path","component","ManageOnlineTestComponent","branchService","subjectService","onlineExamService","studentBranchService","studentCourseService","dateService","router","route","toastrService","this","loading","branchId","getBranchId","setType","onlineExams","subjects","subject","getSubjectsData","subscribe","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getStudentCourseData","studentCourse","getOnlineExam","back","navigate","relativeTo","startTime","endTime","formatTime","onlineExam","setOnlineExamId","_id","setOnlineExamData","getOnlineExamsForStudent","category","course","batch","error","showToastr","position","status","message","show","subjectId","find","curSubject","type","getType","queryParams","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageOnlineTestRoutingModule","forChild","ManageOnlineTestModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <h3>\n        Online Exams\n        <small>for Course {{ studentCourse.courseName }}({{ studentCourse.batchName }})</small>\n      </h3>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-3 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-subject\"\n          name=\"subject\"\n          [selected]=\"subject\"\n          fullWidth\n          placeholder=\"All Subjects\"\n          (selectedChange)=\"onSelectSubject($event)\"\n        >\n          <nb-option value=\"\">All Subjects</nb-option>\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n            subject.subject\n          }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body *ngIf=\"!loading; else loadingTemplate\">\n    <div class=\"table-responsive\" *ngIf=\"onlineExams.length > 0; else noOnlineExams\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Date</th>\n            <th>Time</th>\n            <th>Duration</th>\n            <th>Subject</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let onlineExam of onlineExams\">\n            <td>{{ onlineExam.title }}</td>\n            <td>{{ dateService.formatDate(onlineExam.date) }}</td>\n            <td>{{ dateService.formatTime(onlineExam.time) }}</td>\n            <td>{{ onlineExam.duration }} Min/s</td>\n            <td>{{ getSubject(onlineExam.subject) }}</td>\n            <td>\n              <button status=\"success\" nbButton size=\"small\" (click)=\"startExam(onlineExam)\">\n                Start\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <ng-template #noOnlineExams>\n      <p class=\"text-center pt-5 pb-5\">No Online Exams</p>\n    </ng-template>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingTemplate>\n  <p class=\"text-center pt-5 pb-5\">Loading...</p>\n</ng-template>\n","import { ManageOnlineTestComponent } from './manage-online-test.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: ManageOnlineTestComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageOnlineTestRoutingModule {}\n","import { SubjectService } from './../../../../../services/subject.service';\nimport { SubjectModel } from './../../../../../models/course.model';\nimport { OnlineExamModel } from './../../../../../models/online-exam.model';\nimport { OnlineExamService } from './../../../../../services/online-exam.service';\nimport { StudentBranchService } from './../../../student-branch.service';\nimport { StudentCourseService } from './../../../../../services/student-course.service';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { NbToastrService } from '@nebular/theme';\nimport { LectureService } from './../../../../../services/lecture.service';\nimport { DateService, Month } from './../../../../../services/shared-services/date.service';\nimport { Component, OnInit } from '@angular/core';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'ngx-manage-online-test',\n  templateUrl: './manage-online-test.component.html',\n  styleUrls: ['./manage-online-test.component.scss'],\n})\nexport class ManageOnlineTestComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  onlineExams: OnlineExamModel[];\n  studentCourse: StudentCourseModel;\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  subjects: SubjectModel[];\n  subject: string;\n\n  constructor(\n    private branchService: BranchService,\n    private subjectService: SubjectService,\n    private onlineExamService: OnlineExamService,\n    private studentBranchService: StudentBranchService,\n    private studentCourseService: StudentCourseService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastrService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.studentBranchService.setType('lecture');\n\n    this.onlineExams = [];\n    this.subjects = [];\n    this.subject = '';\n\n    this.subjectService.getSubjectsData().subscribe((subjects: SubjectModel[]) => {\n      this.subjects = subjects;\n    });\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n\n        if (studentCourse) {\n          this.getOnlineExam();\n        } else {\n          this.back();\n        }\n      });\n  }\n\n  onSelectSubject(subject: string) {\n    this.subject = subject;\n    this.getOnlineExam();\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getOnlineExam();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n    this.getOnlineExam();\n  }\n\n  getTime(startTime: string, endTime: string) {\n    startTime = this.dateService.formatTime(startTime);\n    endTime = this.dateService.formatTime(endTime);\n    return startTime + ' - ' + endTime;\n  }\n\n  startExam(onlineExam: OnlineExamModel) {\n    this.onlineExamService.setOnlineExamId(onlineExam._id);\n    this.onlineExamService.setOnlineExamData(onlineExam);\n    this.router.navigate(['../start'], { relativeTo: this.route });\n  }\n\n  getOnlineExam() {\n    this.loading = true;\n\n    this.onlineExamService\n      .getOnlineExamsForStudent(\n        this.branchId,\n        this.studentCourse.category,\n        this.studentCourse.course,\n        this.studentCourse.batch,\n        this.subject,\n        this.month,\n        this.year,\n      )\n      .subscribe(\n        (onlineExams: OnlineExamModel[]) => {\n          this.onlineExams = onlineExams;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  getSubject(subjectId: string) {\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === subjectId);\n    if (subject) {\n      return subject.subject;\n    }\n    return '--';\n  }\n\n  back() {\n    const type = this.studentBranchService.getType();\n    this.router.navigate(['../'], { relativeTo: this.route, queryParams: { type } });\n  }\n}\n","import { FormsModule } from '@angular/forms';\nimport { ManageOnlineTestComponent } from './manage-online-test.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageOnlineTestRoutingModule } from './manage-online-test-routing.module';\nimport {\n  NbCardModule,\n  NbIconModule,\n  NbButtonModule,\n  NbInputModule,\n  NbTooltipModule,\n  NbAccordionModule,\n  NbFormFieldModule,\n  NbSelectModule,\n} from '@nebular/theme';\n@NgModule({\n  declarations: [ManageOnlineTestComponent],\n  imports: [\n    CommonModule,\n    ManageOnlineTestRoutingModule,\n    NbCardModule,\n    NbIconModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbInputModule,\n    NbTooltipModule,\n    NbAccordionModule,\n    NbFormFieldModule,\n    FormsModule,\n  ],\n})\nexport class ManageOnlineTestModule {}\n"]}