{"version":3,"sources":["webpack:///src/app/services/branch-student.service.ts","webpack:///src/app/services/storage-package.service.ts","webpack:///src/app/services/dashboard.service.ts","webpack:///src/app/services/role.service.ts","webpack:///src/app/services/discount-and-offer.service.ts","webpack:///src/app/services/subject.service.ts","webpack:///src/app/authentication/auth/guards/branch.auth.guard.ts","webpack:///src/app/services/order.service.ts","webpack:///src/app/institute/payment/payment.component.ts","webpack:///src/app/services/employee-leave.service.ts","webpack:///src/app/services/lecture.service.ts","webpack:///src/app/services/assignment.service.ts","webpack:///src/app/services/lead.service.ts","webpack:///src/app/services/course-material.service.ts","webpack:///src/app/services/course.service.ts","webpack:///src/app/services/student.service.ts","webpack:///src/app/services/question-answers.service.ts","webpack:///src/app/pipe/safe-url.pipe.ts","webpack:///src/app/services/shared-services/storage.service.ts","webpack:///src/app/services/schedule.service.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/services/branch-employee.service.ts","webpack:///src/app/services/online-exam.service.ts","webpack:///src/app/shared/numberToWords.ts","webpack:///src/app/services/student-course.service.ts","webpack:///src/app/services/employee-salary.service.ts","webpack:///src/app/services/assignment-submission.service.ts","webpack:///src/environments/environment.prod.ts","webpack:///src/app/services/student-course-installment-receipt.service.ts","webpack:///src/app/services/coupon.service.ts","webpack:///src/app/services/billing.service.ts","webpack:///src/app/shared/terms-conditions/terms-conditions.component.ts","webpack:///src/app/shared/terms-conditions/terms-conditions.component.html","webpack:///src/app/services/shared-services/user.service.ts","webpack:///node_modules/number-to-words/numberToWords.min.js","webpack:///src/app/services/attendance.service.ts","webpack:///src/app/services/online-exam-question.service.ts","webpack:///src/app/services/checkout.service.ts","webpack:///src/app/institute/checkout/checkout.component.html","webpack:///src/app/institute/checkout/checkout.component.ts","webpack:///src/app/models/membership-plan.model.ts","webpack:///src/app/services/batch.service.ts","webpack:///node_modules/capitalize/index.js","webpack:///src/app/services/institute-keys.service.ts","webpack:///src/app/services/employee.service.ts","webpack:///src/app/services/student-course-installment.service.ts","webpack:///src/app/services/payment.service.ts","webpack:///src/app/services/membership.service.ts","webpack:///src/app/services/exam.service.ts","webpack:///src/app/services/lecture-material.service.ts"],"names":["BranchStudentService","httpService","branchStudent","this","branchStudentId","branch","category","type","httpPost","api","data","pipe","response","err","id","student","status","StoragePackageService","storagePackage","StoragePackage","next","storagePackageId","DashboardService","RoleService","employeeRole","userRoles","employeeRoles","role","DiscountAndOfferService","discountTypes","discountAndOffers","discountAndOffer","discountAndOfferId","code","SubjectService","subjects","subject","subjectId","BranchAuthGuard","branchService","router","route","branchId","getBranchId","createUrlTree","state","canActivate","OrderService","orderDetails","order","map","catchError","throwError","PaymentComponent","paymentService","couponService","orderService","authService","toastrService","ref","loading","user","getUserData","paymentDetails","getPaymentDetails","options","key","razorpayKeyId","amount","currency","name","description","image","order_id","handler","verifyPayment","modal","ondismiss","deleteOrder","prefill","email","contact","phone","notes","address","theme","color","razorPay","Razorpay","coupon","getAppliedCoupon","userId","imsMasterId","userPhone","userName","userEmail","packageType","planType","generateOrder","generateMembershipOrder","subscribe","res","placedOrderReceipt","paymentReceipt","pay","showToastr","onClose","generateStorageOrder","generateSMSOrder","open","_id","close","payment","orderId","receipt","receiptId","position","message","show","deleteAppliedCoupon","EmployeeLeaveService","employeeLeave","employeeLeaveId","leave","employee","month","year","LectureService","lecture","lectureId","date","course","batch","AssignmentService","assignment","assignmentId","publicId","LeadService","lead","leadType","leadId","CourseMaterialService","courseMaterial","courseMaterials","courseMaterialId","materials","CourseService","courses","courseId","find","curCourse","basicDetails","courseName","Course","StudentService","studentType","studentId","getStudentData","studentImsId","QuestionAnswersService","question","questionAnswer","questionAnswers","questionId","questionAnswerId","questionAnswersId","answer","SafeUrlPipe","sanitizer","url","bypassSecurityTrustResourceUrl","StorageService","KB","MB","GB","value","unit","bytes","ScheduleService","schedule","Schedule","scheduleId","scheduleDay","schedules","startDate","endDate","SharedModule","BranchEmployeeService","branchEmployee","branchEmployees","branchEmployeeNameIds","branchEmployeeId","OnlineExamService","onlineExam","onlineExamId","studentQuestionAnswers","numberToWords","number","numToWords","toWords","replace","split","arr","Array","forEach","curNum","push","join","StudentCourseService","studentCourse","studentCourseId","studentCourseInstallment","rollNumber","EmployeeSalaryService","employeeSalary","employeeSalaryId","AssignmentSubmissionService","assignmentSubmission","assignmentSubmissionId","submissionGrades","environment","production","backend","gstNo","encKey","aesKey","zoomLiveURL","SOCKET_ENDPOINT","StudentCourseInstallmentReceiptService","studentCourseInstallmentReceipt","studentCourseInstallmentReceiptId","CouponService","couponId","appliedCoupon","InstituteBillingService","billingDetails","TermsConditionsComponent","UserService","profile","userProfile","password","f","e","l","Math","abs","self","global","n","r","o","i","s","zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","h","test","a","t","d","p","v","b","y","c","g","m","w","x","parseInt","TypeError","RangeError","arguments","floor","M","toOrdinal","String","charAt","length","toWordsOrdinal","module","exports","AttendanceService","attendance","OnlineExamQuestionService","onlineExamQuestion","onlineExamQuestionId","contents","CheckoutService","checkoutDetails","CheckoutComponent","checkoutService","couponCode","checkoutData","discountAmount","discountType","discount","getAmount","totalAmount","setAppliedCoupon","validateCoupon","calculateCouponDiscount","error","parseFloat","toString","toFixed","checkout","MembershipPlanModel","duration","price","BatchService","batches","batchId","curBatch","batchName","string","preserve","toLowerCase","toUpperCase","substring","words","InstituteKeysService","institutePaymentAccessKey","keys","httpGet","EmployeeService","employeeType","employeeId","StudentCourseInstallmentService","studentCourseInstallments","courseInstallment","studentCourseInstallmentId","courseInstallmentId","installmentId","installments","findIndex","curInstallment","amountCollected","installmentAmount","pendingAmount","PaymentService","institutePaymentDetails","placedOrder","MembershipService","membershipPlan","membershipType","ExamService","exam","examId","marks","LectureMaterialService","lectureMaterial","lectureMaterials","lectureMaterialId"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { BranchStudentModel } from '../models/branch-student.model';\n\n@Injectable({ providedIn: 'root' })\nexport class BranchStudentService {\n  private branchStudentId: string;\n  private branchStudent: BranchStudentModel;\n\n  setBranchStudentData(branchStudent: BranchStudentModel) {\n    this.branchStudent = branchStudent;\n  }\n\n  getBranchStudentData() {\n    return this.branchStudent;\n  }\n\n  deleteBranchStudentData() {\n    this.branchStudent = null;\n  }\n\n  setBranchStudentId(branchStudentId: string) {\n    this.branchStudentId = branchStudentId;\n  }\n\n  getBranchStudentId() {\n    return this.branchStudentId;\n  }\n\n  deleteBranchStudentId() {\n    this.branchStudentId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getBranchStudents(branch: string, category: string, type: string) {\n    const data = { api: 'getBranchStudents', data: { branch, category, type } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchStudentNameIds(branch: string, category: string, type: string) {\n    const data = { api: 'getBranchStudentNameIds', data: { branch, category, type } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchAllStudentNameIds(branch: string, category: string) {\n    const data = { api: 'getBranchAllStudentNameIds', data: { branch, category } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchStudent(id: string, student: string) {\n    const data = { api: 'addBranchStudent', data: { id, student } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  newBranchStudent(branchStudent: any) {\n    const data = { api: 'newBranchStudent', data: branchStudent };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchStudentForEditing(id: string, student: string) {\n    const data = { api: 'getBranchStudentForEditing', data: { id, student } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editBranchStudent(branchStudent: BranchStudentModel) {\n    const data = { api: 'updateBranchStudent', data: branchStudent };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeBranchStudentStatus(id: string, status: boolean) {\n    const data = { api: 'changeBranchStudentStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteBranchStudent(id: string) {\n    const data = { api: 'deleteBranchStudent', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { StoragePackageModel } from '../models/storage-package.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoragePackageService {\r\n  private storagePackage = new BehaviorSubject<StoragePackageModel>(null);\r\n  private storagePackageId: string;\r\n\r\n  setStoragePackageData(StoragePackage: StoragePackageModel) {\r\n    this.storagePackage.next(StoragePackage);\r\n  }\r\n\r\n  getStoragePackageData() {\r\n    return this.storagePackage;\r\n  }\r\n\r\n  deleteStoragePackageData() {\r\n    this.storagePackage.next(null);\r\n  }\r\n\r\n  setStoragePackageId(storagePackageId: string) {\r\n    this.storagePackageId = storagePackageId;\r\n  }\r\n\r\n  getStoragePackageId() {\r\n    return this.storagePackageId;\r\n  }\r\n\r\n  deleteStoragePackageId() {\r\n    this.storagePackageId = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  saveStoragePackage(storagePackage: any) {\r\n    const data = { api: 'newStoragePackage', data: storagePackage };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  changeStoragePackageStatus(id: string, status: boolean) {\r\n    const data = { api: 'changeStoragePackageStatus', data: { id, status } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getStoragePackages() {\r\n    const data = {\r\n      api: 'getStoragePackages',\r\n      data: {},\r\n    };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getStoragePackage(id: string) {\r\n    const data = { api: 'getStoragePackage', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  editStoragePackage(storagePackage: StoragePackageModel) {\r\n    const data = { api: 'updateStoragePackage', data: storagePackage };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteStoragePackage(id: string) {\r\n    const data = { api: 'deleteStoragePackage', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DashboardService {\n  constructor(private httpService: HttpService) {}\n\n  getBranchDashboard(branch: string) {\n    const data = { api: 'getBranchDashboard', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchDashboardForEmployee(branch: string) {\n    const data = { api: 'getBranchDashboardForEmployee', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentBranchDashboard(branch: any) {\n    const data = { api: 'getStudentBranchDashboard', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoleService {\n  private userRoles: string[];\n  private employeeRoles: string[];\n  private employeeRole = new BehaviorSubject<string>(null);\n\n  constructor() {\n    this.userRoles = ['institute', 'employee', 'student'];\n    this.employeeRoles = ['manager', 'teacher', 'councillor'];\n  }\n\n  getUserRoles() {\n    return this.userRoles;\n  }\n\n  setEmployeeRole(role: string) {\n    this.employeeRole.next(role);\n  }\n\n  getEmployeeRole() {\n    return this.employeeRole;\n  }\n\n  getEmployeeRoles() {\n    return this.employeeRoles;\n  }\n}\n","import { DiscountAndOfferModel } from '../models/discount-and-offer.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class DiscountAndOfferService {\n  private discountTypes: string[] = ['percentage', 'amount'];\n\n  private discountAndOffers = new BehaviorSubject<DiscountAndOfferModel[]>([]);\n  private discountAndOffer = new BehaviorSubject<DiscountAndOfferModel>(null);\n  private discountAndOfferId: string;\n\n  getDiscountTypes() {\n    return this.discountTypes;\n  }\n\n  setDiscountAndOfferId(discountAndOfferId: string) {\n    this.discountAndOfferId = discountAndOfferId;\n  }\n\n  getDiscountAndOfferId() {\n    return this.discountAndOfferId;\n  }\n\n  deleteDiscountAndOfferId() {\n    this.discountAndOfferId = null;\n  }\n\n  setDiscountAndOffersData(discountAndOffers: DiscountAndOfferModel[]) {\n    this.discountAndOffers.next(discountAndOffers);\n  }\n\n  getDiscountAndOffersData() {\n    return this.discountAndOffers;\n  }\n\n  deleteDiscountAndOffersData() {\n    this.discountAndOffers.next([]);\n  }\n\n  setDiscountAndOfferData(discountAndOffer: DiscountAndOfferModel) {\n    this.discountAndOffer.next(discountAndOffer);\n  }\n\n  getDiscountAndOfferData() {\n    return this.discountAndOffer;\n  }\n\n  deleteDiscountAndOfferData() {\n    this.discountAndOffer.next(null);\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getDiscountAndOffers(branch: any) {\n    const data = { api: 'getDiscountAndOffers', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getDiscountAndOffersForStudent(branch: any) {\n    const data = { api: 'getDiscountAndOffersForStudent', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getDiscountAndOffer(id: string) {\n    const data = { api: 'getDiscountAndOffer', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getDiscountAndOfferForEditing(id: string) {\n    const data = { api: 'getDiscountAndOfferForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  CheckDiscountAndOffer(branch: string, code: string) {\n    const data = { api: 'CheckDiscountAndOffer', data: { branch, code } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  addDiscountAndOffer(discountAndOffer: any) {\n    const data = { api: 'newDiscountAndOffer', data: discountAndOffer };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editDiscountAndOffer(discountAndOffer: DiscountAndOfferModel) {\n    const data = { api: 'updateDiscountAndOffer', data: discountAndOffer };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteDiscountAndOffer(id: string) {\n    const data = { api: 'deleteDiscountAndOffer', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeDiscountAndOfferStatus(id: string, status: boolean) {\n    const data = { api: 'changeDiscountAndOfferStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { SubjectModel } from './../models/course.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SubjectService {\r\n  private subjects = new BehaviorSubject<SubjectModel[]>([]);\r\n  private subject = new BehaviorSubject<SubjectModel>(null);\r\n  private subjectId: string;\r\n\r\n  setSubjectId(subjectId: string) {\r\n    this.subjectId = subjectId;\r\n  }\r\n\r\n  getSubjectId() {\r\n    return this.subjectId;\r\n  }\r\n\r\n  deleteSubjectId() {\r\n    this.subjectId = null;\r\n  }\r\n\r\n  setSubjectsData(subjects: SubjectModel[]) {\r\n    this.subjects.next(subjects);\r\n  }\r\n\r\n  getSubjectsData() {\r\n    return this.subjects;\r\n  }\r\n\r\n  deleteSubjectsData() {\r\n    this.subjects.next([]);\r\n  }\r\n\r\n  setSubjectData(subject: SubjectModel) {\r\n    this.subject.next(subject);\r\n  }\r\n\r\n  getSubjectData() {\r\n    return this.subject;\r\n  }\r\n\r\n  deleteSubjectData() {\r\n    this.subject.next(null);\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n}\r\n","import { BranchService } from '../../../services/branch.service';\nimport { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class BranchAuthGuard implements CanActivate {\n  constructor(private branchService: BranchService, private router: Router) {}\n\n  // tslint:disable-next-line: max-line-length\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    router: RouterStateSnapshot,\n  ): boolean | UrlTree | Promise<boolean | UrlTree> | Observable<boolean | UrlTree> {\n    const branchId: string = this.branchService.getBranchId();\n    if (branchId && branchId !== '') {\n      return true;\n    }\n    return this.router.createUrlTree(['/']);\n  }\n\n  // tslint:disable-next-line: max-line-length\n  canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): boolean | UrlTree | Promise<boolean | UrlTree> | Observable<boolean | UrlTree> {\n    return this.canActivate(route, state);\n  }\n}\n","import { HttpService } from './shared-services/http.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderService {\r\n  private orderDetails: any;\r\n\r\n  getOrderDetails() {\r\n    return this.orderDetails;\r\n  }\r\n\r\n  setOrderDetails(order: any) {\r\n    this.orderDetails = order;\r\n  }\r\n\r\n  deleteOrderDetails() {\r\n    this.orderDetails = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  deleteOrder(id: string) {\r\n    const data = { api: 'deleteOrder', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  generateStorageOrder(order: any) {\r\n    const data = { api: 'generateStorageOrder', data: order };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  generateSMSOrder(order: any) {\r\n    const data = { api: 'generateSMSOrder', data: order };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  generateMembershipOrder(order: any) {\r\n    const data = { api: 'generateMembershipOrder', data: order };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { BranchService } from './../../services/branch.service';\r\nimport { CouponService } from './../../services/coupon.service';\r\nimport { OrderService } from './../../services/order.service';\r\nimport { environment } from './../../../environments/environment.prod';\r\nimport { AuthService } from './../../authentication/auth/auth-service/auth.service';\r\nimport { PaymentService } from './../../services/payment.service';\r\nimport { NbToastrService, NbDialogRef } from '@nebular/theme';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\ndeclare const Razorpay: any;\r\n\r\ninterface Coupon {\r\n  code: string;\r\n  discount: string;\r\n  discountAmount: number;\r\n  totalAmount: string;\r\n  discountType?: string;\r\n}\r\n@Component({\r\n  selector: 'ngx-payment',\r\n  templateUrl: './payment.component.html',\r\n  styleUrls: ['./payment.component.scss'],\r\n})\r\nexport class PaymentComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n\r\n  private user: any;\r\n  private orderDetails: any;\r\n  private options: any;\r\n  private razorPay: any;\r\n  private placedOrderReceipt: any;\r\n\r\n  paymentDetails: { planType: string; packageType: string; amount: string; type?: string };\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private paymentService: PaymentService,\r\n    private couponService: CouponService,\r\n    private orderService: OrderService,\r\n    private authService: AuthService,\r\n    private toastrService: NbToastrService,\r\n    protected ref: NbDialogRef<PaymentComponent>, // private router: Router, // private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n\r\n    this.user = this.authService.getUserData();\r\n    this.paymentDetails = this.paymentService.getPaymentDetails();\r\n\r\n    this.options = {\r\n      key: environment.razorpayKeyId, // Enter the Key ID generated from the Dashboard\r\n      amount: '', // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      currency: 'INR',\r\n      name: 'IMS Master',\r\n      description: 'The Class Master Transaction',\r\n      image: '../../../assets/brand/class-master-mini.png',\r\n      // tslint:disable-next-line: max-line-length\r\n      order_id: '', // This is a sample Order ID. Pass the `id` obtained in the response of Step 1 order_9A33XWu170gUtm\r\n      handler: (response: any) => {\r\n        this.verifyPayment(response);\r\n      },\r\n      modal: {\r\n        ondismiss: () => {\r\n          this.deleteOrder();\r\n        },\r\n      },\r\n      prefill: {\r\n        name: this.user.name,\r\n        email: this.user.email,\r\n        contact: this.user.phone,\r\n      },\r\n      notes: {\r\n        address: '',\r\n      },\r\n      theme: {\r\n        color: '#528FF0',\r\n      },\r\n    };\r\n\r\n    this.razorPay = new Razorpay(this.options);\r\n\r\n    const coupon: Coupon = this.couponService.getAppliedCoupon();\r\n\r\n    const branchId = this.branchService.getBranchId();\r\n\r\n    this.orderDetails = {\r\n      branch: branchId,\r\n      userId: this.user.imsMasterId,\r\n      userPhone: this.user.phone,\r\n      userName: this.user.name,\r\n      userEmail: this.user.email,\r\n      imsMasterId: this.user.imsMasterId,\r\n      amount: this.paymentDetails.amount,\r\n      packageType: this.paymentDetails.packageType,\r\n      planType: this.paymentDetails.planType,\r\n    };\r\n\r\n    if (coupon) {\r\n      this.orderDetails.coupon = coupon.code;\r\n    }\r\n\r\n    this.generateOrder();\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  private generateOrder() {\r\n    if (this.paymentDetails.planType === 'membership') {\r\n      this.orderService.generateMembershipOrder(this.orderDetails).subscribe(\r\n        (res: any) => {\r\n          this.placedOrderReceipt = res.paymentReceipt;\r\n          // this.options.amount = res.order.amount;\r\n          this.options.amount = '1';\r\n          this.options.order_id = res.order.id;\r\n          this.options.currency = res.order.currency;\r\n          this.options.prefill.name = this.user.name;\r\n          this.options.prefill.email = this.user.email;\r\n          this.options.prefill.contact = this.user.phone;\r\n          this.razorPay = new Razorpay(this.options);\r\n          this.pay();\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.onClose();\r\n        },\r\n      );\r\n    } else if (this.paymentDetails.planType === 'storage') {\r\n      this.orderDetails.type = this.paymentDetails.type;\r\n      this.orderService.generateStorageOrder(this.orderDetails).subscribe(\r\n        (res: any) => {\r\n          this.placedOrderReceipt = res.paymentReceipt;\r\n          // this.options.amount = res.order.amount;\r\n          this.options.amount = '1';\r\n          this.options.order_id = res.order.id;\r\n          this.options.currency = res.order.currency;\r\n          this.options.prefill.name = this.user.name;\r\n          this.options.prefill.email = this.user.email;\r\n          this.options.prefill.contact = this.user.phone;\r\n          this.razorPay = new Razorpay(this.options);\r\n          this.pay();\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.onClose();\r\n        },\r\n      );\r\n    } else if (this.paymentDetails.planType === 'sms') {\r\n      this.orderService.generateSMSOrder(this.orderDetails).subscribe(\r\n        (res: any) => {\r\n          this.placedOrderReceipt = res.paymentReceipt;\r\n          // this.options.amount = res.order.amount;\r\n          this.options.amount = '1';\r\n          this.options.order_id = res.order.id;\r\n          this.options.currency = res.order.currency;\r\n          this.options.prefill.name = this.user.name;\r\n          this.options.prefill.email = this.user.email;\r\n          this.options.prefill.contact = this.user.phone;\r\n          this.razorPay = new Razorpay(this.options);\r\n          this.pay();\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.onClose();\r\n        },\r\n      );\r\n    } else {\r\n      this.showToastr('top-right', 'danger', 'Invalid Plan');\r\n      this.onClose();\r\n    }\r\n  }\r\n\r\n  private pay() {\r\n    this.razorPay.open();\r\n  }\r\n\r\n  private deleteOrder() {\r\n    this.orderService.deleteOrder(this.placedOrderReceipt._id).subscribe(\r\n      (res: any) => {\r\n        this.placedOrderReceipt = null;\r\n        this.ref.close({ status: false });\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.onClose();\r\n      },\r\n    );\r\n  }\r\n\r\n  verifyPayment(payment: any) {\r\n    this.paymentService.verifyPayment(payment, this.placedOrderReceipt).subscribe(\r\n      (res: any) => {\r\n        this.showToastr('top-right', 'success', 'Payment Verified Successfully');\r\n        this.ref.close({ status: true, order: res.orderId, receipt: res.receiptId });\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.onClose();\r\n      },\r\n    );\r\n  }\r\n\r\n  onClose() {\r\n    this.ref.close();\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.couponService.deleteAppliedCoupon();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { EmployeeLeaveModel } from '../models/employee-leave.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmployeeLeaveService {\r\n  private employeeLeaveId: string;\r\n\r\n  private employeeLeave = new BehaviorSubject<EmployeeLeaveModel>(null);\r\n\r\n  setEmployeeLeaveData(employeeLeave: EmployeeLeaveModel) {\r\n    this.employeeLeave.next(employeeLeave);\r\n  }\r\n\r\n  getEmployeeLeaveData() {\r\n    return this.employeeLeave;\r\n  }\r\n\r\n  deleteEmployeeLeaveData() {\r\n    this.employeeLeave.next(null);\r\n  }\r\n\r\n  setEmployeeLeaveId(employeeLeaveId: string) {\r\n    this.employeeLeaveId = employeeLeaveId;\r\n  }\r\n\r\n  getEmployeeLeaveId() {\r\n    return this.employeeLeaveId;\r\n  }\r\n\r\n  deleteEmployeeLeaveId() {\r\n    this.employeeLeaveId = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  createEmployeeLeave(employeeLeave: any) {\r\n    const data = { api: 'createEmployeeLeave', data: employeeLeave };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  changeEmployeeLeaveStatus(leave: any) {\r\n    const data = { api: 'changeEmployeeLeaveStatus', data: leave };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getEmployeeLeaves(employee: string, month: string, year: string) {\r\n    const data = { api: 'getEmployeeLeaves', data: { employee, month, year } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getBranchAllEmployeeLeaves(branch: string, employee: string, month: string, year: string) {\r\n    const data = { api: 'getBranchAllEmployeeLeaves', data: { branch, employee, month, year } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getBranchEmployeeLeaves(branch: string, employee: string, month: string, year: string) {\r\n    const data = { api: 'getBranchEmployeeLeaves', data: { branch, employee, month, year } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getMyBranchLeaves(branch: string, month: string, year: string) {\r\n    const data = { api: 'getMyBranchLeaves', data: { branch, month, year } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getEmployeeLeave(id: string) {\r\n    const data = { api: 'getEmployeeLeave', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  updateEmployeeLeave(employeeLeave: any) {\r\n    const data = { api: 'updateEmployeeLeave', data: employeeLeave };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteEmployeeLeave(id: string) {\r\n    const data = { api: 'deleteEmployeeLeave', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { ScheduleModel } from '../models/schedule.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LectureService {\n  private lecture = new BehaviorSubject<ScheduleModel>(null);\n  private lectureId: string = null;\n  private date: string = null;\n\n  getSearchDate() {\n    return this.date;\n  }\n\n  setSearchDate(date: string) {\n    this.date = date;\n  }\n\n  setLectureData(lecture: ScheduleModel) {\n    this.lecture.next(lecture);\n  }\n\n  getLectureData() {\n    return this.lecture;\n  }\n\n  deleteLectureData() {\n    this.lecture.next(null);\n  }\n\n  setLectureId(lectureId: string) {\n    this.lectureId = lectureId;\n  }\n\n  getLectureId() {\n    return this.lectureId;\n  }\n\n  deleteLectureId() {\n    this.lectureId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n  getLectures(branch: string, category: string, course: string, batch: string, date: string) {\n    const data = {\n      api: 'getLectures',\n      data: { branch, category, course, batch, date },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLecturesForStudent(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    date: string,\n  ) {\n    const data = {\n      api: 'getLecturesForStudent',\n      data: { branch, category, course, batch, date },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLecture(id: string) {\n    const data = { api: 'getLecture', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getUpcomingLecturesForEmployee(branch: string) {\n    const data = { api: 'getUpcomingLecturesForEmployee', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { AssignmentModel } from '../models/assignment.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AssignmentService {\r\n  private assignmentId: string;\r\n  private assignment = new BehaviorSubject<AssignmentModel>(null);\r\n\r\n  setAssignmentData(assignment: AssignmentModel) {\r\n    this.assignment.next(assignment);\r\n  }\r\n\r\n  getAssignmentData() {\r\n    return this.assignment;\r\n  }\r\n\r\n  deleteAssignmentData() {\r\n    this.assignment.next(null);\r\n  }\r\n\r\n  setAssignmentId(assignmentId: string) {\r\n    this.assignmentId = assignmentId;\r\n  }\r\n\r\n  getAssignmentId() {\r\n    return this.assignmentId;\r\n  }\r\n\r\n  deleteAssignmentId() {\r\n    this.assignmentId = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  saveAssignment(assignment: FormData) {\r\n    const data = { api: 'saveAssignment', data: assignment };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getAssignments(\r\n    branch: string,\r\n    category: string,\r\n    course: string,\r\n    batch: string,\r\n    subject: string,\r\n    month: string,\r\n    year: string,\r\n  ) {\r\n    const data = {\r\n      api: 'getAssignments',\r\n      data: { branch, category, course, batch, subject, month, year },\r\n    };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getAssignmentsForStudent(\r\n    branch: string,\r\n    category: string,\r\n    course: string,\r\n    batch: string,\r\n    subject: string,\r\n    month: string,\r\n    year: string,\r\n  ) {\r\n    const data = {\r\n      api: 'getAssignmentsForStudent',\r\n      data: { branch, category, course, batch, subject, month, year },\r\n    };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getAssignment(id: string) {\r\n    const data = { api: 'getAssignment', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  updateAssignment(assignment: FormData) {\r\n    const data = { api: 'updateAssignment', data: assignment };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  changeAssignmentStatus(id: string, status: string) {\r\n    const data = { api: 'changeAssignmentStatus', data: { id, status } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteAssignmentAttachment(id: string, publicId: string) {\r\n    const data = { api: 'deleteAssignmentAttachment', data: { id, publicId } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteAssignment(id: string) {\r\n    const data = { api: 'deleteAssignment', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { LeadModel } from '../models/Lead.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LeadService {\n  private leadType: string;\n\n  private leadId: string;\n  private lead = new BehaviorSubject<LeadModel>(null);\n\n  setLeadData(lead: LeadModel) {\n    this.lead.next(lead);\n  }\n\n  getLeadType() {\n    return this.leadType;\n  }\n\n  setLeadType(leadType: string) {\n    this.leadType = leadType;\n  }\n\n  deleteLeadType() {\n    this.leadType = null;\n  }\n\n  getLeadData() {\n    return this.lead;\n  }\n\n  deleteLeadData() {\n    this.lead.next(null);\n  }\n\n  setLeadId(leadId: string) {\n    this.leadId = leadId;\n  }\n\n  getLeadId() {\n    return this.leadId;\n  }\n\n  deleteLeadId() {\n    this.leadId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  saveLead(lead: any) {\n    const data = { api: 'saveLead', data: lead };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLeads(branch: string, category: string, course: any, leadType: string) {\n    const data = { api: 'getLeads', data: { branch, category, course, leadType } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLead(id: string) {\n    const data = { api: 'getLead', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLeadForEditing(id: string) {\n    const data = { api: 'getLeadForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editLead(lead: LeadModel) {\n    const data = { api: 'editLead', data: lead };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeLeadStatus(id: string, status: string) {\n    const data = { api: 'changeLeadStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteLead(id: string) {\n    const data = { api: 'deleteLead', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { CourseMaterialModel } from '../models/course-material.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CourseMaterialService {\n  courseMaterialId: string;\n  courseMaterial = new BehaviorSubject<CourseMaterialModel>(null);\n  courseMaterials = new BehaviorSubject<CourseMaterialModel[]>([]);\n\n  setCourseMaterialId(courseMaterialId: string) {\n    this.courseMaterialId = courseMaterialId;\n  }\n\n  getCourseMaterialId() {\n    return this.courseMaterialId;\n  }\n\n  deleteCourseMaterialId() {\n    this.courseMaterialId = null;\n  }\n\n  setCourseMaterialsData(courseMaterials: CourseMaterialModel[]) {\n    this.courseMaterials.next(courseMaterials);\n  }\n\n  getCourseMaterialsData() {\n    return this.courseMaterials;\n  }\n\n  deleteCourseMaterialsData() {\n    this.courseMaterials.next([]);\n  }\n\n  setCourseMaterialData(courseMaterial: CourseMaterialModel) {\n    this.courseMaterial.next(courseMaterial);\n  }\n\n  getCourseMaterialData() {\n    return this.courseMaterial;\n  }\n\n  deleteCourseMaterialData() {\n    this.courseMaterial.next(null);\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getCourseMaterials(branch: string, category: string, course: string, subject: string) {\n    const data = { api: 'getCourseMaterials', data: { branch, category, course, subject } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getCourseMaterial(id: string) {\n    const data = { api: 'getCourseMaterials', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getCourseMaterialsForStudent(branch: string, category: string, course: string, subject: string) {\n    const data = {\n      api: 'getCourseMaterialsForStudent',\n      data: { branch, category, course, subject },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  newCourseMaterials(materials: FormData) {\n    const data = { api: 'newCourseMaterials', data: materials };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeCourseMaterialStatus(id: string, status: boolean) {\n    const data = { api: 'changeCourseMaterialStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteCourseMaterial(id: string) {\n    const data = { api: 'deleteCourseMaterial', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { CourseModel } from '../models/course.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class CourseService {\n  private courses = new BehaviorSubject<CourseModel[]>([]);\n  private course = new BehaviorSubject<CourseModel>(null);\n  private courseId: string;\n\n  setCourseId(courseId: string) {\n    this.courseId = courseId;\n  }\n\n  getCourseId() {\n    return this.courseId;\n  }\n\n  deleteCourseId() {\n    this.courseId = null;\n  }\n\n  setCoursesData(courses: CourseModel[]) {\n    this.courses.next(courses);\n  }\n\n  getCoursesData() {\n    return this.courses;\n  }\n\n  deleteCoursesData() {\n    this.courses.next([]);\n  }\n\n  setCourseData(course: CourseModel) {\n    this.course.next(course);\n  }\n\n  getCourseData() {\n    return this.course;\n  }\n\n  deleteCourseData() {\n    this.course.next(null);\n  }\n\n  getCourseName(courseId: string) {\n    return this.courses.pipe(\n      map((courses: CourseModel[]) => {\n        const course = courses.find((curCourse: CourseModel) => curCourse._id === courseId);\n        if (course) {\n          return course.basicDetails.courseName;\n        }\n        return '--';\n      }),\n    );\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getCourses(branch: any, category: any) {\n    const data = { api: 'getCourses', data: { branch, category } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getCourse(id: string) {\n    const data = { api: 'getCourse', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getCourseForEditing(id: string) {\n    const data = { api: 'getCourseForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  addCourse(Course: any) {\n    const data = { api: 'newCourse', data: Course };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editCourse(Course: any) {\n    const data = { api: 'updateCourse', data: Course };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteCourse(id: string) {\n    // this.Courses.splice(id, 1);\n  }\n\n  changeCourseStatus(id: string, status: boolean) {\n    const data = { api: 'changeCourseStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, Observable, BehaviorSubject } from 'rxjs';\nimport { StudentModel } from '../models/Student.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StudentService {\n  private studentType: string;\n  private studentId: string;\n  private student = new BehaviorSubject<StudentModel>(null);\n\n  setStudentType(type: string) {\n    this.studentType = type;\n  }\n\n  getStudentType() {\n    return this.studentType;\n  }\n\n  deleteStudentType() {\n    this.studentType = null;\n  }\n\n  setStudentData(student: StudentModel) {\n    this.student.next(student);\n  }\n\n  getStudentData() {\n    return this.student;\n  }\n\n  deleteStudentData() {\n    this.student.next(null);\n  }\n\n  setStudentId(studentId: string) {\n    this.studentId = studentId;\n  }\n\n  getStudentId() {\n    return this.studentId;\n  }\n\n  deleteStudentId() {\n    this.studentId = null;\n  }\n\n  getStudentName() {\n    return this.getStudentData().pipe(\n      map((student: StudentModel) => {\n        if (student) {\n          return student.name;\n        }\n        return '--';\n      }),\n    );\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addStudent(student: any, branchStudent: any) {\n    const data = { api: 'newStudent', data: { student, branchStudent } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudents() {\n    const data = { api: 'getStudents', data: {} };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudent(id: string) {\n    const data = { api: 'getStudent', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentByImsId(studentImsId: string) {\n    const data = { api: 'getStudentByImsId', data: { studentImsId } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  searchStudent(studentId: string) {\n    const data = { api: 'searchStudent', data: { studentId } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentForEditing(id: string) {\n    const data = { api: 'getStudentForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeStudentStatus(id: string, status: boolean) {\n    const data = { api: 'changeStudentStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editStudent(student: StudentModel) {\n    const data = { api: 'updateStudent', data: student };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteStudent(id: string) {\n    const data = { api: 'deleteStudent', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { LectureQuestionModel } from '../models/lecture-question.model';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { LectureQuestionAnswerModel } from '../models/lecture-question-answers.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuestionAnswersService {\r\n  private question = new BehaviorSubject<LectureQuestionModel>(null);\r\n  private questionAnswer = new BehaviorSubject<LectureQuestionAnswerModel>(null);\r\n  private questionAnswers = new BehaviorSubject<LectureQuestionModel>(null);\r\n  private questionId: string = null;\r\n  private questionAnswerId: string = null;\r\n  private questionAnswersId: string = null;\r\n\r\n  setQuestion(question: LectureQuestionModel) {\r\n    this.question.next(question);\r\n  }\r\n\r\n  getQuestion() {\r\n    return this.question;\r\n  }\r\n\r\n  deleteQuestion() {\r\n    this.question.next(null);\r\n  }\r\n\r\n  setQuestionId(questionId: string) {\r\n    this.questionId = questionId;\r\n  }\r\n\r\n  getQuestionId() {\r\n    return this.questionId;\r\n  }\r\n\r\n  deleteQuestionId() {\r\n    this.questionId = null;\r\n  }\r\n\r\n  setQuestionAnswer(questionAnswer: LectureQuestionAnswerModel) {\r\n    this.questionAnswer.next(questionAnswer);\r\n  }\r\n\r\n  getQuestionAnswer() {\r\n    return this.questionAnswer;\r\n  }\r\n\r\n  deleteQuestionAnswer() {\r\n    this.questionAnswer.next(null);\r\n  }\r\n\r\n  setQuestionAnswerId(questionAnswerId: string) {\r\n    this.questionAnswerId = questionAnswerId;\r\n  }\r\n\r\n  getQuestionAnswerId() {\r\n    return this.questionAnswerId;\r\n  }\r\n\r\n  deleteQuestionAnswerId() {\r\n    this.questionAnswerId = null;\r\n  }\r\n\r\n  setQuestionAnswers(questionAnswers: LectureQuestionModel) {\r\n    this.questionAnswers.next(questionAnswers);\r\n  }\r\n\r\n  getQuestionAnswers() {\r\n    return this.questionAnswers;\r\n  }\r\n\r\n  deleteQuestionAnswers() {\r\n    this.questionAnswers.next(null);\r\n  }\r\n\r\n  setQuestionAnswersId(questionAnswersId: string) {\r\n    this.questionAnswersId = questionAnswersId;\r\n  }\r\n\r\n  getQuestionAnswersId() {\r\n    return this.questionAnswersId;\r\n  }\r\n\r\n  deleteQuestionAnswersId() {\r\n    this.questionAnswersId = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  getLectureQuestionAnswers(\r\n    branch: string,\r\n    category: string,\r\n    course: string,\r\n    batch: string,\r\n    lecture: string,\r\n  ) {\r\n    const data = {\r\n      api: 'getLectureQuestionAnswers',\r\n      data: { branch, category, course, batch, lecture },\r\n    };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getLectureQuestionAnswer(id: string) {\r\n    const data = { api: 'getLectureQuestionAnswer', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  newLectureQuestion(question: any) {\r\n    const data = { api: 'newLectureQuestion', data: question };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  editLectureQuestion(question: any) {\r\n    const data = { api: 'editLectureQuestion', data: question };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteLectureQuestion(id: string) {\r\n    const data = { api: 'deleteLectureQuestion', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  newLectureQuestionAnswer(answer: any) {\r\n    const data = { api: 'newLectureQuestionAnswer', data: answer };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  editLectureQuestionAnswer(answer: any) {\r\n    const data = { api: 'editLectureQuestionAnswer', data: answer };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteLectureQuestionAnswer(id: string) {\r\n    const data = { api: 'deleteLectureQuestionAnswer', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeUrl',\r\n})\r\nexport class SafeUrlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url: any) {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n","import { _isNumberValue } from '@angular/cdk/coercion';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StorageService {\r\n  private KB: number;\r\n  private MB: number;\r\n  private GB: number;\r\n\r\n  constructor() {\r\n    this.KB = 1024;\r\n    this.MB = 1024 * 1024;\r\n    this.GB = 1024 * 1024 * 1024;\r\n  }\r\n\r\n  convertUnitToBytes(value: any, unit: string) {\r\n    value = +value;\r\n    if (unit === 'GB') {\r\n      return value * this.GB;\r\n    } else if (unit === 'MB') {\r\n      return value * this.MB;\r\n    } else if (unit === 'KB') {\r\n      return value * this.KB;\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  convertByteToUnit(bytes: any): { value: number; unit: string } {\r\n    bytes = +bytes;\r\n    let value: number;\r\n    let unit: string;\r\n    if (bytes < this.KB) {\r\n      value = bytes;\r\n      if (value <= 1) {\r\n        unit = 'Byte';\r\n      } else {\r\n        unit = 'Bytes';\r\n      }\r\n    } else if (bytes >= this.KB && bytes < this.MB) {\r\n      value = bytes / this.KB;\r\n      unit = 'KB';\r\n    } else if (bytes >= this.MB && bytes < this.GB) {\r\n      value = bytes / this.MB;\r\n      unit = 'MB';\r\n    } else {\r\n      value = bytes / this.GB;\r\n      unit = 'GB';\r\n    }\r\n    return { value, unit };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { ScheduleModel } from '../models/schedule.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScheduleService {\n  private schedule = new BehaviorSubject<ScheduleModel>(null);\n  private scheduleId: string;\n  private scheduleDay: string;\n\n  setScheduleData(Schedule: ScheduleModel) {\n    this.schedule.next(Schedule);\n  }\n\n  getScheduleData() {\n    return this.schedule;\n  }\n\n  deleteScheduleData() {\n    this.schedule.next(null);\n  }\n\n  setScheduleId(scheduleId: string) {\n    this.scheduleId = scheduleId;\n  }\n\n  getScheduleId() {\n    return this.scheduleId;\n  }\n\n  deleteScheduleId() {\n    this.scheduleId = null;\n  }\n\n  setScheduleDay(scheduleDay: string) {\n    this.scheduleDay = scheduleDay;\n  }\n\n  getScheduleDay() {\n    return this.scheduleDay;\n  }\n\n  deleteScheduleDay() {\n    this.scheduleDay = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addSchedule(schedules: any[]) {\n    const data = { api: 'newSchedule', data: schedules };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeScheduleStatus(id: string, status: boolean) {\n    const data = { api: 'changeScheduleStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getAllSchedules(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    startDate: string,\n    endDate: string,\n  ) {\n    const data = {\n      api: 'getAllSchedule',\n      data: { branch, category, course, batch, startDate, endDate },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getSchedule(id: string) {\n    const data = { api: 'getSchedule', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getScheduleForEditing(schedule: string) {\n    const data = { api: 'getScheduleForEditing', data: { schedule } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editSchedule(schedule: any) {\n    const data = { api: 'editSchedule', data: schedule };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteSchedule(id: string) {\n    const data = { api: 'deleteSchedule', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { NbCardModule } from '@nebular/theme';\r\nimport { SafeUrlPipe } from './../pipe/safe-url.pipe';\r\nimport { SafeHtmlPipe } from './../pipe/safe-html.pipe';\r\nimport { NgModule } from '@angular/core';\r\nimport { TermsConditionsComponent } from './terms-conditions/terms-conditions.component';\r\n\r\n@NgModule({\r\n  declarations: [SafeHtmlPipe, SafeUrlPipe, TermsConditionsComponent],\r\n  imports: [NbCardModule],\r\n  exports: [SafeHtmlPipe, SafeUrlPipe, TermsConditionsComponent],\r\n  bootstrap: [],\r\n})\r\nexport class SharedModule {}\r\n","import { EmployeeNameIdModel } from './../models/branch-employee.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { BranchEmployeeModel } from '../models/branch-employee.model';\n\n@Injectable({ providedIn: 'root' })\nexport class BranchEmployeeService {\n  private branchEmployeeId: string;\n  private branchEmployee = new BehaviorSubject<BranchEmployeeModel>(null);\n  private branchEmployees = new BehaviorSubject<BranchEmployeeModel[]>([]);\n  private branchEmployeeNameIds = new BehaviorSubject<EmployeeNameIdModel[]>([]);\n\n  setBranchEmployeeData(branchEmployee: BranchEmployeeModel) {\n    this.branchEmployee.next(branchEmployee);\n  }\n\n  getBranchEmployeeData() {\n    return this.branchEmployee;\n  }\n\n  deleteBranchEmployeeData() {\n    this.branchEmployee.next(null);\n  }\n\n  setBranchEmployeesData(branchEmployees: BranchEmployeeModel[]) {\n    this.branchEmployees.next(branchEmployees);\n  }\n\n  getBranchEmployeesData() {\n    return this.branchEmployees;\n  }\n\n  deleteBranchEmployeesData() {\n    this.branchEmployees.next([]);\n  }\n\n  setBranchEmployeeNameIdsData(branchEmployeeNameIds: EmployeeNameIdModel[]) {\n    this.branchEmployeeNameIds.next(branchEmployeeNameIds);\n  }\n\n  getBranchEmployeeNameIdsData() {\n    return this.branchEmployeeNameIds;\n  }\n\n  deleteBranchEmployeeNameIdsData() {\n    this.branchEmployeeNameIds.next([]);\n  }\n\n  setBranchEmployeeId(branchEmployeeId: string) {\n    this.branchEmployeeId = branchEmployeeId;\n  }\n\n  getBranchEmployeeId() {\n    return this.branchEmployeeId;\n  }\n\n  deleteBranchEmployeeId() {\n    this.branchEmployeeId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getBranchEmployees(branch: string, type: string) {\n    const data = { api: 'getBranchEmployees', data: { branch, type } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeesForBatch(branch: string, role: string) {\n    const data = { api: 'getBranchEmployeesForBatch', data: { branch, role } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeeNameIds(branch: string, type: string) {\n    const data = { api: 'getBranchEmployeeNameIds', data: { branch, type } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchAllEmployeeNameIds(branch: string) {\n    const data = { api: 'getBranchAllEmployeeNameIds', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeeNameIdsForBatch(branch: string, role: string) {\n    const data = { api: 'getBranchEmployeeNameIdsForBatch', data: { branch, role } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployee(id: string, employee: string) {\n    const data = { api: 'addBranchEmployee', data: { id, employee } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeeRole(branch: string) {\n    const data = { api: 'getBranchEmployeeRole', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeeForSalary(id: string, employee: string) {\n    const data = { api: 'getBranchEmployeeForSalary', data: { id, employee } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  newBranchEmployee(branchEmployee: any) {\n    const data = { api: 'newBranchEmployee', data: branchEmployee };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeeForEditing(id: string, employee: string) {\n    const data = { api: 'getBranchEmployeeForEditing', data: { id, employee } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editBranchEmployee(branchEmployee: BranchEmployeeModel) {\n    const data = { api: 'updateBranchEmployee', data: branchEmployee };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeBranchEmployeeStatus(id: string, status: boolean) {\n    const data = { api: 'changeBranchEmployeeStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteBranchEmployee(id: string) {\n    const data = { api: 'deleteBranchEmployee', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { OnlineExamModel } from './../models/online-exam.model';\nimport { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OnlineExamService {\n  private onlineExamId: string;\n\n  private onlineExam = new BehaviorSubject<OnlineExamModel>(null);\n\n  private date: string = null;\n\n  getSearchDate() {\n    return this.date;\n  }\n\n  setSearchDate(date: string) {\n    this.date = date;\n  }\n\n  setOnlineExamData(onlineExam: OnlineExamModel) {\n    this.onlineExam.next(onlineExam);\n  }\n\n  getOnlineExamData() {\n    return this.onlineExam;\n  }\n\n  deleteOnlineExamData() {\n    this.onlineExam.next(null);\n  }\n\n  setOnlineExamId(onlineExamId: string) {\n    this.onlineExamId = onlineExamId;\n  }\n\n  getOnlineExamId() {\n    return this.onlineExamId;\n  }\n\n  deleteOnlineExamId() {\n    this.onlineExamId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getOnlineExam(id: string) {\n    const data = { api: 'getOnlineExam', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getOnlineExamForEditing(id: string) {\n    const data = { api: 'getOnlineExamForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getOnlineExams(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    subject: string,\n    month: string,\n    year: string,\n  ) {\n    const data = {\n      api: 'getOnlineExams',\n      data: { branch, category, course, batch, subject, month, year },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getOnlineExamsForStudent(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    subject: string,\n    month: string,\n    year: string,\n  ) {\n    const data = {\n      api: 'getOnlineExamsForStudent',\n      data: { branch, category, course, batch, subject, month, year },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  addOnlineExam(onlineExam: any) {\n    const data = { api: 'newOnlineExam', data: onlineExam };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editOnlineExam(onlineExam: OnlineExamModel) {\n    const data = { api: 'editOnlineExam', data: onlineExam };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeOnlineExamStatus(id: string, status: boolean) {\n    const data = { api: 'changeOnlineExamStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteOnlineExam(id: string) {\n    const data = { api: 'deleteOnlineExam', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveOnlineExamResult(studentQuestionAnswers: any, onlineExam: string) {\n    const data = { api: 'saveOnlineExamResult', data: { studentQuestionAnswers, onlineExam } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getOnlineExamResult(id: string) {\n    const data = { api: 'getOnlineExamResult', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import converter from 'number-to-words';\nimport capitalize from 'capitalize';\n\nexport function numberToWords(number: any) {\n  const myNumber: number = +number;\n  const numToWords = converter.toWords(myNumber).replace(',', '').replace('-', ' ').split(' ');\n  const arr = new Array();\n  numToWords.forEach((curNum: any) => {\n    arr.push(capitalize(curNum));\n  });\n  return arr.join(' ');\n}\n","import { StudentCourseInstallmentModel } from './../models/student-course-installment.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { StudentCourseModel } from '../models/student-course.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StudentCourseService {\n  private studentCourseId: string;\n  private studentCourse = new BehaviorSubject<StudentCourseModel>(null);\n\n  setStudentCourseData(studentCourse: StudentCourseModel) {\n    this.studentCourse.next(studentCourse);\n  }\n\n  getStudentCourseData() {\n    return this.studentCourse;\n  }\n\n  deleteStudentCourseData() {\n    this.studentCourse.next(null);\n  }\n\n  setStudentCourseId(studentCourseId: string) {\n    this.studentCourseId = studentCourseId;\n  }\n\n  getStudentCourseId() {\n    return this.studentCourseId;\n  }\n\n  deleteStudentCourseId() {\n    this.studentCourseId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addStudentCourse(studentCourse: any, studentCourseInstallment: any) {\n    const data = { api: 'newStudentCourse', data: { studentCourse, studentCourseInstallment } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourses(branch: string, category: string, student: string) {\n    const data = { api: 'getStudentCourses', data: { branch, category, student } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentAllCourses(branch: string) {\n    const data = { api: 'getStudentAllCourses', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourse(id: string) {\n    const data = { api: 'getStudentCourse', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  checkBatchRollNumber(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    rollNumber: number,\n  ) {\n    const data = {\n      api: 'checkBatchRollNumber',\n      data: { branch, category, course, batch, rollNumber },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseForEditing(id: string) {\n    const data = { api: 'getStudentCourseForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeStudentCourseStatus(id: string, status: boolean) {\n    const data = { api: 'changeStudentCourseStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editStudentCourse(\n    studentCourse: StudentCourseModel,\n    studentCourseInstallment: StudentCourseInstallmentModel,\n  ) {\n    const data = { api: 'updateStudentCourse', data: { studentCourse, studentCourseInstallment } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteStudentCourse(id: string) {\n    const data = { api: 'deleteStudentCourse', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { EmployeeSalaryModel } from '../models/employee-salary.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmployeeSalaryService {\n  private employeeSalaryId: string;\n\n  private employeeSalary = new BehaviorSubject<EmployeeSalaryModel>(null);\n\n  setEmployeeSalaryData(employeeSalary: EmployeeSalaryModel) {\n    this.employeeSalary.next(employeeSalary);\n  }\n\n  getEmployeeSalaryData() {\n    return this.employeeSalary;\n  }\n\n  deleteEmployeeSalaryData() {\n    this.employeeSalary.next(null);\n  }\n\n  setEmployeeSalaryId(employeeSalaryId: string) {\n    this.employeeSalaryId = employeeSalaryId;\n  }\n\n  getEmployeeSalaryId() {\n    return this.employeeSalaryId;\n  }\n\n  deleteEmployeeSalaryId() {\n    this.employeeSalaryId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addEmployeeSalary(employeeSalary: any) {\n    const data = { api: 'newEmployeeSalary', data: employeeSalary };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeEmployeeSalaryStatus(id: string, status: boolean) {\n    const data = { api: 'changeEmployeeSalaryStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBranchEmployeeSalaries(branch: string, employee: string, month: string, year: string) {\n    const data = { api: 'getBranchEmployeeSalaries', data: { branch, employee, month, year } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getMyBranchSalaries(branch: string, month: string, year: string) {\n    const data = { api: 'getMyBranchSalaries', data: { branch, month, year } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getEmployeeSalaries(employee: string, month: string, year: string) {\n    const data = { api: 'getEmployeeSalaries', data: { employee, month, year } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getEmployeeSalary(id: string) {\n    const data = { api: 'getEmployeeSalary', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteEmployeeSalary(id: string) {\n    const data = { api: 'deleteEmployeeSalary', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { AssignmentSubmissionModel } from '../models/assignment-submission.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AssignmentSubmissionService {\r\n  private assignmentSubmissionId: string;\r\n  private assignmentSubmission = new BehaviorSubject<AssignmentSubmissionModel>(null);\r\n\r\n  setAssignmentSubmissionData(assignmentSubmission: AssignmentSubmissionModel) {\r\n    this.assignmentSubmission.next(assignmentSubmission);\r\n  }\r\n\r\n  getAssignmentSubmissionData() {\r\n    return this.assignmentSubmission;\r\n  }\r\n\r\n  deleteAssignmentSubmissionData() {\r\n    this.assignmentSubmission.next(null);\r\n  }\r\n\r\n  setAssignmentSubmissionId(assignmentSubmissionId: string) {\r\n    this.assignmentSubmissionId = assignmentSubmissionId;\r\n  }\r\n\r\n  getAssignmentSubmissionId() {\r\n    return this.assignmentSubmissionId;\r\n  }\r\n\r\n  deleteAssignmentSubmissionId() {\r\n    this.assignmentSubmissionId = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  submitAssignment(assignmentSubmission: FormData) {\r\n    const data = { api: 'submitAssignment', data: assignmentSubmission };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getAssignmentSubmissions(assignment: string) {\r\n    const data = { api: 'getAssignmentSubmissions', data: { assignment } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getSubmissionOfAssignment(assignment: string) {\r\n    const data = { api: 'getSubmissionOfAssignment', data: { assignment } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getAssignmentSubmission(id: string) {\r\n    const data = { api: 'getAssignmentSubmission', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  saveAssignmentSubmissionGrades(submissionGrades: any) {\r\n    const data = { api: 'saveAssignmentSubmissionGrades', data: submissionGrades };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  updateAssignmentSubmission(assignmentSubmission: FormData) {\r\n    const data = { api: 'updateAssignmentSubmission', data: assignmentSubmission };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteAssignmentSubmission(id: string) {\r\n    const data = { api: 'deleteAssignmentSubmission', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nexport const environment = {\n  production: true,\n  backend: '',\n  address: 'Thane, Thane - 400605',\n  gstNo: 'gatn',\n  encKey: 'b417cf7714f5c803ac31ea7ea4ee3a11',\n  aesKey: 'b417cf7714f5c803ac31ea7ea4ee3a11',\n  razorpayKeyId: 'rzp_test_1JFxmyJ8eg8wQZ',\n  zoomLiveURL: '/online-meeting/#/live',\n  SOCKET_ENDPOINT: '/classMasterSocketConnection',\n};\n","import { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { StudentCourseInstallmentReceiptModel } from '../models/student-course-installment-receipt.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StudentCourseInstallmentReceiptService {\n  private studentCourseInstallmentReceiptId: string;\n  private studentCourseInstallmentReceipt = new BehaviorSubject<\n    StudentCourseInstallmentReceiptModel\n  >(null);\n\n  setStudentCourseInstallmentReceiptData(\n    studentCourseInstallmentReceipt: StudentCourseInstallmentReceiptModel,\n  ) {\n    this.studentCourseInstallmentReceipt.next(studentCourseInstallmentReceipt);\n  }\n\n  getStudentCourseInstallmentReceiptData() {\n    return this.studentCourseInstallmentReceipt;\n  }\n\n  deleteStudentCourseInstallmentReceiptData() {\n    this.studentCourseInstallmentReceipt.next(null);\n  }\n\n  setStudentCourseInstallmentReceiptId(studentCourseInstallmentReceiptId: string) {\n    this.studentCourseInstallmentReceiptId = studentCourseInstallmentReceiptId;\n  }\n\n  getStudentCourseInstallmentReceiptId() {\n    return this.studentCourseInstallmentReceiptId;\n  }\n\n  deleteStudentCourseInstallmentReceiptId() {\n    this.studentCourseInstallmentReceiptId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addStudentCourseInstallmentReceipt(studentCourseInstallmentReceipt: any) {\n    const data = {\n      api: 'newStudentCourseInstallmentReceipt',\n      data: studentCourseInstallmentReceipt,\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  generateStudentCourseInstallmentReceipt(order: string, receipt: string) {\n    const data = {\n      api: 'generateStudentCourseInstallmentReceipt',\n      data: {\n        order,\n        receipt,\n      },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeStudentCourseInstallmentReceiptStatus(id: string, status: boolean) {\n    const data = { api: 'changeStudentCourseInstallmentReceiptStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getAllStudentCourseInstallmentReceipts(student: string) {\n    const data = { api: 'getAllStudentCourseInstallmentReceipts', data: { student } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentAllCourseInstallmentReceiptsForStudent(student: string) {\n    const data = { api: 'getStudentAllCourseInstallmentReceiptsForStudent', data: { student } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseInstallmentReceipt(id: string) {\n    const data = {\n      api: 'getStudentCourseInstallmentReceipt',\n      data: { id },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseInstallmentReceiptForEditing(id: string) {\n    const data = {\n      api: 'getStudentCourseInstallmentReceiptForEditing',\n      data: { id },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editStudentCourseInstallmentReceipt(studentCourseInstallmentReceipt: string) {\n    const data = {\n      api: 'editStudentCourseInstallmentReceipt',\n      data: studentCourseInstallmentReceipt,\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteStudentCourseInstallmentReceipt(id: string) {\n    const data = {\n      api: 'deleteStudentCourseInstallmentReceipt',\n      data: { id },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { CouponModel } from '../models/coupon.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\n\r\ninterface Coupon {\r\n  code: string;\r\n  discount: string;\r\n  discountAmount: number;\r\n  totalAmount: string;\r\n  discountType?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CouponService {\r\n  private discountTypes: string[] = ['percentage', 'amount'];\r\n\r\n  private appliedCoupon: Coupon;\r\n  private coupon = new BehaviorSubject<CouponModel>(null);\r\n  private couponId: string;\r\n\r\n  getDiscountTypes() {\r\n    return this.discountTypes;\r\n  }\r\n\r\n  setCouponId(couponId: string) {\r\n    this.couponId = couponId;\r\n  }\r\n\r\n  getCouponId() {\r\n    return this.couponId;\r\n  }\r\n\r\n  deleteCouponId() {\r\n    this.couponId = null;\r\n  }\r\n\r\n  setAppliedCoupon(appliedCoupon: Coupon) {\r\n    this.appliedCoupon = appliedCoupon;\r\n  }\r\n\r\n  getAppliedCoupon() {\r\n    return this.appliedCoupon;\r\n  }\r\n\r\n  deleteAppliedCoupon() {\r\n    this.appliedCoupon = null;\r\n  }\r\n\r\n  setCouponData(coupon: CouponModel) {\r\n    this.coupon.next(coupon);\r\n  }\r\n\r\n  getCouponData() {\r\n    return this.coupon;\r\n  }\r\n\r\n  deleteCouponData() {\r\n    this.coupon.next(null);\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  getCoupons() {\r\n    const data = { api: 'getCoupons', data: {} };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getCoupon(id: string) {\r\n    const data = { api: 'getCoupon', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getCouponForEditing(id: string) {\r\n    const data = { api: 'getCouponForEditing', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  addCoupon(coupon: any) {\r\n    const data = { api: 'newCoupon', data: coupon };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  editCoupon(coupon: any) {\r\n    const data = { api: 'updateCoupon', data: coupon };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteCoupon(id: string) {\r\n    const data = { api: 'deleteCoupon', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  changeCouponStatus(id: string, status: boolean) {\r\n    const data = { api: 'changeCouponStatus', data: { id, status } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  checkCoupon(code: string) {\r\n    const data = { api: 'checkCoupon', data: { code } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  validateCoupon(code: string) {\r\n    const data = { api: 'validateCoupon', data: { code } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { InstituteBillingModel } from './../models/institute-billing.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InstituteBillingService {\n  billingDetails = new BehaviorSubject<InstituteBillingModel>(null);\n\n  setBilling(billingDetails: InstituteBillingModel) {\n    this.billingDetails.next(billingDetails);\n  }\n\n  getBilling() {\n    return this.billingDetails;\n  }\n\n  deleteBilling() {\n    this.billingDetails.next(null);\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  saveBillingDetails(billingDetails: any) {\n    const data = { api: 'saveBillingDetails', data: billingDetails };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBillingDetails(branch: string) {\n    const data = { api: 'getBillingDetails', data: { branch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-terms-conditions',\n  templateUrl: './terms-conditions.component.html',\n  styleUrls: ['./terms-conditions.component.scss'],\n})\nexport class TermsConditionsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<nb-card>\n  <nb-card-body>\n    <h1>General Terms & Conditions</h1>\n    <h5>\n      <h6>\n        These Advertising Terms and Conditions (the “Terms”) are entered into by and between\n        theclassmaster.in, an SHUBHAM ENTERPRISES brand, and the Client subscribing to The Class\n        Master services, and govern the terms of Client’s usage of The Class Master services\n        including but not limited to Listings and related information on The Class Master’s\n        websites; mobile applications; customer-care no. +919920589037, and other properties. The\n        Terms are effective as of the date that you subscribe to the services, and that as the\n        signer of this Agreement, you represent that you are authorized to sign on behalf of and\n        bind the Client to the obligations under the Agreement. The Agreement (including its\n        Purchase Order) becomes void if not accepted within the calendar month in which the\n        Agreement was sent to Client by Class Master (“Agreement Expiration Date”).\n      </h6>\n\n      <ol>\n        <li>\n          <strong>Listing Account</strong>\n          <p>\n            The Class Master will establish a Listing account enabling Client to purchase listing\n            services (“The Class Master listing”) that The Class Master makes available to Client in\n            connection with The Class Master’s websites, mobile applications, and other properties,\n            including properties set forth in a Purchase Order (“Services”). Each such purchase will\n            be set forth in a purchase order agreed to in writing by both parties which sets forth\n            the The Class Master listings being purchased, applicable fees, the duration of the paid\n            listing commitment (the “Commitment Period”), renewal terms, and the date that paid\n            listing will commence, among other information (“Purchase Order”). Each Purchase Order\n            is governed by and incorporated into the Terms, and any conflict between them will be\n            resolved in favor of the Purchase Order. Client’s initial Purchase Order is attached to\n            these Terms\n          </p>\n        </li>\n\n        <li>\n          <strong> The Class Master Listing </strong>\n          <p>\n            The Class Master Listing encompass a range of different advertising programs.\n            <br />\n            The “Starter Kit” allows Client to access advanced features in connection with its\n            business profile page, such as posting multiple programs, photo & video, and dedicated\n            account support. As it develops new advertising features, The Class Master may from time\n            to time replace any of the foregoing features with features of substantially similar\n            value.\n          </p>\n        </li>\n\n        <li>\n          <strong> Fees and Payment </strong>\n          <p>\n            Client will pay The Class Master the fees specified in each Purchase Order for the\n            duration of its term. The fees are fixed for the duration of the commitment period\n            specified in the applicable Purchase Order, but may be modified by The Class Master\n            thereafter by providing one month’s prior written notice to Client. The fees are net of\n            any taxes Client may be required to pay in its taxing jurisdiction. Payments are due in\n            advance of the period for which they apply, or as otherwise set forth in the Purchase\n            Order. Unpaid amounts or errors may be billed in subsequent invoices. If Client’s\n            payment method fails or Client’s account is past due, The Class Master may collect past\n            due amounts using other collection mechanisms, and Client agrees to pay all expenses\n            associated with such collection, including reasonable attorneys’ fees.\n            <br />\n            Cancellation/Refund Policy: While availing any of the payment method/s available on the\n            Website, The Class Master will not be responsible or assume any liability whatsoever in\n            respect of any loss or damage arising directly or indirectly to you. All payments made\n            on the Website, including payments made toward registration for classes, are\n            non-refundable. In the event payment is deducted from the User’s account with\n            non-completion of the booking, the exact amount shall be refunded to the User via the\n            same mode of payment within 3-5 working days. All commercial terms are on a\n            principal-to-principal basis between the Merchant and the users and The Class Master’s\n            payment facility is merely used to facilitate the completion of the transaction.\n            Transaction charges, not limited to payment gateway charges, shall be applicable, unless\n            explicitly waived off by The Class Master.\n            <br />\n            IF CLIENT PROVIDES The Class Master WITH CREDIT CARD, DEBIT CARD, OR BANK ACCOUNT\n            INFORMATION, CLIENT AUTHORIZES The Class Master TO USE SUCH PAYMENT INFORMATION TO\n            AUTOMATICALLY CHARGE CLIENT ON A RECURRING BASIS TO COLLECT ALL FEES DUE HEREUNDER.\n            CLIENT REPRESENTS THAT HE OR SHE IS AUTHORIZED TO INCUR CHARGES AGAINST THE PAYMENT CARD\n            USED TO PURCHASE The Class Master ADS. THE FORM OF PAYMENT CANNOT BE CHANGED OR ALTERED\n            UNLESS ALL AMOUNTS DUE UNDER THE TERMS HAVE BEEN PAID IN FULL OR OTHERWISE AGREED TO BY\n            THE PARTIES IN WRITING.\n          </p>\n        </li>\n\n        <li>\n          <strong> Representations and Warranties </strong>\n          <p>\n            Each party represents and warrants to the other that it is duly organized, validly\n            existing, and in good standing under the laws of the jurisdiction in which it was\n            organized; all contact and entity information is complete, correct and current, and the\n            execution and delivery of the Terms, and the performance of the transactions\n            contemplated hereby, are within its corporate powers, and have been duly authorized by\n            all necessary corporate action.\n            <br />\n            Client represents and warrants to The Class Master that any information or materials\n            that Client provides in connection with The Class Master listings will (a) be true and\n            complete, (b) not contain any material which violates The Class Master’s content\n            guidelines or which is otherwise unlawful, defamatory or obscene, or which infringes or\n            violates any third-party rights (including any intellectual property rights or privacy\n            or publicity rights) or which may encourage a criminal offense or otherwise give rise to\n            civil liability and (c) comply with all applicable laws and regulations in its\n            performance of the Terms (including all applicable privacy / data protection laws and\n            regulations and laws related to Promotions). “Promotions” are any contest, sweepstakes,\n            coupon or other promotion appearing on or promoted through the Site by Client. The Class\n            Master reserves the right to reject or remove any Advertising Materials at its sole\n            discretion, and to alter any Advertising Materials to conform to technical\n            specifications.\n            <br />\n            Client further represents and warrants to The Class Master that Client will not, and\n            will not authorize or induce any other party, to: (a) generate automated, fraudulent or\n            otherwise invalid inquiries, conversions or other actions; (b) use any automated means\n            or form of scraping or data extraction to access, query or otherwise collect Class\n            Master content and reviews from the Site, except as expressly permitted by The Class\n            Master or (c) use any The Class Master trademarks in any manner without The Class\n            Master’s prior written consent. All rights not expressly granted to Client hereunder are\n            reserved by The Class Master.\n          </p>\n        </li>\n\n        <li>\n          <strong> Information About and Use of the Site </strong>\n          <p>\n            The Site allows consumers to post reviews about businesses like Client’s. The Site\n            employs automated software to help it showcase the most relevant and reliable reviews\n            while suppressing others. Client’s purchase of The Class Master Ads will not influence\n            the automated software, or otherwise allow or enable Client, directly or indirectly, to\n            remove, alter or reorder the reviews on the Site.\n          </p>\n        </li>\n\n        <li>\n          <strong> Termination </strong>\n\n          <p>\n            Each Purchase Order will expire at the end of the Commitment Period unless (i) otherwise\n            terminated earlier under these Terms or (ii) the Purchase Order contains a renewal\n            period that automatically extends the term of the Purchase Order beyond the Commitment\n            Period (collectively the “PO Term”). Client must provide written notice (an email to\n            Client’s assigned The Class Master account representative is permissible) to terminate a\n            Purchase Order on or before the 15th day of the month in order for the Purchase Order to\n            terminate at the end of that month. If Client provides written notice after the 15th day\n            of the month, then the Purchase Order will terminate at the end of the following month.\n            Unless otherwise terminated as provided under the Terms, the Terms will automatically\n            expire three (3) months after the termination or expiration of the last surviving\n            Purchase Order.\n            <br />\n            IF CLIENT TERMINATES A PURCHASE ORDER BEFORE THE END OF THE COMMITMENT PERIOD, CLIENT\n            AGREES TO PAY ANY AND ALL EARLY TERMINATION FEES SET FORTH IN THE PURCHASE ORDER(S),\n            RECOGNIZING THAT The Class Master BEARS CERTAIN UP-FRONT COSTS, AND THAT THERE IS AN\n            IMPLIED PRICING DISCOUNT BASED ON THE LENGTH OF CLIENT’S CHOSEN COMMITMENT PERIOD.\n            <br />\n            The Class Master may terminate any Purchase Order or the Terms at any time for any or no\n            reason without liability, effective immediately, by providing written notice to Client.\n            In the event of such termination, Client will immediately pay all unpaid The Class\n            Master Ad fees through the date of termination, and The Class Master will reimburse any\n            fees that were prepaid for The Class Master Ads to be rendered after the date of such\n            termination.\n            <br />\n          </p>\n        </li>\n\n        <li>\n          <strong> The Class Master’S DISCLAIMER OF WARRANTIES </strong>\n          <p>\n            CLIENT ACKNOWLEDGES AND AGREES THAT The Class Master SERVICES ARE PROVIDED TO CLIENT ON\n            AN “AS IS”, “WITH ALL FAULTS” AND “AS AVAILABLE” BASIS. The Class Master MAKES NO\n            WARRANTIES, EITHER EXPRESS OR IMPLIED, ABOUT THE The Class Master LISTING AND EXPRESSLY\n            DISCLAIMS THE WARRANTY OF MERCHANTABILITY AND WARRANTY OF FITNESS FOR A PARTICULAR\n            PURPOSE. FURTHERMORE, TO THE FULLEST EXTENT PERMITTED BY LAW, The Class Master\n            SPECIFICALLY DISCLAIMS ALL WARRANTIES AND GUARANTEES REGARDING (I) THE PERFORMANCE,\n            QUALITY AND RESULTS FOR THE SERVICE, (II) PAGE VIEWS, CONVERSIONS OR OTHER PERFORMANCE\n            OR RESULTS FOR THE SERVICE, (III) THE ACCURACY OF THE INFORMATION THAT The Class Master\n            PROVIDES IN CONNECTION WITH THE SITE OR The Class Master LISTING (E.G. REACH, SIZE OF\n            AUDIENCE, DEMOGRAPHICS OR OTHER PURPORTED CHARACTERISTICS OF AUDIENCE), (IV) The Class\n            Master’S ABILITY TO TARGET ADS TO OR IN CONNECTION WITH SPECIFIC USERS, TYPES OF USERS,\n            USER QUERIES, OR OTHER USER BEHAVIORS. The Class Master SHALL NOT BE LIABLE FOR\n            NON-PERFORMANCE DUE TO CAUSES BEYOND ITS REASONABLE CONTROL.\n          </p>\n        </li>\n\n        <li>\n          <strong> LIMITATIONS OF LIABILITY </strong>\n          <p>\n            FOR ALL CLAIMS ARISING FROM OR IN CONNECTION WITH A PURCHASE ORDER, The Class Master\n            LISTING, OR THE TERMS THAT ARE NOT EXPRESSLY ADDRESSED IN THIS SECTION TITLED\n            “LIMITATIONS OF LIABILITY”, The Class Master’S MAXIMUM LIABILITY AND CLIENT’S EXCLUSIVE\n            REMEDY IS THE AGGREGATE FEES PAYABLE TO The Class Master HEREUNDER DURING THE SPECIFIED\n            COMMITMENT PERIOD EXCEPT WHERE AND TO THE EXTENT PROHIBITED BY APPLICABLE LAW.\n            <br />\n            NEITHER PARTY NOR ITS AFFILIATES WILL BE LIABLE FOR ANY INDIRECT, INCIDENTAL,\n            CONSEQUENTIAL, SPECIAL, OR EXEMPLARY DAMAGES (INCLUDING LOSS OF PROFITS OR REVENUE, OR\n            INTERRUPTION OF BUSINESS) ARISING OUT OF OR RELATED TO A PURCHASE ORDER, THE Class\n            Master LISTING, THE SITE, OR THESE TERMS, REGARDLESS OF THE THEORY OF LIABILITY, EVEN IF\n            A PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n          </p>\n\n          <div>\n            The Class Master does not represent in any manner that:\n            <ul>\n              <li>The information, data or contents of the Website are accurate.</li>\n              <li>\n                The Website will be available at all times and will operate error free or that there\n                will be uninterrupted access and service.\n              </li>\n              <li>\n                The integrity of the information on the Website or information you upload will be\n                maintained.\n              </li>\n              <li>We endorses any of the views of any of the users who may have posted content.</li>\n              <li>\n                We have verified or guarantee the quality of services or representations made by any\n                user of the Website.\n              </li>\n              <li>We have verified the credit worthiness of any user.</li>\n              <li>\n                We have screened or verified any of the information posted herein and The Website or\n                any content is free from viruses or other malware.\n              </li>\n            </ul>\n          </div>\n\n          <br />\n        </li>\n\n        <li>\n          <strong> Indemnification </strong>\n          <p>\n            Client will indemnify, defend, and hold The Class Master and its officers, directors,\n            agents, and employees harmless from and against any and all claims, actions, losses,\n            damages, liabilities, costs and expenses (including but not limited to attorneys’ fees\n            and court costs) (collectively a “Third Party Claim”) arising out of or in connection\n            with (i) the Advertising Materials, Client Instructions, or Client’s use of The Class\n            Master Ads, (ii) any breach of representations or warranties provided under these Terms\n            by Client in Section IV, (iii) any Promotion, including any claims for any violation by\n            the Promotion of any applicable law, rule or regulation, (iv) Client’s products or\n            services or the provision thereof to end users. The Class Master will notify Client\n            promptly of any Third Party Claim for which it seeks indemnification and will permit\n            Client to control the defense of such Third Party Claim with counsel chosen by Client;\n            provided, that Client will not enter into any settlement that contains any admission of\n            or stipulation to any guilt, fault, liability or wrongdoing on the part of The Class\n            Master without Class Master’s prior written consent.\n          </p>\n        </li>\n\n        <li>\n          <strong> Force Majeure </strong>\n          <p>\n            In no event shall The Class Master be liable for any acts beyond our control or for any\n            acts of god.\n          </p>\n        </li>\n\n        <li>\n          <strong> Choice of Law and Arbitration </strong>\n          <p>\n            Any claim, controversy or dispute arising out of or relating to the Terms (“Claim”)\n            shall be settled under the laws of Indian courts subject to laws of Republic of India.\n            In the event of any dispute of whatever nature, such dispute shall be settled in good\n            faith between the parties. In case, such dispute cannot be resolved by negotiation\n            within 30 days, such dispute shall be referred to a binding arbitration in accordance\n            with the provisions of the Arbitration and Conciliation Act 1996. The place of\n            arbitration shall be Delhi, India. In case of the dispute requiring intervention of\n            courts, courts in Delhi, India alone shall have exclusive jurisdiction.\n            <br />\n            XII. In no event shall The Class Master be liable for any loss of profits (anticipated\n            or real), loss of business, loss of reputation, loss of data, loss of goodwill, any\n            business interruption or any direct, indirect, special, incidental, consequential,\n            punitive, tort or other damages, however caused, whether or not we have been advised of\n            the possibility of such damages.\n          </p>\n        </li>\n\n        <li>\n          <strong> Miscellaneous </strong>\n          <p>\n            (a) The Terms and its exhibits are expressly limited to and made conditional upon\n            Client’s acceptance of its terms and conditions before the Expiration Date. Any of\n            Client’s terms or conditions which are in addition to or different from those contained\n            in or added by way of interlineation to the Terms or any Purchase Order as originally\n            provided to Client by The Class Master which are not separately expressly agreed to in\n            writing by both parties are deemed material and are hereby objected to and rejected by\n            The Class Master. No conditions, printed or otherwise, appearing on other contracts,\n            orders or copy instructions which conflict with, vary, or add to these Terms will be\n            binding on The Class Master, and any conflicting or additional terms contain in any\n            other documents or oral discussions are void. The Terms embody the entire and exclusive\n            agreement between the parties respecting the subject matter of herein, and supersede any\n            and all prior related oral, emailed or written representations and agreements between\n            the parties. No statements or promises by either party have been relied upon in entering\n            into these Terms, except as expressly set forth herein.\n            <br />\n            (b) Anyone agreeing to the Terms on behalf of Client represents and warrants that it has\n            full legal power and authority to enter into these Terms, perform its obligations\n            hereunder, and authorize the fee payments set forth in the Purchase Order(s).\n            <br />\n            (c) Notices under these Terms must be in writing and sent via facsimile, registered or\n            certified mail or commercial courier to the parties at their respective addresses set\n            forth herein.\n            <br />\n            (d) The Terms may not be amended or modified except as agreed upon in writing by the\n            parties. No provision in the Terms may be waived, except pursuant to a writing executed\n            by the party against whom the waiver is sought to be enforced. Client may not assign any\n            rights or obligations under the Terms without The Class Master’s prior consent, and any\n            purported assignment by Client shall be void. If any provision of the Terms is held to\n            be invalid or unenforceable, the parties will substitute for the affected provision a\n            valid or enforceable provision that approximates the intent and economic effect of the\n            affected provision. Sections VII, VIII, IX, X and XI of the Terms will survive any\n            termination of the Term.\n          </p>\n        </li>\n      </ol>\n    </h5>\n  </nb-card-body>\n</nb-card>\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  userProfile: any;\n\n  setUserProfile(profile: any) {\n    this.userProfile = profile;\n  }\n\n  getUserProfile() {\n    return this.userProfile;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  checkUser(email: string) {\n    const data = { api: 'checkUser', data: { email } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changePassword(password: any) {\n    const data = { api: 'changePassword', data: password };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveProfile(profile: any) {\n    const data = { api: 'saveProfile', data: profile };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getProfile() {\n    const data = { api: 'getProfile', data: {} };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","/*!\n * Number-To-Words util\n * @version v1.2.4\n * @link https://github.com/marlun78/number-to-words\n * @author Martin Eneqvist (https://github.com/marlun78)\n * @contributors Aleksey Pilyugin (https://github.com/pilyugin),Jeremiah Hall (https://github.com/jeremiahrhall),Adriano Melo (https://github.com/adrianomelo),dmrzn (https://github.com/dmrzn)\n * @license MIT\n */\n!function(){\"use strict\";var e=\"object\"==typeof self&&self.self===self&&self||\"object\"==typeof global&&global.global===global&&global||this,t=9007199254740991;function f(e){return!(\"number\"!=typeof e||e!=e||e===1/0||e===-1/0)}function l(e){return\"number\"==typeof e&&Math.abs(e)<=t}var n=/(hundred|thousand|(m|b|tr|quadr)illion)$/,r=/teen$/,o=/y$/,i=/(zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)$/,s={zero:\"zeroth\",one:\"first\",two:\"second\",three:\"third\",four:\"fourth\",five:\"fifth\",six:\"sixth\",seven:\"seventh\",eight:\"eighth\",nine:\"ninth\",ten:\"tenth\",eleven:\"eleventh\",twelve:\"twelfth\"};function h(e){return n.test(e)||r.test(e)?e+\"th\":o.test(e)?e.replace(o,\"ieth\"):i.test(e)?e.replace(i,a):e}function a(e,t){return s[t]}var u=10,d=100,p=1e3,v=1e6,b=1e9,y=1e12,c=1e15,g=9007199254740992,m=[\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"],w=[\"zero\",\"ten\",\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"];function x(e,t){var n,r=parseInt(e,10);if(!f(r))throw new TypeError(\"Not a finite number: \"+e+\" (\"+typeof e+\")\");if(!l(r))throw new RangeError(\"Input is not a safe number, it’s either too large or too small.\");return n=function e(t){var n,r,o=arguments[1];if(0===t)return o?o.join(\" \").replace(/,$/,\"\"):\"zero\";o||(o=[]);t<0&&(o.push(\"minus\"),t=Math.abs(t));t<20?(n=0,r=m[t]):t<d?(n=t%u,r=w[Math.floor(t/u)],n&&(r+=\"-\"+m[n],n=0)):t<p?(n=t%d,r=e(Math.floor(t/d))+\" hundred\"):t<v?(n=t%p,r=e(Math.floor(t/p))+\" thousand,\"):t<b?(n=t%v,r=e(Math.floor(t/v))+\" million,\"):t<y?(n=t%b,r=e(Math.floor(t/b))+\" billion,\"):t<c?(n=t%y,r=e(Math.floor(t/y))+\" trillion,\"):t<=g&&(n=t%c,r=e(Math.floor(t/c))+\" quadrillion,\");o.push(r);return e(n,o)}(r),t?h(n):n}var M={toOrdinal:function(e){var t=parseInt(e,10);if(!f(t))throw new TypeError(\"Not a finite number: \"+e+\" (\"+typeof e+\")\");if(!l(t))throw new RangeError(\"Input is not a safe number, it’s either too large or too small.\");var n=String(t),r=Math.abs(t%100),o=11<=r&&r<=13,i=n.charAt(n.length-1);return n+(o?\"th\":\"1\"===i?\"st\":\"2\"===i?\"nd\":\"3\"===i?\"rd\":\"th\")},toWords:x,toWordsOrdinal:function(e){return h(x(e))}};\"undefined\"!=typeof exports?(\"undefined\"!=typeof module&&module.exports&&(exports=module.exports=M),exports.numberToWords=M):e.numberToWords=M}();","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AttendanceService {\n  constructor(private httpService: HttpService) {}\n\n  getStudents(branch: string, category: string, course: string, batch: string, lecture: string) {\n    const data = {\n      api: 'getStudentsForAttendance',\n      data: { branch, category, course, batch, lecture },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveAttendance(attendance: any) {\n    const data = { api: 'saveAttendance', data: attendance };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseAttendance(\n    subject: string,\n    month: string,\n    year: string,\n    student: string,\n    studentCourse: string,\n  ) {\n    const data = {\n      api: 'getStudentCourseAttendance',\n      data: { subject, month, year, student, studentCourse },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getAttendance(\n    month: string,\n    year: string,\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    student: string,\n  ) {\n    const data = {\n      api: 'getAttendance',\n      data: { month, year, branch, category, course, batch, student },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { OnlineExamQuestionModel } from './../models/online-exam-question.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OnlineExamQuestionService {\r\n  private onlineExamQuestionId: string;\r\n\r\n  private onlineExamQuestion = new BehaviorSubject<OnlineExamQuestionModel>(null);\r\n\r\n  setOnlineExamQuestionData(onlineExamQuestion: OnlineExamQuestionModel) {\r\n    this.onlineExamQuestion.next(onlineExamQuestion);\r\n  }\r\n\r\n  getOnlineExamQuestionData() {\r\n    return this.onlineExamQuestion;\r\n  }\r\n\r\n  deleteOnlineExamQuestionData() {\r\n    this.onlineExamQuestion.next(null);\r\n  }\r\n\r\n  setOnlineExamQuestionId(onlineExamQuestionId: string) {\r\n    this.onlineExamQuestionId = onlineExamQuestionId;\r\n  }\r\n\r\n  getOnlineExamQuestionId() {\r\n    return this.onlineExamQuestionId;\r\n  }\r\n\r\n  deleteOnlineExamQuestionId() {\r\n    this.onlineExamQuestionId = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  newOnlineExamQuestion(contents: FormData) {\r\n    const data = { api: 'newOnlineExamQuestion', data: contents };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getOnlineExamQuestion(id: string) {\r\n    const data = { api: 'getOnlineExamQuestion', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getOnlineExamQuestions(id: string) {\r\n    const data = { api: 'getOnlineExamQuestions', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getOnlineExamQuestionsForStudent(id: string) {\r\n    const data = { api: 'getOnlineExamQuestionsForStudent', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  changeOnlineExamQuestionStatus(id: string, status: boolean) {\r\n    const data = { api: 'changeOnlineExamQuestionStatus', data: { id, status } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  editOnlineExamQuestion(question: any) {\r\n    const data = { api: 'editOnlineExamQuestion', data: question };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  deleteOnlineExamQuestion(id: string) {\r\n    const data = { api: 'deleteOnlineExamQuestion', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutService {\r\n  private checkoutDetails: any;\r\n\r\n  setCheckoutDetails(checkoutDetails: string) {\r\n    this.checkoutDetails = checkoutDetails;\r\n  }\r\n\r\n  getCheckoutDetails() {\r\n    return this.checkoutDetails;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n}\r\n","<nb-card class=\"checkout\">\r\n  <nb-card-header>\r\n    <button class=\"float-right\" nbButton size=\"small\" (click)=\"onClose()\">\r\n      <nb-icon icon=\"close\"></nb-icon>\r\n    </button>\r\n    <h3>Checkout</h3>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-bordered\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Plan Type:</th>\r\n            <td>{{ checkoutData.planType | uppercase }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Package Type:</th>\r\n            <td>{{ checkoutData.packageType | uppercase }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Amount:</th>\r\n            <td>{{ getAmount(checkoutData.amount) }}/-</td>\r\n          </tr>\r\n          <ng-container *ngIf=\"checkoutData.planType === 'membership'\">\r\n            <tr *ngIf=\"!coupon\">\r\n              <th>Coupon Code:</th>\r\n              <td>\r\n                <nb-form-field>\r\n                  <input\r\n                    type=\"text\"\r\n                    nbInput\r\n                    fullWidth\r\n                    (input)=\"changeCouponCode($event.target.value)\"\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    nbSuffix\r\n                    nbButton\r\n                    size=\"small\"\r\n                    ghost\r\n                    nbTooltip=\"Apply Coupon Now\"\r\n                    (click)=\"applyCoupon()\"\r\n                    status=\"success\"\r\n                  >\r\n                    <nb-icon icon=\"paper-plane-outline\"> </nb-icon>\r\n                  </button>\r\n                </nb-form-field>\r\n              </td>\r\n            </tr>\r\n            <tr *ngIf=\"coupon\">\r\n              <th>Coupon Code:</th>\r\n              <td>{{ coupon.code }}</td>\r\n            </tr>\r\n            <tr *ngIf=\"coupon\">\r\n              <th>Discount:</th>\r\n              <td>{{ coupon.discount }}</td>\r\n            </tr>\r\n            <tr *ngIf=\"coupon\">\r\n              <th>Discount Amount:</th>\r\n              <td>{{ getAmount(coupon.discountAmount) }}/-</td>\r\n            </tr>\r\n            <tr *ngIf=\"coupon\">\r\n              <th>Total Amount:</th>\r\n              <td>{{ getAmount(coupon.totalAmount) }}/-</td>\r\n            </tr>\r\n          </ng-container>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </nb-card-body>\r\n  <nb-card-footer>\r\n    <button\r\n      type=\"button\"\r\n      class=\"float-right\"\r\n      nbButton\r\n      size=\"small\"\r\n      status=\"primary\"\r\n      (click)=\"checkout()\"\r\n    >\r\n      Checkout\r\n    </button>\r\n  </nb-card-footer>\r\n</nb-card>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { NbDialogRef, NbToastrService } from '@nebular/theme';\r\nimport { CheckoutService } from '../../services/checkout.service';\r\nimport { CouponService } from '../../services/coupon.service';\r\nimport { PaymentService } from '../../services/payment.service';\r\n\r\ninterface Coupon {\r\n  code: string;\r\n  discount: string;\r\n  discountAmount: number;\r\n  totalAmount: string;\r\n  discountType?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-checkout',\r\n  templateUrl: './checkout.component.html',\r\n  styleUrls: ['./checkout.component.scss'],\r\n})\r\nexport class CheckoutComponent implements OnInit {\r\n  checkoutData: any;\r\n\r\n  couponCode: string;\r\n\r\n  coupon: Coupon;\r\n\r\n  constructor(\r\n    private checkoutService: CheckoutService,\r\n    private couponService: CouponService,\r\n    private paymentService: PaymentService,\r\n    private toastrService: NbToastrService,\r\n    protected ref: NbDialogRef<CheckoutComponent>,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.couponCode = null;\r\n    this.checkoutData = this.paymentService.getPaymentDetails();\r\n  }\r\n\r\n  onClose() {\r\n    this.ref.close({ status: false });\r\n  }\r\n\r\n  changeCouponCode(code: string) {\r\n    this.couponCode = code;\r\n  }\r\n\r\n  calculateCouponDiscount(coupon: Coupon) {\r\n    let amount = this.checkoutData.amount;\r\n    let discountAmount = coupon.discountAmount;\r\n    if (coupon.discountType === 'percentage') {\r\n      discountAmount = (amount / 100) * coupon.discountAmount;\r\n    }\r\n    amount = amount - discountAmount;\r\n\r\n    this.coupon = {\r\n      code: coupon.code,\r\n      discount: `${\r\n        coupon.discountType === 'percentage'\r\n          ? coupon.discountAmount\r\n          : this.getAmount(coupon.discountAmount)\r\n      }${coupon.discountType === 'percentage' ? '%' : '/-'}`,\r\n      discountAmount: discountAmount,\r\n      totalAmount: amount,\r\n    };\r\n\r\n    this.couponService.setAppliedCoupon(this.coupon);\r\n  }\r\n\r\n  applyCoupon() {\r\n    if (this.couponCode) {\r\n      this.couponService.validateCoupon(this.couponCode).subscribe(\r\n        (coupon: Coupon) => {\r\n          this.calculateCouponDiscount(coupon);\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  getAmount(amount: any) {\r\n    amount = parseFloat(amount.toString());\r\n    return amount.toFixed(2).toString();\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  checkout() {\r\n    this.ref.close({ status: true });\r\n  }\r\n}\r\n","export class MembershipPlanModel {\r\n  constructor(\r\n    public _id: string,\r\n    public name: string,\r\n    public duration: string,\r\n    public price: string,\r\n    public status: boolean,\r\n  ) {}\r\n}\r\n","import { BatchModel } from '../models/batch.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class BatchService {\n  private batches = new BehaviorSubject<BatchModel[]>([]);\n  private batch = new BehaviorSubject<BatchModel>(null);\n  private batchId: string;\n\n  setBatchId(batchId: string) {\n    this.batchId = batchId;\n  }\n\n  getBatchId() {\n    return this.batchId;\n  }\n\n  deleteBatchId() {\n    this.batchId = null;\n  }\n\n  setBatchesData(batches: BatchModel[]) {\n    this.batches.next(batches);\n  }\n\n  getBatchesData() {\n    return this.batches;\n  }\n\n  deleteBatchesData() {\n    this.batches.next([]);\n  }\n\n  setBatchData(batch: BatchModel) {\n    this.batch.next(batch);\n  }\n\n  getBatchData() {\n    return this.batch;\n  }\n\n  deleteBatchData() {\n    this.batch.next(null);\n  }\n\n  getBatchName(batchId: string) {\n    return this.batches.pipe(\n      map((batches: BatchModel[]) => {\n        const batch = batches.find((curBatch: BatchModel) => curBatch._id === batchId);\n        if (batch) {\n          return batch.basicDetails.batchName;\n        }\n        return '--';\n      }),\n    );\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getBatches(branch: string, category: string, course: any) {\n    const data = { api: 'getBatches', data: { branch, category, course } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBatch(id: string) {\n    const data = { api: 'getBatch', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBatchSubjects(course: string, batch: string) {\n    const data = { api: 'getBatchSubjects', data: { course, batch } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getBatchForEditing(id: string) {\n    const data = { api: 'getBatchForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  addBatch(batch: any) {\n    const data = { api: 'newBatch', data: batch };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editBatch(batch: any) {\n    const data = { api: 'updateBatch', data: batch };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteBatch(id: string) {\n    const data = { api: 'deleteBatch', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeBatchStatus(id: string, status: boolean) {\n    const data = { api: 'changeBatchStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","module.exports = function (string, preserve) {\n  if (!preserve) {\n    string = string.toLowerCase();\n  }\n  return string.charAt(0).toUpperCase() + string.substring(1);\n}\n\nmodule.exports.words = function (string, preserve) {\n  if (!preserve) {\n    string = string.toLowerCase();\n  }\n  return string.replace(/(?!^[0-9])(^|[^a-zA-Z\\u00C0-\\u017F\\u0400-\\u04FF'])([a-zA-Z\\u00C0-\\u017F\\u0400-\\u04FF])/g, function (m) {\n    return m.toUpperCase()\n  })\n}\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InstituteKeysService {\n  private institutePaymentAccessKey: string;\n\n  setLocalInstitutePaymentAccessKey(institutePaymentAccessKey: string) {\n    this.institutePaymentAccessKey = institutePaymentAccessKey;\n  }\n\n  getLocalInstitutePaymentAccessKey() {\n    return this.institutePaymentAccessKey;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getInstituteKeys() {\n    const data = {\n      api: 'getInstituteKeys',\n      data: {},\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getInstitutePaymentAccessKey(branch: string) {\n    const data = {\n      api: 'getInstitutePaymentAccessKey',\n      data: { branch },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveInstitutePaymentGatewayKeys(keys: string) {\n    const data = {\n      api: 'saveInstitutePaymentGatewayKeys',\n      data: { keys },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveInstituteZoomKeys(keys: any) {\n    const data = {\n      api: 'saveInstituteZoomKeys',\n      data: keys,\n    };\n\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  generateZoomAuthToken() {\n    const data = {\n      api: 'generateZoomAuthToken',\n    };\n\n    return this.httpService.httpGet(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getZoomAuthLink() {\n    const data = {\n      api: 'getZoomAuthLink',\n      data: {},\n    };\n\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { EmployeeModel } from '../models/employee.model';\n\n@Injectable({ providedIn: 'root' })\nexport class EmployeeService {\n  private employeeType: string;\n\n  private employeeId: string;\n\n  private employee = new BehaviorSubject<EmployeeModel>(null);\n\n  setEmployeeData(employee: EmployeeModel) {\n    this.employee.next(employee);\n  }\n\n  getEmployeeData() {\n    return this.employee;\n  }\n\n  deleteEmployeeData() {\n    this.employee.next(null);\n  }\n\n  setEmployeeType(employeeType: string) {\n    this.employeeType = employeeType;\n  }\n\n  getEmployeeType() {\n    return this.employeeType;\n  }\n\n  deleteEmployeeType() {\n    this.employeeType = null;\n  }\n\n  setEmployeeId(employeeId: string) {\n    this.employeeId = employeeId;\n  }\n\n  getEmployeeId() {\n    return this.employeeId;\n  }\n\n  deleteEmployeeId() {\n    this.employeeId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addEmployee(employee: any, branchEmployee: any) {\n    const data = { api: 'newEmployee', data: { employee, branchEmployee } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getEmployees() {\n    const data = { api: 'getEmployees', data: {} };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getEmployee(id: string) {\n    const data = { api: 'getEmployee', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getEmployeeByIMSId(id: string) {\n    const data = { api: 'getEmployeeByIMSId', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  searchEmployee(employeeId: string) {\n    const data = { api: 'searchEmployee', data: { employeeId } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getEmployeeForEditing(id: string) {\n    const data = { api: 'getEmployeeForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeEmployeeStatus(id: string, status: boolean) {\n    const data = { api: 'changeEmployeeStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editEmployee(employee: EmployeeModel) {\n    const data = { api: 'updateEmployee', data: employee };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteEmployee(id: string) {\n    const data = { api: 'deleteEmployee', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import {\n  StudentCourseInstallmentModel,\n  InstallmentModel,\n} from './../models/student-course-installment.model';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError, take } from 'rxjs/operators';\nimport { throwError, BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class StudentCourseInstallmentService {\n  // Installment\n\n  private studentCourseInstallmentId: string;\n  private studentCourseInstallments = new BehaviorSubject<StudentCourseInstallmentModel>(null);\n\n  // Single Installment\n\n  private courseInstallmentId: string;\n  private courseInstallment = new BehaviorSubject<InstallmentModel>(null);\n\n  // Installment Id\n\n  setStudentCourseInstallmentId(studentCourseInstallmentId: string) {\n    this.studentCourseInstallmentId = studentCourseInstallmentId;\n  }\n\n  getStudentCourseInstallmentId() {\n    return this.studentCourseInstallmentId;\n  }\n\n  deleteStudentCourseInstallmentId() {\n    this.studentCourseInstallmentId = null;\n  }\n\n  // Installments\n\n  setStudentCourseInstallmentData(studentCourseInstallments: StudentCourseInstallmentModel) {\n    this.studentCourseInstallments.next(studentCourseInstallments);\n  }\n\n  getStudentCourseInstallmentData() {\n    return this.studentCourseInstallments;\n  }\n\n  deleteStudentCourseInstallmentData() {\n    this.studentCourseInstallments.next(null);\n  }\n\n  // Single Installment Id\n\n  setCourseInstallmentId(courseInstallmentId: string) {\n    this.courseInstallmentId = courseInstallmentId;\n  }\n\n  getCourseInstallmentId() {\n    return this.courseInstallmentId;\n  }\n\n  deleteCourseInstallmentId() {\n    this.courseInstallmentId = null;\n  }\n\n  // Single Installment\n\n  setCourseInstallmentData(courseInstallment: InstallmentModel) {\n    this.courseInstallment.next(courseInstallment);\n  }\n\n  getCourseInstallmentData() {\n    return this.courseInstallment;\n  }\n\n  deleteCourseInstallmentData() {\n    this.courseInstallment.next(null);\n  }\n\n  // Set Course Installment Receipt\n\n  setCourseInstallmentReceipt(installmentId: string, receiptId: string) {\n    this.studentCourseInstallments.subscribe(\n      (studentCourseInstallment: StudentCourseInstallmentModel) => {\n        if (studentCourseInstallment) {\n          const i = studentCourseInstallment.installments.findIndex(\n            (curInstallment: InstallmentModel) => curInstallment._id === installmentId,\n          );\n          if (i >= 0) {\n            if (receiptId) {\n              studentCourseInstallment.amountCollected =\n                studentCourseInstallment.amountCollected +\n                studentCourseInstallment.installments[i].installmentAmount;\n            } else {\n              studentCourseInstallment.amountCollected =\n                studentCourseInstallment.amountCollected -\n                studentCourseInstallment.installments[i].installmentAmount;\n            }\n            studentCourseInstallment.pendingAmount =\n              studentCourseInstallment.totalAmount - studentCourseInstallment.amountCollected;\n            studentCourseInstallment.installments[i].receiptId = receiptId;\n          }\n        }\n      },\n    );\n  }\n\n  // Get Course Installment by Installment Id\n\n  getCourseInstallment(installmentId: string): Observable<InstallmentModel> {\n    return this.studentCourseInstallments.pipe(\n      map((studentCourseInstallment: StudentCourseInstallmentModel) => {\n        if (studentCourseInstallment) {\n          const installment = studentCourseInstallment.installments.find(\n            (curInstallment: InstallmentModel) => curInstallment._id === installmentId,\n          );\n          return installment;\n        }\n        return null;\n      }),\n    );\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  addStudentCourseInstallment(studentCourse: string, studentCourseInstallment: any) {\n    const data = {\n      api: 'newStudentCourseInstallment',\n      data: { studentCourse, studentCourseInstallment },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseInstallments(student: string) {\n    const data = { api: 'getStudentCourseInstallments', data: { student } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseInstallment(id: string) {\n    const data = { api: 'getStudentCourseInstallment', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentCourseInstallmentForEditing(id: string) {\n    const data = { api: 'getStudentCourseInstallmentForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeStudentCourseInstallmentStatus(id: string, status: boolean) {\n    const data = { api: 'changeStudentCourseInstallmentStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editStudentCourseInstallment(studentCourseInstallment: StudentCourseInstallmentModel) {\n    const data = { api: 'updateStudentCourseInstallment', data: studentCourseInstallment };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteStudentCourseInstallment(id: string) {\n    const data = { api: 'deleteStudentCourseInstallment', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { HttpService } from './shared-services/http.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaymentService {\r\n  private paymentDetails: { planType: string; packageType: string; amount: string; type?: string };\r\n  private institutePaymentDetails: { amount: string };\r\n\r\n  getPaymentDetails() {\r\n    return this.paymentDetails;\r\n  }\r\n\r\n  setPaymentDetails(planType: string, packageType: string, amount: string, type?: string) {\r\n    this.paymentDetails = { planType, packageType, amount, type };\r\n  }\r\n\r\n  deletePaymentDetails() {\r\n    this.paymentDetails = null;\r\n  }\r\n\r\n  getInstitutePaymentDetails() {\r\n    return this.institutePaymentDetails;\r\n  }\r\n\r\n  setInstitutePaymentDetails(amount: string) {\r\n    this.institutePaymentDetails = { amount };\r\n  }\r\n\r\n  deleteInstitutePaymentDetails() {\r\n    this.institutePaymentDetails = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  verifyPayment(payment: any, placedOrder: any) {\r\n    const data = {\r\n      api: 'verifyPayment',\r\n      data: {\r\n        payment,\r\n        receipt: placedOrder,\r\n      },\r\n    };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  verifyInstitutePayment(branch: string, payment: any, placedOrder: any) {\r\n    const data = {\r\n      api: 'verifyInstitutePayment',\r\n      data: {\r\n        branch,\r\n        payment,\r\n        receipt: placedOrder,\r\n      },\r\n    };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { map, catchError } from 'rxjs/operators';\r\nimport { MembershipPlanModel } from './../models/membership-plan.model';\r\nimport { BehaviorSubject, throwError } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MembershipService {\r\n  private membershipType: string; // new, renew\r\n\r\n  private membershipPlan = new BehaviorSubject<MembershipPlanModel>(null);\r\n\r\n  setMembershipPlan(membershipPlan: MembershipPlanModel) {\r\n    this.membershipPlan.next(membershipPlan);\r\n  }\r\n\r\n  getMembershipPlan() {\r\n    return this.membershipPlan;\r\n  }\r\n\r\n  setMembershipType(membershipType: string) {\r\n    this.membershipType = membershipType;\r\n  }\r\n\r\n  getMembershipType() {\r\n    return this.membershipType;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  getMemberships() {\r\n    const data = { api: 'getMembershipPlans', data: {} };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  getMembership(name: any) {\r\n    const data = { api: 'getMembershipPlan', data: { name } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  saveMembershipPlan(membershipPlan: any) {\r\n    const data = { api: 'saveMembershipPlan', data: membershipPlan };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './shared-services/http.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { ExamModel } from '../models/exam.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExamService {\n  private examId: string;\n\n  private exam = new BehaviorSubject<ExamModel>(null);\n\n  setExamData(exam: ExamModel) {\n    this.exam.next(exam);\n  }\n\n  getExamData() {\n    return this.exam;\n  }\n\n  deleteExamData() {\n    this.exam.next(null);\n  }\n\n  setExamId(examId: string) {\n    this.examId = examId;\n  }\n\n  getExamId() {\n    return this.examId;\n  }\n\n  deleteExamId() {\n    this.examId = null;\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getStudentCourseScore(\n    subject: string,\n    month: string,\n    year: string,\n    student: string,\n    studentCourse: string,\n  ) {\n    const data = {\n      api: 'getStudentCourseScore',\n      data: { subject, month, year, student, studentCourse },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getStudentsForExam(exam: string) {\n    const data = {\n      api: 'getStudentsForExam',\n      data: { exam },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveExam(exam: any) {\n    const data = { api: 'saveExam', data: exam };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getExams(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    subject: string,\n    month: string,\n    year: string,\n  ) {\n    const data = {\n      api: 'getExams',\n      data: { branch, category, course, batch, subject, month, year },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getExamsPerformance(\n    month: string,\n    year: string,\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    subject: string,\n    student: string,\n  ) {\n    const data = {\n      api: 'getExamsPerformance',\n      data: { month, year, branch, category, course, batch, subject, student },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getExam(id: string) {\n    const data = { api: 'getExam', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getExamReport(id: string) {\n    const data = { api: 'getExamReport', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getExamForEditing(id: string) {\n    const data = { api: 'getExamForEditing', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  editExam(exam: ExamModel) {\n    const data = { api: 'editExam', data: exam };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  saveStudentsMarks(id: string, marks: any) {\n    const data = { api: 'saveStudentsMarks', data: { id, marks } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteExam(id: string) {\n    const data = { api: 'deleteExam', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpService } from './shared-services/http.service';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { LectureMaterialModel } from '../models/lecture-material.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LectureMaterialService {\n  lectureMaterialId: string;\n  lectureMaterial = new BehaviorSubject<LectureMaterialModel>(null);\n  lectureMaterials = new BehaviorSubject<LectureMaterialModel[]>([]);\n\n  setLectureMaterialId(lectureMaterialId: string) {\n    this.lectureMaterialId = lectureMaterialId;\n  }\n\n  getLectureMaterialId() {\n    return this.lectureMaterialId;\n  }\n\n  deleteLectureMaterialId() {\n    this.lectureMaterialId = null;\n  }\n\n  setLectureMaterialsData(lectureMaterials: LectureMaterialModel[]) {\n    this.lectureMaterials.next(lectureMaterials);\n  }\n\n  getLectureMaterialsData() {\n    return this.lectureMaterials;\n  }\n\n  deleteLectureMaterialsData() {\n    this.lectureMaterials.next([]);\n  }\n\n  setLectureMaterialData(lectureMaterial: LectureMaterialModel) {\n    this.lectureMaterial.next(lectureMaterial);\n  }\n\n  getLectureMaterialData() {\n    return this.lectureMaterial;\n  }\n\n  deleteLectureMaterialData() {\n    this.lectureMaterial.next(null);\n  }\n\n  constructor(private httpService: HttpService) {}\n\n  getLectureMaterials(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    lecture: string,\n  ) {\n    const data = { api: 'getLectureMaterials', data: { branch, category, course, batch, lecture } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLectureMaterial(id: string) {\n    const data = { api: 'getLectureMaterials', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  getLectureMaterialsForStudent(\n    branch: string,\n    category: string,\n    course: string,\n    batch: string,\n    lecture: string,\n  ) {\n    const data = {\n      api: 'getLectureMaterialsForStudent',\n      data: { branch, category, course, batch, lecture },\n    };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  newLectureMaterials(materials: FormData) {\n    const data = { api: 'newLectureMaterials', data: materials };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  changeLectureMaterialStatus(id: string, status: boolean) {\n    const data = { api: 'changeLectureMaterialStatus', data: { id, status } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n\n  deleteLectureMaterial(id: string) {\n    const data = { api: 'deleteLectureMaterial', data: { id } };\n    return this.httpService.httpPost(data).pipe(\n      map((response: any) => {\n        return response;\n      }),\n      catchError((err: any) => {\n        return throwError(err);\n      }),\n    );\n  }\n}\n"]}