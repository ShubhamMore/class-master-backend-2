{"version":3,"sources":["webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test.component.html","webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test-routing.module.ts","webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test.component.ts","webpack:///src/app/employee/branch/exam/test/batch-test/manage-batch-test/manage-batch-test.module.ts"],"names":["routes","path","component","ManageBatchTestComponent","branchService","courseService","batchService","toastrService","dateService","examService","router","route","this","loading","branchId","getBranchId","getCategoryData","subscribe","category","getCourseData","course","getBatchData","batch","subjects","subject","forEach","curSubject","mySubject","find","_id","push","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getExams","navigate","relativeTo","exams","error","showToastr","exam","setExamData","setExamId","queryParams","mode","i","deleteExam","res","splice","status","position","message","show","addExam","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ManageBatchTestRoutingModule","forChild","ManageBatchTestModule"],"mappings":"kSA8BU,gDAAkE,yBAEhE,+B,yBAF0C,yCAAsB,yE,yBAgBlE,gDAAqD,yBAAU,+B,yBAAzB,qCAAe,iE,yBAcrD,gDAAgE,yBAE9D,+B,yBAFsC,6CAAwB,uE,kEAwB1D,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAAoB,8BACxB,sCAAI,yBAAuC,8BAC3C,sCAAI,yBAAuB,8BAC3B,sCAAI,0BAAoC,8BACxC,uCACE,8CAA+C,wJAC7C,mCACF,8BACF,8BACA,uCACE,8CAA+C,4JAC7C,oCACF,8BACF,8BACA,uCACE,8CAIE,0LAEA,0BACF,8BACF,8BACA,uCACE,8CAA8C,0KAC5C,qCACF,8BACF,8BACF,8B,wEA9BM,kEACA,0EACA,+FACA,kFACA,+FAeA,4FAGA,qG,yBApCZ,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,iCAAK,8BACT,sCAAI,gCAAI,8BACR,uCAAI,qCAAQ,8BACZ,uCAAI,mCAAM,8BACV,0CAAgB,mCAAM,8BACxB,8BACF,8BACA,0CACE,6CAgCF,8BACF,8BACF,+B,6CAlCU,2E,sBAoCR,wCAAiC,8CAAkB,+B,yBAlDvD,0CACE,6CAgDA,+FAGF,wC,4EAnDgC,+EAAwC,e,sBAqDtE,wCAAiC,sCAAU,+BCxHrD,MAAMA,EAAiB,CACrB,CAAEC,KAAM,GAAIC,UCaP,M,MAAMC,EAkBX,YACUC,EACAC,EACAC,EACAC,EACDC,EACCC,EACAC,EACAC,GAPA,KAAAP,gBACA,KAAAC,gBACA,KAAAC,eACA,KAAAC,gBACD,KAAAC,cACC,KAAAC,cACA,KAAAC,SACA,KAAAC,QAGV,WACEC,KAAKC,SAAU,EACfD,KAAKE,SAAWF,KAAKR,cAAcW,cAC9BH,KAAKE,UAKVF,KAAKR,cAAcY,kBAAkBC,UAAWC,IAC9CN,KAAKM,SAAWA,IAGlBN,KAAKP,cAAcc,gBAAgBF,UAAWG,IAC5CR,KAAKQ,OAASA,IAGhBR,KAAKN,aAAae,eAAeJ,UAAWK,IAC1CV,KAAKU,MAAQA,IAGfV,KAAKW,SAAW,GAChBX,KAAKY,QAAU,GACfZ,KAAKU,MAAMC,SAASE,QAASC,IAC3B,MAAMC,EAAYf,KAAKQ,OAAOG,SAASK,KACpCJ,GAA0BA,EAAQK,MAAQH,EAAWF,SAExDZ,KAAKW,SAASO,KAAKH,KAGrBf,KAAKmB,OAASnB,KAAKJ,YAAYwB,YAC/BpB,KAAKqB,MAAQrB,KAAKJ,YAAY0B,WAE9BtB,KAAKuB,OAASvB,KAAKJ,YAAY4B,UAAUC,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAChF3B,KAAK4B,KAAO5B,KAAKqB,MAAMrB,KAAKqB,MAAMQ,OAAS,GAE3C7B,KAAK8B,YA/BH9B,KAAKF,OAAOiC,SAAS,CAAC,OAAQ,CAAEC,WAAYhC,KAAKD,QAkCrD,cAAcwB,GACZvB,KAAKuB,MAAQA,EACbvB,KAAK8B,WAGP,aAAaF,GACX5B,KAAK4B,KAAOA,EACC,KAATA,IACF5B,KAAKuB,MAAQ,IAEfvB,KAAK8B,WAGP,gBAAgBlB,GACdZ,KAAKY,QAAUA,EACfZ,KAAK8B,WAGP,WACE9B,KAAKC,SAAU,EAEfD,KAAKH,YACFiC,SACC9B,KAAKE,SACLF,KAAKM,SAASW,IACdjB,KAAKQ,OAAOS,IACZjB,KAAKU,MAAMO,IACXjB,KAAKY,QACLZ,KAAKuB,MACLvB,KAAK4B,MAENvB,UACE4B,IACCjC,KAAKiC,MAAQA,EACbjC,KAAKC,SAAU,GAEhBiC,IACClC,KAAKmC,WAAW,YAAa,SAAUD,GACvClC,KAAKC,SAAU,IAKvB,UACED,KAAKF,OAAOiC,SAAS,CAAC,UAAW,CAAEC,WAAYhC,KAAKD,QAGtD,aAAaqC,GACXpC,KAAKH,YAAYwC,YAAYD,GAC7BpC,KAAKF,OAAOiC,SAAS,CAAC,YAAa,CAAEC,WAAYhC,KAAKD,QAGxD,SAASqC,GACPpC,KAAKH,YAAYyC,UAAUF,EAAKnB,KAChCjB,KAAKH,YAAYwC,YAAYD,GAC7BpC,KAAKF,OAAOiC,SAAS,CAAC,WAAY,CAAEC,WAAYhC,KAAKD,MAAOwC,YAAa,CAAEC,KAAM,UAGnF,WAAWJ,EAAcK,GACvBzC,KAAKC,SAAU,EACfD,KAAKH,YAAY6C,WAAWN,GAAM/B,UAC/BsC,IACC3C,KAAKiC,MAAMW,OAAOH,EAAG,GACrBzC,KAAKC,SAAU,GAEhBiC,IACClC,KAAKmC,WAAW,YAAa,SAAUD,GACvClC,KAAKC,SAAU,IAKrB,iBAAiBmC,EAAcS,EAAiBJ,IAcxC,WAAWK,EAAeD,EAAaE,GAC7C/C,KAAKL,cAAcqD,KAAKH,EAAQE,EAAS,CACvCD,WACAD,Y,6CA5JOtD,GAAwB,mT,mDAAxBA,EAAwB,+lC,GAAA,MFlBrC,2CACE,kDACE,yCACE,yCACE,sCAAI,2CAAe,8BACrB,8BACA,yCACE,4CAAyD,qDAAS,EAAA0D,aAChE,sCAAS,wCACX,8BACF,8BACF,8BACF,8BACF,8BAEA,4CACE,mDACE,0CACE,qCAEA,0CACE,gDAME,+DAAkB,EAAAC,gBAAA,MAElB,gDAAoB,yCAAY,8BAChC,kDAGF,8BACF,8BAEA,0CACE,gDAME,+DAAkB,EAAAC,aAAA,MAElB,gDAAoB,sCAAS,8BAC7B,kDACF,8BACF,8BAEA,0CACE,gDAME,+DAAkB,EAAAC,cAAA,MAElB,gDAAoB,uCAAU,8BAC9B,kDAGF,8BACF,8BACF,8BACF,8BACA,oDACE,0CACE,2CACE,sDAqDA,gGAGF,8BACF,8BACF,8BACF,+B,4CAzGU,6EAMW,4EAUX,yEAMW,yEAQX,0EAMW,0EAUC,yEAAkC,gB,oEEpDjD,IDXL,CACE/D,KAAM,iBACNgE,aAAc,IACZ,iCAAwEC,KACrEC,GAAMA,EAAEC,qBAIf,CACEnE,KAAM,KACNoE,WAAY,iBACZC,UAAW,SAQR,Y,MAAMC,G,yDAAAA,I,+EAAAA,IAA4B,SAH9B,CAAC,IAAaC,SAASxE,IACtB,O,GAEL,GERA,Q,MAAMyE,G,yDAAAA,I,+EAAAA,IAAqB,SATvB,CACP,IACA,EACA,IACA,KACA,IACA,Q,GAGG","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>Classroom Exams</h3>\n      </div>\n      <div class=\"col-md-3 col-sm-4\">\n        <button nbButton size=\"small\" fullWidth status=\"primary\" (click)=\"addExam()\">\n          Add Exam <nb-icon icon=\"plus-circle-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-3 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-subject\"\n          name=\"subject\"\n          [selected]=\"subject\"\n          fullWidth\n          placeholder=\"All Subjects\"\n          (selectedChange)=\"onSelectSubject($event)\"\n        >\n          <nb-option value=\"\">All Subjects</nb-option>\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n            subject.subject\n          }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"exams.length > 0; else noBatches\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Title</th>\n                  <th>Date</th>\n                  <th>Category</th>\n                  <th>Course</th>\n                  <th colspan=\"4\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let exam of exams; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ exam.examTitle }}</td>\n                  <td>{{ dateService.formatDate(exam.date) }}</td>\n                  <td>{{ category.category }}</td>\n                  <td>{{ course.basicDetails.courseName }}</td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"primary\" (click)=\"editExam(exam)\">\n                      Edit\n                    </button>\n                  </td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"warning\" (click)=\"addExamScore(exam)\">\n                      Score\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      [status]=\"exam.status ? 'success' : 'danger'\"\n                      (click)=\"changeExamStatus(exam._id, !exam.status, i)\"\n                    >\n                      {{ exam.status ? 'Inactive' : 'Active' }}\n                    </button>\n                  </td>\n                  <td>\n                    <button nbButton size=\"small\" status=\"danger\" (click)=\"deleteExam(exam._id, i)\">\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noBatches>\n            <p class=\"text-center pt-5 pb-5\">No Exams Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ManageBatchTestComponent } from './manage-batch-test.component';\n\nconst routes: Routes = [\n  { path: '', component: ManageBatchTestComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageBatchTestRoutingModule {}\n","import { DateService, Month } from './../../../../../../services/shared-services/date.service';\r\nimport { CategoryModel } from './../../../../../../models/branch.model';\r\nimport { CourseService } from './../../../../../../services/course.service';\r\nimport { BatchService } from './../../../../../../services/batch.service';\r\nimport { BatchModel } from './../../../../../../models/batch.model';\r\nimport { CourseModel, SubjectModel } from './../../../../../../models/course.model';\r\nimport { ExamService } from './../../../../../../services/exam.service';\r\nimport { ExamModel } from './../../../../../../models/exam.model';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BranchService } from './../../../../../../services/branch.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { NbToastrService } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-manage-batch-test',\r\n  templateUrl: './manage-batch-test.component.html',\r\n  styleUrls: ['./manage-batch-test.component.scss'],\r\n})\r\nexport class ManageBatchTestComponent implements OnInit {\r\n  loading: boolean;\r\n  branchId: string;\r\n  exams: ExamModel[];\r\n\r\n  category: CategoryModel;\r\n  course: CourseModel;\r\n  batch: BatchModel;\r\n\r\n  subjects: SubjectModel[];\r\n  subject: string;\r\n\r\n  months: Month[];\r\n  month: string;\r\n\r\n  years: string[];\r\n  year: string;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private courseService: CourseService,\r\n    private batchService: BatchService,\r\n    private toastrService: NbToastrService,\r\n    public dateService: DateService,\r\n    private examService: ExamService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\r\n      this.category = category;\r\n    });\r\n\r\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\r\n      this.course = course;\r\n    });\r\n\r\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\r\n      this.batch = batch;\r\n    });\r\n\r\n    this.subjects = [];\r\n    this.subject = '';\r\n    this.batch.subjects.forEach((curSubject: any) => {\r\n      const mySubject = this.course.subjects.find(\r\n        (subject: SubjectModel) => subject._id === curSubject.subject,\r\n      );\r\n      this.subjects.push(mySubject);\r\n    });\r\n\r\n    this.months = this.dateService.getMonths();\r\n    this.years = this.dateService.getYears();\r\n\r\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\r\n    this.year = this.years[this.years.length - 1];\r\n\r\n    this.getExams();\r\n  }\r\n\r\n  onSelectMonth(month: string) {\r\n    this.month = month;\r\n    this.getExams();\r\n  }\r\n\r\n  onSelectYear(year: string) {\r\n    this.year = year;\r\n    if (year === '') {\r\n      this.month = '';\r\n    }\r\n    this.getExams();\r\n  }\r\n\r\n  onSelectSubject(subject: string) {\r\n    this.subject = subject;\r\n    this.getExams();\r\n  }\r\n\r\n  getExams() {\r\n    this.loading = true;\r\n\r\n    this.examService\r\n      .getExams(\r\n        this.branchId,\r\n        this.category._id,\r\n        this.course._id,\r\n        this.batch._id,\r\n        this.subject,\r\n        this.month,\r\n        this.year,\r\n      )\r\n      .subscribe(\r\n        (exams: ExamModel[]) => {\r\n          this.exams = exams;\r\n          this.loading = false;\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.loading = false;\r\n        },\r\n      );\r\n  }\r\n\r\n  addExam() {\r\n    this.router.navigate(['../add'], { relativeTo: this.route });\r\n  }\r\n\r\n  addExamScore(exam: ExamModel) {\r\n    this.examService.setExamData(exam);\r\n    this.router.navigate(['../score'], { relativeTo: this.route });\r\n  }\r\n\r\n  editExam(exam: ExamModel) {\r\n    this.examService.setExamId(exam._id);\r\n    this.examService.setExamData(exam);\r\n    this.router.navigate(['../edit'], { relativeTo: this.route, queryParams: { mode: 'edit' } });\r\n  }\r\n\r\n  deleteExam(exam: string, i: number) {\r\n    this.loading = true;\r\n    this.examService.deleteExam(exam).subscribe(\r\n      (res: any) => {\r\n        this.exams.splice(i, 1);\r\n        this.loading = false;\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.loading = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  changeExamStatus(exam: string, status: boolean, i: number) {\r\n    // this.loading = true\r\n    // this.examService.changeExamStatus(exam, status).subscribe(\r\n    //   (res: any) => {\r\n    //     this.exams[i].status = status;\r\n    //     this.loading = false\r\n    //   },\r\n    //   (error: any) => {\r\n    //     this.showToastr('top-right', 'danger', error);\r\n    //     this.loading = false;\r\n    //   },\r\n    // );\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n}\r\n","import { NbCardModule, NbSelectModule, NbButtonModule, NbIconModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageBatchTestRoutingModule } from './manage-batch-test-routing.module';\nimport { ManageBatchTestComponent } from './manage-batch-test.component';\n\n@NgModule({\n  declarations: [ManageBatchTestComponent],\n  imports: [\n    CommonModule,\n    ManageBatchTestRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n  ],\n})\nexport class ManageBatchTestModule {}\n"]}