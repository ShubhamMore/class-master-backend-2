{"version":3,"sources":["webpack:///src/app/employee/branch/exam/test/batch-test/add-test/add-test.component.html","webpack:///src/app/employee/branch/exam/test/batch-test/add-test/add-test-routing.module.ts","webpack:///src/app/employee/branch/exam/test/batch-test/add-test/add-test.component.ts","webpack:///src/app/employee/branch/exam/test/batch-test/add-test/add-test.module.ts"],"names":["AddTestComponent","AddTestModule","AddTestRoutingModule","routes","path","component","branchService","courseService","dateService","batchService","examService","toastrService","router","route","mode","this","loading","submit","branchId","getBranchId","queryParams","subscribe","param","examId","getExamId","showToastr","getCategoryData","category","getCourseData","course","getBatchData","batch","subjects","forEach","curSubject","mySubject","find","subject","_id","push","examForm","examTitle","validators","required","outOfMarks","min","passingMarks","date","getDateString","time","duration","getExam","exam","patchValue","err","back","navigate","relativeTo","stepper","previous","markAllAsTouched","invalid","next","value","branch","marks","editExam","res","error","saveExam","subjectId","position","status","message","show","replaceUrl","deleteExamId","deleteExamData","submitExamForm","previousStep","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-9\">\r\n        <h3>{{ exam ? 'Edit' : 'Add' }} Test</h3>\r\n      </div>\r\n      <div class=\"col-3\">\r\n        <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n          Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n\r\n  <nb-card-body>\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\r\n          <nb-step [stepControl]=\"examForm\" label=\"Exam Details\">\r\n            <form [formGroup]=\"examForm\" (submit)=\"submitExamForm()\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-exam-title\">Exam Title:</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      nbInput\r\n                      id=\"input-exam-title\"\r\n                      name=\"title\"\r\n                      formControlName=\"examTitle\"\r\n                      placeholder=\"Exam Title\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('examTitle').touched\r\n                          ? examForm.get('examTitle').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    />\r\n                    <ng-container\r\n                      *ngIf=\"examForm.get('examTitle').invalid && examForm.get('examTitle').touched\"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('examTitle').errors?.required\"\r\n                      >\r\n                        Exam title is required!\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-subject\">Subject:</label>\r\n                    <nb-select\r\n                      id=\"input-subject\"\r\n                      name=\"subject\"\r\n                      formControlName=\"subject\"\r\n                      placeholder=\"Subject\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('subject').touched\r\n                          ? examForm.get('subject').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    >\r\n                      <nb-option value=\"\">Select Subject</nb-option>\r\n                      <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\r\n                        subject.subject\r\n                      }}</nb-option>\r\n                    </nb-select>\r\n                    <ng-container\r\n                      *ngIf=\"examForm.get('subject').invalid && examForm.get('subject').touched\"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('subject').errors?.required\"\r\n                      >\r\n                        Subject is required!\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-exam-out-of-marks\">Out of Marks:</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      nbInput\r\n                      id=\"input-exam-out-of-marks\"\r\n                      name=\"outOfMarks\"\r\n                      min=\"0\"\r\n                      formControlName=\"outOfMarks\"\r\n                      placeholder=\"Out of Marks\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('outOfMarks').touched\r\n                          ? examForm.get('outOfMarks').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    />\r\n                    <ng-container\r\n                      *ngIf=\"\r\n                        examForm.get('outOfMarks').invalid && examForm.get('outOfMarks').touched\r\n                      \"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('outOfMarks').errors?.required\"\r\n                      >\r\n                        Out of Marks is required!\r\n                      </p>\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('outOfMarks').errors?.min\"\r\n                      >\r\n                        Out of Marks should be greater than 0\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-exam-passing-marks\">Passing Marks:</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      nbInput\r\n                      id=\"input-exam-passing-marks\"\r\n                      name=\"passingMarks\"\r\n                      min=\"0\"\r\n                      formControlName=\"passingMarks\"\r\n                      placeholder=\"Passing Marks\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('passingMarks').touched\r\n                          ? examForm.get('passingMarks').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    />\r\n                    <ng-container\r\n                      *ngIf=\"\r\n                        examForm.get('passingMarks').invalid && examForm.get('passingMarks').touched\r\n                      \"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('passingMarks').errors?.required\"\r\n                      >\r\n                        Passing Marks is required!\r\n                      </p>\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('passingMarks').errors?.min\"\r\n                      >\r\n                        Passing Marks should be greater than 0\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-date\">Date:</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      nbInput\r\n                      id=\"input-date\"\r\n                      name=\"date\"\r\n                      [min]=\"exam ? exam.date : dateService.getDateString()\"\r\n                      formControlName=\"date\"\r\n                      placeholder=\"Date\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('date').touched\r\n                          ? examForm.get('date').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    />\r\n                    <ng-container\r\n                      *ngIf=\"examForm.get('date').invalid && examForm.get('date').touched\"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('date').errors?.required\"\r\n                      >\r\n                        Date is required!\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-time\">Time:</label>\r\n                    <input\r\n                      type=\"time\"\r\n                      step=\"300\"\r\n                      nbInput\r\n                      id=\"input-time\"\r\n                      name=\"time\"\r\n                      formControlName=\"time\"\r\n                      placeholder=\"Time\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('time').touched\r\n                          ? examForm.get('time').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    />\r\n                    <ng-container\r\n                      *ngIf=\"examForm.get('time').invalid && examForm.get('time').touched\"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('time').errors?.required\"\r\n                      >\r\n                        Time is required!\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-control-group\">\r\n                    <label class=\"label\" for=\"input-duration\">Duration (in Min):</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      nbInput\r\n                      id=\"input-duration\"\r\n                      name=\"duration\"\r\n                      min=\"0\"\r\n                      formControlName=\"duration\"\r\n                      placeholder=\"Duration (in Min)\"\r\n                      fullWidth\r\n                      [status]=\"\r\n                        examForm.get('duration').touched\r\n                          ? examForm.get('duration').invalid\r\n                            ? 'danger'\r\n                            : 'success'\r\n                          : 'basic'\r\n                      \"\r\n                    />\r\n                    <ng-container\r\n                      *ngIf=\"examForm.get('duration').invalid && examForm.get('duration').touched\"\r\n                    >\r\n                      <p\r\n                        class=\"caption status-danger\"\r\n                        *ngIf=\"examForm.get('duration').errors?.required\"\r\n                      >\r\n                        Duration is required!\r\n                      </p>\r\n                      <p class=\"caption status-danger\" *ngIf=\"examForm.get('duration').errors?.min\">\r\n                        Duration should be greater than 0\r\n                      </p>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <hr />\r\n              <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                  <button type=\"submit\" class=\"float-right\" nbButton size=\"small\" status=\"basic\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </nb-step>\r\n\r\n          <nb-step label=\"Submit\">\r\n            <div class=\"step-container\">\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-bordered\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <th>Exam Title</th>\r\n                      <td>{{ examForm.value.examTitle }}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Subject</th>\r\n                      <td>{{ getSubject(examForm.value.subject) }}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Out of Marks</th>\r\n                      <td>{{ examForm.value.outOfMarks }}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Passing Marks</th>\r\n                      <td>{{ examForm.value.passingMarks }}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Date</th>\r\n                      <td>{{ dateService.formatDate(examForm.value.date) }}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Time</th>\r\n                      <td>{{ dateService.formatTime(examForm.value.time) }}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Duration (in Min)</th>\r\n                      <td>{{ examForm.value.duration }} Min</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n              <hr />\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6 text-left\">\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    (click)=\"previousStep()\"\r\n                    [disabled]=\"submit\"\r\n                  >\r\n                    <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                    <span>prev</span>\r\n                  </button>\r\n                </div>\r\n                <div class=\"col-md-6 text-right\">\r\n                  <button\r\n                    nbButton\r\n                    size=\"small\"\r\n                    (click)=\"saveExam()\"\r\n                    [disabled]=\"submit\"\r\n                    [nbSpinner]=\"submit\"\r\n                    nbSpinnerStatus=\"primary\"\r\n                    nbSpinnerSize=\"small\"\r\n                  >\r\n                    <span>Submit</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </nb-step>\r\n        </nb-stepper>\r\n        <form [formGroup]=\"examForm\" (submit)=\"saveExam()\"></form>\r\n      </div>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddTestComponent } from './add-test.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddTestComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddTestRoutingModule {}\n","import { ExamService } from './../../../../../../services/exam.service';\r\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\nimport { BatchService } from './../../../../../../services/batch.service';\r\nimport { CourseService } from './../../../../../../services/course.service';\r\nimport { BatchModel } from './../../../../../../models/batch.model';\r\nimport { CourseModel, SubjectModel } from './../../../../../../models/course.model';\r\nimport { CategoryModel, BranchModel } from './../../../../../../models/branch.model';\r\nimport { ExamModel } from './../../../../../../models/exam.model';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\r\nimport { BranchService } from './../../../../../../services/branch.service';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { DateService } from '../../../../../../services/shared-services/date.service';\r\n\r\n@Component({\r\n  selector: 'ngx-add-test',\r\n  templateUrl: './add-test.component.html',\r\n  styleUrls: ['./add-test.component.scss'],\r\n})\r\nexport class AddTestComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  branchId: string;\r\n  category: CategoryModel;\r\n  course: CourseModel;\r\n  batch: BatchModel;\r\n  examForm: FormGroup;\r\n  examId: string;\r\n  exam: ExamModel;\r\n  subjects: SubjectModel[];\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private courseService: CourseService,\r\n    public dateService: DateService,\r\n    private batchService: BatchService,\r\n    private examService: ExamService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    let mode: string;\r\n\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      mode = param.mode;\r\n    });\r\n\r\n    this.examId = this.examService.getExamId();\r\n\r\n    if (mode && mode !== 'edit') {\r\n      this.showToastr('top-right', 'danger', 'Invalid Route');\r\n      // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    } else if (mode && !this.examId) {\r\n      this.showToastr('top-right', 'danger', 'Exam Not Found');\r\n      // this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.branchService.getCategoryData().subscribe((category: CategoryModel) => {\r\n      this.category = category;\r\n    });\r\n\r\n    this.courseService.getCourseData().subscribe((course: CourseModel) => {\r\n      this.course = course;\r\n    });\r\n\r\n    this.batchService.getBatchData().subscribe((batch: BatchModel) => {\r\n      this.batch = batch;\r\n    });\r\n\r\n    this.subjects = [];\r\n    this.batch.subjects.forEach((curSubject: any) => {\r\n      const mySubject = this.course.subjects.find(\r\n        (subject: SubjectModel) => subject._id === curSubject.subject,\r\n      );\r\n      this.subjects.push(mySubject);\r\n    });\r\n\r\n    this.examForm = new FormGroup({\r\n      examTitle: new FormControl(null, { validators: [Validators.required] }),\r\n      subject: new FormControl(null, { validators: [Validators.required] }),\r\n      outOfMarks: new FormControl(null, { validators: [Validators.required, Validators.min(0)] }),\r\n      passingMarks: new FormControl(null, { validators: [Validators.required, Validators.min(0)] }),\r\n      date: new FormControl(this.dateService.getDateString(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      time: new FormControl(null, { validators: [Validators.required] }),\r\n      duration: new FormControl(null, { validators: [Validators.required, Validators.min(0)] }),\r\n    });\r\n\r\n    if (mode && this.examId) {\r\n      this.examService.getExam(this.examId).subscribe(\r\n        (exam: ExamModel) => {\r\n          this.exam = exam;\r\n\r\n          this.examForm.patchValue({\r\n            examTitle: this.exam.examTitle,\r\n            subject: this.exam.subject,\r\n            outOfMarks: this.exam.outOfMarks,\r\n            passingMarks: this.exam.passingMarks,\r\n            date: this.exam.date,\r\n            time: this.exam.time,\r\n            duration: this.exam.duration,\r\n          });\r\n\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.back();\r\n        },\r\n      );\r\n    } else {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  previousStep() {\r\n    this.stepper.previous();\r\n  }\r\n\r\n  submitExamForm() {\r\n    this.examForm.markAllAsTouched();\r\n    if (this.examForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'All Exam Fields are Required');\r\n      return;\r\n    }\r\n\r\n    this.stepper.next();\r\n  }\r\n\r\n  saveExam() {\r\n    this.examForm.markAllAsTouched();\r\n    if (this.examForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'All Exam Fields are Required');\r\n      return;\r\n    }\r\n    this.submit = true;\r\n\r\n    const exam: any = this.examForm.value;\r\n    exam.branch = this.branchId;\r\n    exam.category = this.category._id;\r\n    exam.course = this.course._id;\r\n    exam.batch = this.batch._id;\r\n\r\n    if (!this.exam) {\r\n      this.examService.saveExam(exam).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Exam Added Successfully!');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else {\r\n      exam._id = this.exam._id;\r\n      exam.marks = this.exam.marks;\r\n      this.examService.editExam(exam).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Exam Updated Successfully!');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  getSubject(subjectId: string) {\r\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === subjectId);\r\n    if (subject) {\r\n      return subject.subject;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.examService.deleteExamId();\r\n    this.examService.deleteExamData();\r\n  }\r\n}\r\n","import {\n  NbInputModule,\n  NbButtonModule,\n  NbCardModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbSelectModule,\n  NbIconModule,\n} from '@nebular/theme';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AddTestComponent } from './add-test.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddTestRoutingModule } from './add-test-routing.module';\n\n@NgModule({\n  declarations: [AddTestComponent],\n  imports: [\n    CommonModule,\n    AddTestRoutingModule,\n    NbInputModule,\n    NbIconModule,\n    NbSelectModule,\n    NbCardModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AddTestModule {}\n"]}