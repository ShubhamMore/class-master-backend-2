{"version":3,"sources":["webpack:///src/app/student/branch/course/assignment/manage-assignment/manage-assignment.component.html","webpack:///src/app/student/branch/course/assignment/manage-assignment/manage-assignment-routing.module.ts","webpack:///src/app/student/branch/course/assignment/manage-assignment/manage-assignment.component.ts","webpack:///src/app/student/branch/course/assignment/manage-assignment/manage-assignment.module.ts"],"names":["ManageAssignmentComponent","ManageAssignmentModule","ManageAssignmentRoutingModule","routes","path","component","branchService","studentCourseService","studentBranchService","subjectService","assignmentService","dateService","router","route","toastrService","this","loading","branchId","getBranchId","setType","getStudentCourseData","subscribe","studentCourse","subjects","subject","getSubjectsData","months","getMonths","years","getYears","month","getDate","getMonth","toString","padStart","year","length","getAssignments","back","getAssignmentsForStudent","category","course","batch","assignments","error","showToastr","assignment","setAssignmentId","_id","setAssignmentData","navigate","relativeTo","id","find","curSubject","position","status","message","show","type","getType","queryParams","onSelectSubject","onSelectYear","onSelectMonth","loadChildren","then","m","PageNotFoundModule","redirectTo","forChild"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h3>Assignments</h3>\n      </div>\n    </div>\n  </nb-card-header>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-3 col-sm-4\"></div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-subject\"\n          name=\"subject\"\n          [selected]=\"subject\"\n          fullWidth\n          placeholder=\"All Subjects\"\n          (selectedChange)=\"onSelectSubject($event)\"\n        >\n          <nb-option value=\"\">All Subjects</nb-option>\n          <nb-option *ngFor=\"let subject of subjects\" [value]=\"subject._id\">{{\n            subject.subject\n          }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-year\"\n          name=\"year\"\n          [selected]=\"year\"\n          fullWidth\n          placeholder=\"All Years\"\n          (selectedChange)=\"onSelectYear($event)\"\n        >\n          <nb-option value=\"\">All Years</nb-option>\n          <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n        </nb-select>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <nb-select\n          id=\"select-month\"\n          name=\"month\"\n          [selected]=\"month\"\n          fullWidth\n          placeholder=\"All Months\"\n          (selectedChange)=\"onSelectMonth($event)\"\n        >\n          <nb-option value=\"\">All Months</nb-option>\n          <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n            month.month\n          }}</nb-option>\n        </nb-select>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\" *ngIf=\"assignments.length > 0; else noAssignments\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Date</th>\n                  <th>Subject</th>\n                  <th>Submission Date</th>\n                  <th>Total Grades</th>\n                  <th>Generated By</th>\n                  <th>Attachment</th>\n                  <th>Status</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let assignment of assignments; let i = index\">\n                  <td>{{ i + 1 }}</td>\n                  <td>{{ dateService.formatDate(assignment.date) }}</td>\n                  <td>{{ getSubjectName(assignment.subject) }}</td>\n                  <td>{{ dateService.formatDate(assignment.submissionDate) }}</td>\n                  <td>{{ assignment.totalGrades }}</td>\n                  <td>{{ assignment.generatedByName }}</td>\n                  <td>\n                    <ng-container *ngIf=\"assignment.fileName; else noAttachment\">\n                      <a\n                        [href]=\"assignment.secureUrl\"\n                        target=\"_blank\"\n                        [download]=\"assignment.fileName\"\n                        >{{ assignment.fileName }}</a\n                      >\n                    </ng-container>\n                  </td>\n                  <td>{{ assignment.submission ? 'Submitted' : 'Pending' }}</td>\n\n                  <td>\n                    <button\n                      type=\"button\"\n                      nbButton\n                      size=\"small\"\n                      status=\"primary\"\n                      (click)=\"assignmentSubmission(assignment)\"\n                    >\n                      {{ assignment.submission ? 'Re Submit' : 'Submit Now' }}\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noAssignments>\n            <p class=\"text-center pt-5 pb-5\">No Assignment Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #noAttachment>\n  <span>--</span>\n</ng-template>\n","import { ManageAssignmentComponent } from './manage-assignment.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageAssignmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  { path: '**', redirectTo: 'page-not-found' },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageAssignmentRoutingModule {}\n","import { StudentBranchService } from './../../../student-branch.service';\nimport { StudentCourseService } from './../../../../../services/student-course.service';\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\nimport { SubjectService } from './../../../../../services/subject.service';\nimport { NbToastrService } from '@nebular/theme';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DateService, Month } from './../../../../../services/shared-services/date.service';\nimport { AssignmentService } from './../../../../../services/assignment.service';\nimport { BranchService } from './../../../../../services/branch.service';\nimport { AssignmentModel } from './../../../../../models/assignment.model';\nimport { SubjectModel } from './../../../../../models/course.model';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-manage-assignment',\n  templateUrl: './manage-assignment.component.html',\n  styleUrls: ['./manage-assignment.component.scss'],\n})\nexport class ManageAssignmentComponent implements OnInit {\n  loading: boolean;\n\n  branchId: string;\n\n  studentCourse: StudentCourseModel;\n\n  months: Month[];\n  month: string;\n\n  years: string[];\n  year: string;\n\n  subjects: SubjectModel[];\n  subject: string;\n\n  assignments: AssignmentModel[];\n\n  constructor(\n    private branchService: BranchService,\n    private studentCourseService: StudentCourseService,\n    private studentBranchService: StudentBranchService,\n    private subjectService: SubjectService,\n    private assignmentService: AssignmentService,\n    public dateService: DateService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastrService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.back();\n      return;\n    }\n\n    this.studentBranchService.setType('assignment');\n\n    this.studentCourseService\n      .getStudentCourseData()\n      .subscribe((studentCourse: StudentCourseModel) => {\n        this.studentCourse = studentCourse;\n      });\n\n    this.subjects = [];\n    this.subject = '';\n\n    this.subjectService.getSubjectsData().subscribe((subjects: SubjectModel[]) => {\n      this.subjects = subjects;\n    });\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = (this.dateService.getDate().getMonth() + 1).toString().padStart(2, '0');\n    this.year = this.years[this.years.length - 1];\n\n    this.getAssignments();\n  }\n\n  onSelectSubject(subject: string) {\n    this.subject = subject;\n    this.getAssignments();\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.getAssignments();\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    if (year === '') {\n      this.month = '';\n    }\n    this.getAssignments();\n  }\n\n  getAssignments() {\n    this.loading = true;\n    this.assignmentService\n      .getAssignmentsForStudent(\n        this.branchId,\n        this.studentCourse.category,\n        this.studentCourse.course,\n        this.studentCourse.batch,\n        this.subject,\n        this.month,\n        this.year,\n      )\n      .subscribe(\n        (assignments: AssignmentModel[]) => {\n          this.assignments = assignments;\n          this.loading = false;\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n          this.loading = false;\n        },\n      );\n  }\n\n  assignmentSubmission(assignment: AssignmentModel) {\n    this.assignmentService.setAssignmentId(assignment._id);\n    this.assignmentService.setAssignmentData(assignment);\n    this.router.navigate(['../submission'], { relativeTo: this.route });\n  }\n\n  getSubjectName(id: string) {\n    const subject = this.subjects.find((curSubject: SubjectModel) => curSubject._id === id);\n    if (subject) {\n      return subject.subject;\n    }\n\n    return '--';\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  back() {\n    const type = this.studentBranchService.getType();\n    this.router.navigate(['../'], { relativeTo: this.route, queryParams: { type } });\n  }\n}\n","import {\n  NbCardModule,\n  NbSelectModule,\n  NbButtonModule,\n  NbIconModule,\n  NbTooltipModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageAssignmentRoutingModule } from './manage-assignment-routing.module';\nimport { ManageAssignmentComponent } from './manage-assignment.component';\n\n@NgModule({\n  declarations: [ManageAssignmentComponent],\n  imports: [\n    CommonModule,\n    ManageAssignmentRoutingModule,\n    NbCardModule,\n    NbSelectModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageAssignmentModule {}\n"]}