{"version":3,"sources":["webpack:///src/app/institute/branch/student/add-student/add-student.component.html","webpack:///src/app/institute/branch/student/add-student/add-student-routing.module.ts","webpack:///src/app/institute/branch/student/add-student/add-student.component.ts","webpack:///src/app/institute/branch/student/add-student/add-student.module.ts"],"names":["routes","path","component","AddStudentComponent","branchService","studentService","dateService","userService","toastrService","branchStudentService","encryptService","router","route","this","loading","submit","branchId","getBranchId","navigate","relativeTo","mode","studentId","getStudentId","branchStudentId","getBranchStudentId","queryParams","subscribe","param","showToastr","alreadyRegisteredUser","categories","getCategories","studentSearchForm","validators","required","studentForm","name","minLength","email","phone","maxLength","min","max","birthDate","parentName","parentEmail","parentPhone","address","branchStudentForm","category","admissionDate","getDateString","description","getBranchStudentForEditing","res","student","branchStudent","userExist","patchValue","imsMasterId","disableStudentDetails","err","back","getBranchData","branch","getBranch","setBranchData","error","get","valid","checkUser","value","exist","markAllAsTouched","invalid","searchStudent","enable","disable","stepper","previous","enableStudentDetails","next","newBranchStudent","_id","editBranchStudent","newStudent","password","encrypt","encKey","addStudent","position","status","message","show","categoryId","find","curCategory","type","getStudentType","replaceUrl","deleteStudentId","deleteBranchStudentId","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddStudentRoutingModule","forChild","AddStudentModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card *ngIf=\"!loading\">\r\n  <nb-card-header>\r\n    <button\r\n      type=\"button\"\r\n      class=\"float-right\"\r\n      nbButton\r\n      size=\"small\"\r\n      status=\"warning\"\r\n      (click)=\"back()\"\r\n    >\r\n      Back\r\n    </button>\r\n    <h3 class=\"\">\r\n      {{ !student ? 'Add New Student' : 'Edit Student ' + (student.name | uppercase) }}\r\n    </h3>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\r\n      <nb-step [stepControl]=\"studentForm\" label=\"Basic Details\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12\" *ngIf=\"!student\">\r\n            <nb-checkbox\r\n              id=\"input-already-registered\"\r\n              name=\"alreadyRegistered\"\r\n              [checked]=\"alreadyRegisteredUser\"\r\n              (checkedChange)=\"alreadyRegister($event)\"\r\n              >Already Registered Student</nb-checkbox\r\n            >\r\n          </div>\r\n          <div class=\"col-md-6 col-sm-8\" *ngIf=\"alreadyRegisteredUser || student\">\r\n            <form class=\"\" (submit)=\"searchStudent()\" [formGroup]=\"studentSearchForm\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-student-student-id\">Student Id:</label>\r\n                <nb-form-field>\r\n                  <input\r\n                    type=\"text\"\r\n                    nbInput\r\n                    id=\"input-student-id\"\r\n                    studentId=\"studentId\"\r\n                    formControlName=\"studentId\"\r\n                    placeholder=\"Student Email or IMS Master Id\"\r\n                    fullWidth\r\n                    [status]=\"\r\n                      studentSearchForm.get('studentId').touched\r\n                        ? studentSearchForm.get('studentId').invalid\r\n                          ? 'danger'\r\n                          : 'success'\r\n                        : 'basic'\r\n                    \"\r\n                  />\r\n                  <button\r\n                    nbSuffix\r\n                    nbTooltip=\"Fetch\"\r\n                    nbButton\r\n                    size=\"small\"\r\n                    ghost\r\n                    type=\"submit\"\r\n                    *ngIf=\"!student\"\r\n                  >\r\n                    <nb-icon icon=\"arrow-circle-right-outline\" status=\"success\"> </nb-icon>\r\n                  </button>\r\n                </nb-form-field>\r\n\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentSearchForm.get('studentId').invalid &&\r\n                    studentSearchForm.get('studentId').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentSearchForm.get('studentId').errors?.required\"\r\n                  >\r\n                    Student Id is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <form\r\n          class=\"\"\r\n          (submit)=\"studentFormSubmit()\"\r\n          [formGroup]=\"studentForm\"\r\n          *ngIf=\"!alreadyRegisteredUser\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-student-student-name\">Student Name:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-student-name\"\r\n                  name=\"name\"\r\n                  formControlName=\"name\"\r\n                  placeholder=\"Student Name\"\r\n                  minlength=\"3\"\r\n                  maxlength=\"30\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentForm.get('name').touched\r\n                      ? studentForm.get('name').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"studentForm.get('name').invalid && studentForm.get('name').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"studentForm.get('name').errors?.required\">\r\n                    Student name is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentForm.get('name').errors?.minlength\"\r\n                  >\r\n                    Student Name should contain minimum 3 characters\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-email\">Email address:</label>\r\n                <input\r\n                  type=\"email\"\r\n                  nbInput\r\n                  id=\"input-email\"\r\n                  name=\"email\"\r\n                  formControlName=\"email\"\r\n                  placeholder=\"Email address\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentForm.get('email').touched\r\n                      ? studentForm.get('email').invalid || userExist\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (input)=\"checkUser()\"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    (studentForm.get('email').invalid || userExist) &&\r\n                    studentForm.get('email').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentForm.get('email').errors?.required\"\r\n                  >\r\n                    Email is required!\r\n                  </p>\r\n                  <p class=\"caption status-danger\" *ngIf=\"studentForm.get('email').errors?.email\">\r\n                    Email should be the real one!\r\n                  </p>\r\n                  <p class=\"caption status-danger\" *ngIf=\"userExist\">\r\n                    Email Already registered, Please try another Email!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-phone\">Phone:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-phone\"\r\n                  name=\"phone\"\r\n                  formControlName=\"phone\"\r\n                  placeholder=\"phone\"\r\n                  minlength=\"10\"\r\n                  maxlength=\"10\"\r\n                  min=\"1000000000\"\r\n                  max=\"9999999999\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentForm.get('phone').touched\r\n                      ? studentForm.get('phone').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"studentForm.get('phone').invalid && studentForm.get('phone').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentForm.get('phone').errors?.required\"\r\n                  >\r\n                    Phone is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"\r\n                      studentForm.get('phone').errors?.minlength ||\r\n                      studentForm.get('phone').errors?.maxlength ||\r\n                      studentForm.get('phone').errors?.min ||\r\n                      studentForm.get('phone').errors?.max\r\n                    \"\r\n                  >\r\n                    Phone should contain 10 digits\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-birth-date\">Birth Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-birth-date\"\r\n                  name=\"birthDate\"\r\n                  [max]=\"dateService.getDateString()\"\r\n                  formControlName=\"birthDate\"\r\n                  placeholder=\"Birth Date\"\r\n                  fullWidth\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-address\">Address:</label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-address\"\r\n                  name=\"address\"\r\n                  formControlName=\"address\"\r\n                  placeholder=\"Address (Optional)\"\r\n                  fullWidth\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-parent-name\">Parent Name:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-parent-name\"\r\n                  name=\"parentName\"\r\n                  formControlName=\"parentName\"\r\n                  placeholder=\"Parent Name\"\r\n                  minlength=\"3\"\r\n                  maxlength=\"30\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentForm.get('parentName').touched\r\n                      ? studentForm.get('parentName').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentForm.get('parentName').invalid && studentForm.get('parentName').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentForm.get('parentName').errors?.minlength\"\r\n                  >\r\n                    Parent Name should contain minimum 3 characters\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-parent-email\">Parent Email address:</label>\r\n                <input\r\n                  type=\"parentEmail\"\r\n                  nbInput\r\n                  id=\"input-parent-email\"\r\n                  name=\"parentEmail\"\r\n                  formControlName=\"parentEmail\"\r\n                  placeholder=\"Parent Email address\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentForm.get('parentEmail').touched\r\n                      ? studentForm.get('parentEmail').invalid || userExist\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    (studentForm.get('parentEmail').invalid || userExist) &&\r\n                    studentForm.get('parentEmail').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"studentForm.get('parentEmail').errors?.parentEmail\"\r\n                  >\r\n                    Parent Email should be the real one!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-parent-phone\">Parent Phone:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-parent-phone\"\r\n                  name=\"parentPhone\"\r\n                  formControlName=\"parentPhone\"\r\n                  placeholder=\"Parent Phone\"\r\n                  minlength=\"10\"\r\n                  maxlength=\"10\"\r\n                  min=\"1000000000\"\r\n                  max=\"9999999999\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    studentForm.get('parentPhone').touched\r\n                      ? studentForm.get('parentPhone').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    studentForm.get('parentPhone').invalid && studentForm.get('parentPhone').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"\r\n                      studentForm.get('parentPhone').errors?.minlength ||\r\n                      studentForm.get('parentPhone').errors?.maxlength ||\r\n                      studentForm.get('parentPhone').errors?.min ||\r\n                      studentForm.get('parentPhone').errors?.max\r\n                    \"\r\n                  >\r\n                    Parent Phone should contain 10 digits\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step [stepControl]=\"branchStudentForm\" label=\"Enrollment Details\">\r\n        <form\r\n          [formGroup]=\"branchStudentForm\"\r\n          (ngSubmit)=\"branchStudentFormSubmit()\"\r\n          class=\"step-container\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-category\">Branch Category:</label>\r\n                <nb-select\r\n                  id=\"input-category\"\r\n                  name=\"category\"\r\n                  formControlName=\"category\"\r\n                  placeholder=\"Select Category\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchStudentForm.get('category').touched\r\n                      ? branchStudentForm.get('category').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                >\r\n                  <nb-option value=\"\">Select Category</nb-option>\r\n                  <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\r\n                    category.category\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchStudentForm.get('category').invalid &&\r\n                    branchStudentForm.get('category').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchStudentForm.get('category').errors?.required\"\r\n                  >\r\n                    Branch Category is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-admission-date\">Admission Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-admission-date\"\r\n                  name=\"admissionDate\"\r\n                  formControlName=\"admissionDate\"\r\n                  placeholder=\"admissionDate\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    branchStudentForm.get('admissionDate').touched\r\n                      ? branchStudentForm.get('admissionDate').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    branchStudentForm.get('admissionDate').invalid &&\r\n                    branchStudentForm.get('admissionDate').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"branchStudentForm.get('admissionDate').errors?.required\"\r\n                  >\r\n                    Admission Date is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-description\">Description:</label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-description\"\r\n                  name=\"description\"\r\n                  formControlName=\"description\"\r\n                  placeholder=\"Description (Optional)\"\r\n                  fullWidth\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span><nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step label=\"Submit\">\r\n        <div class=\"step-container\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-bordered\">\r\n              <tbody>\r\n                <tr *ngIf=\"studentSearchForm.value.studentId\">\r\n                  <th>IMS Id</th>\r\n                  <td>{{ studentSearchForm.value.studentId }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Student Name</th>\r\n                  <td>{{ studentForm.value.name }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Email</th>\r\n                  <td>{{ studentForm.value.email }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Phone</th>\r\n                  <td>{{ studentForm.value.phone }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Address</th>\r\n                  <td>{{ studentForm.value.address ? studentForm.value.address : '--' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Parent Name</th>\r\n                  <td>{{ studentForm.value.parentName ? studentForm.value.parentName : '--' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Parent Email</th>\r\n                  <td>\r\n                    {{ studentForm.value.parentEmail ? studentForm.value.parentEmail : '--' }}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Parent Phone</th>\r\n                  <td>\r\n                    {{ studentForm.value.parentPhone ? studentForm.value.parentPhone : '--' }}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Category</th>\r\n                  <td>{{ getCategory(branchStudentForm.value.category) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Admission Date</th>\r\n                  <td>{{ dateService.formatDate(branchStudentForm.value.admissionDate) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Description</th>\r\n                  <td>\r\n                    {{ branchStudentForm.value.description ? studentForm.value.description : '--' }}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"\"\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"previousStep()\"\r\n                [disabled]=\"submit\"\r\n              >\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"saveStudent()\"\r\n                [disabled]=\"submit\"\r\n                [nbSpinner]=\"submit\"\r\n                nbSpinnerStatus=\"primary\"\r\n                nbSpinnerSize=\"small\"\r\n              >\r\n                <span>Submit</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-step>\r\n    </nb-stepper>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddStudentComponent } from './add-student.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddStudentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddStudentRoutingModule {}\n","import { CategoryModel, BranchModel } from './../../../../models/branch.model';\r\nimport { DateService } from './../../../../services/shared-services/date.service';\r\nimport { UserService } from './../../../../services/shared-services/user.service';\r\nimport { environment } from './../../../../../environments/environment.prod';\r\nimport { EncryptService } from './../../../../services/shared-services/encrypt.service';\r\nimport { BranchStudentService } from '../../../../services/branch-student.service';\r\nimport { StudentService } from './../../../../services/student.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { StudentModel } from './../../../../models/student.model';\r\nimport { BranchStudentModel } from '../../../../models/branch-student.model';\r\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { BranchService } from './../../../../services/branch.service';\r\n\r\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-add-student',\r\n  templateUrl: './add-student.component.html',\r\n  styleUrls: ['./add-student.component.scss'],\r\n})\r\nexport class AddStudentComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  private branchId: string;\r\n  private studentId: string;\r\n  private branchStudentId: string;\r\n  roles: string[];\r\n  userExist: boolean;\r\n\r\n  alreadyRegisteredUser: boolean;\r\n\r\n  student: StudentModel;\r\n  branchStudent: BranchStudentModel;\r\n  categories: CategoryModel[];\r\n\r\n  studentForm: FormGroup;\r\n  branchStudentForm: FormGroup;\r\n  studentSearchForm: FormGroup;\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private studentService: StudentService,\r\n    public dateService: DateService,\r\n    private userService: UserService,\r\n    private toastrService: NbToastrService,\r\n    private branchStudentService: BranchStudentService,\r\n    private encryptService: EncryptService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    // route.queryParams.subscribe((param: Params) => {\r\n    //   // put the code from `ngOnInit` here\r\n    //   this.ngOnInit();\r\n    // });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.studentId = this.studentService.getStudentId();\r\n    this.branchStudentId = this.branchStudentService.getBranchStudentId();\r\n\r\n    let mode: string;\r\n\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      mode = param.mode;\r\n    });\r\n\r\n    if (mode && mode !== 'edit') {\r\n      this.showToastr('top-right', 'danger', 'Invalid Route');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    } else if (mode && !this.studentId && !this.branchStudentId) {\r\n      this.showToastr('top-right', 'danger', 'Student Not Found');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.alreadyRegisteredUser = false;\r\n\r\n    this.categories = [];\r\n\r\n    this.getCategories();\r\n\r\n    this.studentSearchForm = new FormGroup({\r\n      studentId: new FormControl(null, { validators: [Validators.required] }),\r\n    });\r\n\r\n    this.studentForm = new FormGroup({\r\n      name: new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }),\r\n      email: new FormControl(null, { validators: [Validators.required, Validators.email] }),\r\n      phone: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(10),\r\n          Validators.maxLength(10),\r\n          Validators.min(1000000000),\r\n          Validators.max(9999999999),\r\n        ],\r\n      }),\r\n      birthDate: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n      parentName: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n      parentEmail: new FormControl(null, {\r\n        validators: [Validators.email],\r\n      }),\r\n      parentPhone: new FormControl(null, {\r\n        validators: [\r\n          Validators.minLength(10),\r\n          Validators.maxLength(10),\r\n          Validators.min(1000000000),\r\n          Validators.max(9999999999),\r\n        ],\r\n      }),\r\n      address: new FormControl(null, { validators: [] }),\r\n    });\r\n\r\n    this.branchStudentForm = new FormGroup({\r\n      category: new FormControl('', {\r\n        validators: [Validators.required],\r\n      }),\r\n      admissionDate: new FormControl(this.dateService.getDateString(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      description: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n    });\r\n\r\n    if (mode && this.studentId && this.branchStudentId) {\r\n      this.branchStudentService\r\n        .getBranchStudentForEditing(this.branchStudentId, this.studentId)\r\n        .subscribe(\r\n          (res: any) => {\r\n            this.student = res.student;\r\n            this.branchStudent = res.branchStudent;\r\n            this.userExist = false;\r\n            this.studentSearchForm.patchValue({\r\n              studentId: this.student.imsMasterId,\r\n            });\r\n\r\n            this.studentForm.patchValue({\r\n              name: this.student.name,\r\n              email: this.student.email,\r\n              phone: this.student.phone,\r\n              parentName: this.student.parentName,\r\n              parentEmail: this.student.parentEmail,\r\n              parentPhone: this.student.parentPhone,\r\n              birthDate: this.student.birthDate,\r\n              address: this.student.address,\r\n            });\r\n\r\n            this.disableStudentDetails();\r\n\r\n            this.branchStudentForm.patchValue({\r\n              category: this.branchStudent.category,\r\n              admissionDate: this.branchStudent.admissionDate,\r\n              description: this.branchStudent.description,\r\n            });\r\n\r\n            this.loading = false;\r\n          },\r\n          (err: any) => {\r\n            this.showToastr('top-right', 'danger', err);\r\n            this.back();\r\n          },\r\n        );\r\n    } else {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  private getCategories() {\r\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\r\n      if (branch) {\r\n        this.categories = branch.categories;\r\n      }\r\n    });\r\n\r\n    if (!this.categories) {\r\n      this.branchService.getBranch(this.branchId).subscribe(\r\n        (branch: BranchModel) => {\r\n          this.branchService.setBranchData(branch);\r\n          this.categories = branch.categories;\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.loading = false;\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  checkUser() {\r\n    if (this.studentForm.get('email').valid && !this.student) {\r\n      this.userService.checkUser(this.studentForm.value.email).subscribe(\r\n        (res: any) => {\r\n          this.userExist = res.exist;\r\n        },\r\n        (error: any) => {},\r\n      );\r\n    }\r\n  }\r\n\r\n  alreadyRegister(alreadyRegisteredUser: boolean) {\r\n    this.alreadyRegisteredUser = alreadyRegisteredUser;\r\n  }\r\n\r\n  searchStudent() {\r\n    this.studentSearchForm.markAllAsTouched();\r\n    if (this.studentSearchForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Enter Student Id');\r\n      return;\r\n    }\r\n    this.studentId = this.studentSearchForm.value.studentId;\r\n    this.loading = true;\r\n    this.studentService.searchStudent(this.studentId).subscribe(\r\n      (student: StudentModel) => {\r\n        this.student = student;\r\n\r\n        this.studentId = student.imsMasterId;\r\n        this.userExist = false;\r\n        this.alreadyRegisteredUser = false;\r\n\r\n        this.studentSearchForm.patchValue({\r\n          studentId: this.student.imsMasterId,\r\n        });\r\n\r\n        this.studentForm.patchValue({\r\n          name: this.student.name,\r\n          email: this.student.email,\r\n          phone: this.student.phone,\r\n          parentName: this.student.parentName,\r\n          parentEmail: this.student.parentEmail,\r\n          parentPhone: this.student.parentPhone,\r\n          birthDate: this.student.birthDate,\r\n          address: this.student.address,\r\n        });\r\n\r\n        this.disableStudentDetails();\r\n\r\n        this.loading = false;\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.studentId = null;\r\n        this.loading = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  private enableStudentDetails() {\r\n    this.studentForm.get('name').enable();\r\n    this.studentForm.get('email').enable();\r\n    this.studentForm.get('phone').enable();\r\n    this.studentForm.get('parentName').enable();\r\n    this.studentForm.get('parentEmail').enable();\r\n    this.studentForm.get('parentPhone').enable();\r\n    this.studentForm.get('birthDate').enable();\r\n    this.studentForm.get('address').enable();\r\n    this.studentSearchForm.get('studentId').enable();\r\n  }\r\n\r\n  private disableStudentDetails() {\r\n    this.studentForm.get('name').disable();\r\n    this.studentForm.get('email').disable();\r\n    this.studentForm.get('phone').disable();\r\n    this.studentForm.get('parentName').disable();\r\n    this.studentForm.get('parentEmail').disable();\r\n    this.studentForm.get('parentPhone').disable();\r\n    this.studentForm.get('birthDate').disable();\r\n    this.studentForm.get('address').disable();\r\n    this.studentSearchForm.get('studentId').disable();\r\n  }\r\n\r\n  previousStep() {\r\n    this.stepper.previous();\r\n    if (this.student) {\r\n      this.disableStudentDetails();\r\n    }\r\n  }\r\n\r\n  studentFormSubmit() {\r\n    this.studentForm.markAllAsTouched();\r\n    if (this.studentForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Details are Required');\r\n      return;\r\n    } else if (this.userExist) {\r\n      this.showToastr('top-right', 'danger', 'User with this email address is already Exist');\r\n      return;\r\n    }\r\n    if (this.student) {\r\n      this.enableStudentDetails();\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  branchStudentFormSubmit() {\r\n    this.branchStudentForm.markAllAsTouched();\r\n    if (this.studentForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Branch Details are Required');\r\n      return;\r\n    }\r\n\r\n    this.stepper.next();\r\n  }\r\n\r\n  saveStudent() {\r\n    this.studentForm.markAllAsTouched();\r\n    this.branchStudentForm.markAllAsTouched();\r\n\r\n    if (this.studentForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Details are Required');\r\n      return;\r\n    } else if (this.studentForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Student Branch Details are Required');\r\n      return;\r\n    }\r\n\r\n    this.submit = true;\r\n\r\n    if (!this.studentId && !this.branchStudentId) {\r\n      const newStudent: any = this.studentForm.value;\r\n      newStudent.password = this.encryptService.encrypt(newStudent.phone, environment.encKey);\r\n      const newBranchStudent: any = this.branchStudentForm.value;\r\n      newBranchStudent.branch = this.branchId;\r\n      this.studentService.addStudent(newStudent, newBranchStudent).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Student Added Successfully');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else if (this.studentId && !this.branchStudentId) {\r\n      const newBranchStudent: any = this.branchStudentForm.value;\r\n      newBranchStudent.branch = this.branchId;\r\n      newBranchStudent.student = this.studentId;\r\n      this.branchStudentService.newBranchStudent(newBranchStudent).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Branch Student added Successfully');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else if (this.studentId && this.branchStudentId) {\r\n      const branchStudent: any = this.branchStudentForm.value;\r\n      branchStudent._id = this.branchStudentId;\r\n      this.branchStudentService.editBranchStudent(branchStudent).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'Student Updated Successfully');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else {\r\n      this.showToastr('top-right', 'danger', 'Invalid data');\r\n      this.submit = false;\r\n    }\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  getCategory(categoryId: string) {\r\n    const category = this.categories.find(\r\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\r\n    );\r\n\r\n    if (category) {\r\n      return category.category;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  back() {\r\n    const type = this.studentService.getStudentType();\r\n    this.router.navigate(['../'], {\r\n      relativeTo: this.route,\r\n      queryParams: { type },\r\n      replaceUrl: true,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.studentService.deleteStudentId();\r\n    this.branchStudentService.deleteBranchStudentId();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddStudentRoutingModule } from './add-student-routing.module';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbSelectModule,\n  NbCheckboxModule,\n  NbInputModule,\n  NbButtonModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n} from '@nebular/theme';\n\nimport { AddStudentComponent } from './add-student.component';\n\n@NgModule({\n  declarations: [AddStudentComponent],\n  imports: [\n    CommonModule,\n    AddStudentRoutingModule,\n\n    NbCardModule,\n    NbSelectModule,\n    NbCheckboxModule,\n    NbFormFieldModule,\n    NbInputModule,\n    NbButtonModule,\n    NbIconModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbTooltipModule,\n\n    ReactiveFormsModule,\n  ],\n})\nexport class AddStudentModule {}\n"]}