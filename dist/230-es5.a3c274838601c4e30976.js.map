{"version":3,"sources":["webpack:///src/app/student/checkout/checkout.component.ts","webpack:///src/app/services/institute-order.service.ts","webpack:///src/app/student/payment/payment.component.ts","webpack:///src/app/student/checkout/checkout.component.html","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment.component.html","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment-routing.module.ts","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment.component.ts","webpack:///src/app/student/branch/course/course-installment/manage-course-installment/manage-course-installment.module.ts"],"names":["CheckoutComponent","InstituteOrderService","PaymentComponent","dateService","studentCourseService","studentCourseInstallmentService","toastrService","ref","this","getStudentCourseData","subscribe","studentCourse","getStudentCourseInstallmentData","courseInstallment","getCourseInstallmentData","installment","onClose","close","status","checkout","httpService","instituteOrderDetails","instituteOrder","id","httpPost","api","data","pipe","map","response","catchError","err","throwError","branchService","paymentService","instituteKeysService","instituteOrderService","authService","loading","user","getUserData","branchId","getBranchId","getBranchData","branch","paymentGatewayAccessKey","getLocalInstitutePaymentAccessKey","studentCourseInstallment","orderDetails","userId","_id","userPhone","phone","userName","name","userEmail","email","imsMasterId","amount","installmentAmount","studentInstallment","options","key","currency","basicDetails","branchName","description","getPaymentDescription","order_id","handler","verifyPayment","modal","ondismiss","deleteOrder","prefill","contact","notes","address","theme","color","razorPay","Razorpay","generateOrder","installmentNo","courseName","generateInstituteOrder","res","placedOrderReceipt","paymentReceipt","order","pay","showToastr","open","deleteInstituteOrder","payment","verifyInstitutePayment","orderId","receipt","receiptId","position","message","show","ManageCourseInstallmentComponent","ManageCourseInstallmentModule","ManageCourseInstallmentRoutingModule","routes","path","component","dialogService","studentCourseInstallmentReceiptService","router","route","submit","studentCourseInstallmentId","getStudentCourseInstallmentId","getStudentCourseInstallment","navigate","relativeTo","setStudentCourseInstallmentData","setStudentCourseInstallmentReceiptId","generateStudentCourseInstallmentReceipt","context","closeOnBackdropClick","closeOnEsc","onClosePayment","setCourseInstallmentId","setCourseInstallmentData","onCheckout","error","deleteStudentCourseInstallmentData","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { DateService } from './../../services/shared-services/date.service';\r\nimport { StudentCourseService } from './../../services/student-course.service';\r\nimport { StudentCourseModel } from './../../models/student-course.model';\r\nimport {\r\n  InstallmentModel,\r\n  StudentCourseInstallmentModel,\r\n} from './../../models/student-course-installment.model';\r\nimport { StudentCourseInstallmentService } from './../../services/student-course-installment.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NbDialogRef, NbToastrService } from '@nebular/theme';\r\nimport { CheckoutService } from '../../services/checkout.service';\r\nimport { PaymentService } from '../../services/payment.service';\r\n\r\n@Component({\r\n  selector: 'ngx-checkout',\r\n  templateUrl: './checkout.component.html',\r\n  styleUrls: ['./checkout.component.scss'],\r\n})\r\nexport class CheckoutComponent implements OnInit {\r\n  courseInstallment: StudentCourseInstallmentModel;\r\n  installment: InstallmentModel;\r\n  studentCourse: StudentCourseModel;\r\n\r\n  constructor(\r\n    public dateService: DateService,\r\n    private studentCourseService: StudentCourseService,\r\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\r\n    private toastrService: NbToastrService,\r\n    protected ref: NbDialogRef<CheckoutComponent>,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.studentCourseService\r\n      .getStudentCourseData()\r\n      .subscribe((studentCourse: StudentCourseModel) => {\r\n        this.studentCourse = studentCourse;\r\n      });\r\n\r\n    this.studentCourseInstallmentService\r\n      .getStudentCourseInstallmentData()\r\n      .subscribe((courseInstallment: StudentCourseInstallmentModel) => {\r\n        this.courseInstallment = courseInstallment;\r\n      });\r\n\r\n    this.studentCourseInstallmentService\r\n      .getCourseInstallmentData()\r\n      .subscribe((installment: InstallmentModel) => {\r\n        this.installment = installment;\r\n      });\r\n\r\n    if (!this.installment && !this.courseInstallment) {\r\n      this.onClose();\r\n    }\r\n  }\r\n\r\n  onClose() {\r\n    this.ref.close({ status: false });\r\n  }\r\n\r\n  checkout() {\r\n    this.ref.close({ status: true });\r\n  }\r\n}\r\n","import { HttpService } from './shared-services/http.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class InstituteOrderService {\r\n  private instituteOrderDetails: any;\r\n\r\n  getInstituteOrderDetails() {\r\n    return this.instituteOrderDetails;\r\n  }\r\n\r\n  setInstituteOrderDetails(instituteOrder: any) {\r\n    this.instituteOrderDetails = instituteOrder;\r\n  }\r\n\r\n  deleteInstituteOrderDetails() {\r\n    this.instituteOrderDetails = null;\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  deleteInstituteOrder(id: string) {\r\n    const data = { api: 'deleteInstituteOrder', data: { id } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  generateInstituteOrder(instituteOrder: any) {\r\n    const data = { api: 'generateInstituteOrder', data: instituteOrder };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { StudentCourseService } from './../../services/student-course.service';\r\nimport { StudentCourseModel } from './../../models/student-course.model';\r\nimport { BranchModel } from './../../models/branch.model';\r\nimport { BranchService } from './../../services/branch.service';\r\nimport {\r\n  StudentCourseInstallmentModel,\r\n  InstallmentModel,\r\n} from './../../models/student-course-installment.model';\r\nimport { InstituteOrderService } from './../../services/institute-order.service';\r\nimport { StudentCourseInstallmentService } from './../../services/student-course-installment.service';\r\nimport { InstituteKeysService } from './../../services/institute-keys.service';\r\nimport { AuthService } from './../../authentication/auth/auth-service/auth.service';\r\nimport { PaymentService } from './../../services/payment.service';\r\nimport { NbToastrService, NbDialogRef } from '@nebular/theme';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\ndeclare const Razorpay: any;\r\n@Component({\r\n  selector: 'ngx-payment',\r\n  templateUrl: './payment.component.html',\r\n  styleUrls: ['./payment.component.scss'],\r\n})\r\nexport class PaymentComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n  private user: any;\r\n  private branchId: string;\r\n  private orderDetails: any;\r\n  private options: any;\r\n  private razorPay: any;\r\n  private placedOrderReceipt: any;\r\n\r\n  branch: BranchModel;\r\n\r\n  private paymentGatewayAccessKey: string;\r\n\r\n  studentCourseInstallment: StudentCourseInstallmentModel;\r\n  courseInstallment: InstallmentModel;\r\n  studentCourse: StudentCourseModel;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private paymentService: PaymentService,\r\n    private instituteKeysService: InstituteKeysService,\r\n    private studentCourseService: StudentCourseService,\r\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\r\n    private instituteOrderService: InstituteOrderService,\r\n    private authService: AuthService,\r\n    private toastrService: NbToastrService,\r\n    protected ref: NbDialogRef<PaymentComponent>, // private router: Router, // private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n\r\n    this.user = this.authService.getUserData();\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n\r\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\r\n      this.branch = branch;\r\n    });\r\n\r\n    this.studentCourseService\r\n      .getStudentCourseData()\r\n      .subscribe((studentCourse: StudentCourseModel) => {\r\n        this.studentCourse = studentCourse;\r\n      });\r\n\r\n    this.paymentGatewayAccessKey = this.instituteKeysService.getLocalInstitutePaymentAccessKey();\r\n\r\n    if (!this.branchId || !this.paymentGatewayAccessKey) {\r\n      this.onClose();\r\n      return;\r\n    }\r\n\r\n    this.studentCourseInstallmentService\r\n      .getStudentCourseInstallmentData()\r\n      .subscribe((studentCourseInstallment: StudentCourseInstallmentModel) => {\r\n        this.studentCourseInstallment = studentCourseInstallment;\r\n      });\r\n\r\n    this.studentCourseInstallmentService\r\n      .getCourseInstallmentData()\r\n      .subscribe((courseInstallment: InstallmentModel) => {\r\n        this.courseInstallment = courseInstallment;\r\n      });\r\n\r\n    this.orderDetails = {\r\n      userId: this.user._id,\r\n      userPhone: this.user.phone,\r\n      userName: this.user.name,\r\n      userEmail: this.user.email,\r\n      imsMasterId: this.user.imsMasterId,\r\n      amount: this.courseInstallment.installmentAmount,\r\n      studentInstallment: this.studentCourseInstallment._id,\r\n      installment: this.courseInstallment._id,\r\n      branch: this.branchId,\r\n    };\r\n\r\n    this.options = {\r\n      key: this.paymentGatewayAccessKey, // Enter the Key ID generated from the Dashboard\r\n      amount: '', // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      currency: 'INR',\r\n      name: this.branch ? this.branch.basicDetails.branchName : 'Institute Fees',\r\n      description: this.getPaymentDescription(),\r\n      // image: '../../../assets/brand/class-master-mini.png',\r\n      // tslint:disable-next-line: max-line-length\r\n      order_id: '', // This is a sample Order ID. Pass the `id` obtained in the response of Step 1 order_9A33XWu170gUtm\r\n      handler: (response: any) => {\r\n        this.verifyPayment(response);\r\n      },\r\n      modal: {\r\n        ondismiss: () => {\r\n          this.deleteOrder();\r\n        },\r\n      },\r\n      prefill: {\r\n        name: this.user.name,\r\n        email: this.user.email,\r\n        contact: this.user.phone,\r\n      },\r\n      notes: {\r\n        address: '',\r\n      },\r\n      theme: {\r\n        color: '#528FF0',\r\n      },\r\n    };\r\n\r\n    this.razorPay = new Razorpay(this.options);\r\n\r\n    this.generateOrder();\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  getPaymentDescription() {\r\n    return `Installment ${this.courseInstallment.installmentNo} of Course ${this.studentCourse.courseName}`;\r\n  }\r\n\r\n  private generateOrder() {\r\n    this.instituteOrderService.generateInstituteOrder(this.orderDetails).subscribe(\r\n      (res: any) => {\r\n        this.placedOrderReceipt = res.paymentReceipt;\r\n        // this.options.amount = res.order.amount;\r\n        this.options.amount = '1';\r\n        this.options.order_id = res.order.id;\r\n        this.options.currency = res.order.currency;\r\n        this.options.prefill.name = this.user.name;\r\n        this.options.prefill.email = this.user.email;\r\n        this.options.prefill.contact = this.user.phone;\r\n        this.razorPay = new Razorpay(this.options);\r\n        this.pay();\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.onClose();\r\n      },\r\n    );\r\n  }\r\n\r\n  private pay() {\r\n    this.razorPay.open();\r\n  }\r\n\r\n  private deleteOrder() {\r\n    this.instituteOrderService.deleteInstituteOrder(this.placedOrderReceipt._id).subscribe(\r\n      (res: any) => {\r\n        this.placedOrderReceipt = null;\r\n        this.ref.close({ status: false });\r\n      },\r\n      (err: any) => {\r\n        this.showToastr('top-right', 'danger', err);\r\n        this.onClose();\r\n      },\r\n    );\r\n  }\r\n\r\n  verifyPayment(payment: any) {\r\n    this.paymentService\r\n      .verifyInstitutePayment(this.branchId, payment, this.placedOrderReceipt)\r\n      .subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'Payment Verified Successfully');\r\n          this.ref.close({ status: true, order: res.orderId, receipt: res.receiptId });\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.onClose();\r\n        },\r\n      );\r\n  }\r\n\r\n  onClose() {\r\n    this.ref.close();\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","<nb-card class=\"checkout\">\r\n  <nb-card-header>\r\n    <button class=\"float-right\" nbButton size=\"small\" (click)=\"onClose()\">\r\n      <nb-icon icon=\"close\"></nb-icon>\r\n    </button>\r\n    <h3>Checkout</h3>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-bordered\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Category:</th>\r\n            <td>{{ studentCourse.categoryName }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Course/Batch:</th>\r\n            <td>{{ studentCourse.courseName }}/{{ studentCourse.batchName }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Date:</th>\r\n            <td>{{ dateService.formatDate(courseInstallment.date) }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Installment No:</th>\r\n            <td>{{ installment.installmentNo }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Installment Date:</th>\r\n            <td>{{ dateService.formatDate(installment.installmentDate) }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Installment Amount:</th>\r\n            <td>{{ installment.installmentAmount }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </nb-card-body>\r\n  <nb-card-footer>\r\n    <button class=\"float-right\" nbButton size=\"small\" status=\"primary\" (click)=\"checkout()\">\r\n      Checkout\r\n    </button>\r\n  </nb-card-footer>\r\n</nb-card>\r\n","<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9\">\n        <h3>Installments</h3>\n      </div>\n    </div>\n  </nb-card-header>\n  <nb-card-body class=\"body-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <ng-container *ngIf=\"!loading; else loadingData\">\n          <div class=\"table-responsive\">\n            <table class=\"table\">\n              <tbody>\n                <tr class=\"border shadow-sm\">\n                  <td>\n                    <span> <strong>Category: </strong>{{ studentCourse.categoryName }} </span>\n                    <br />\n                    <span>\n                      <strong>Course/Batch: </strong>{{ studentCourse.courseName }}/{{\n                        studentCourse.batchName\n                      }}\n                    </span>\n                    <br />\n                    <span>\n                      <strong>Date: </strong\n                      >{{ dateService.formatDate(studentCourseInstallment.date) }}\n                    </span>\n                  </td>\n                  <td>\n                    <span>\n                      <strong>Collected Amount: </strong\n                      >{{ studentCourseInstallment.amountCollected }}\n                    </span>\n                    <br />\n                    <span>\n                      <strong>Pending Amount: </strong>{{ studentCourseInstallment.pendingAmount }}\n                    </span>\n                    <br />\n                    <span\n                      ><strong>Total Amount: </strong\n                      >{{ studentCourseInstallment.totalAmount }}</span\n                    >\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <br />\n\n          <div\n            class=\"table-responsive\"\n            *ngIf=\"\n              studentCourseInstallment.installments.length > 0;\n              else noStudentCourseInstallments\n            \"\n          >\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Installment No</th>\n                  <th>Installment Date</th>\n                  <th>Installment Amount</th>\n                  <th>Pending Amount</th>\n                  <th>{{ paymentGatewayAccessKey ? 'Pay/' : '' }}Receipt</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr\n                  *ngFor=\"let installment of studentCourseInstallment.installments; let i = index\"\n                >\n                  <td>Installment {{ installment.installmentNo }}</td>\n                  <td>{{ dateService.formatDate(installment.installmentDate) }}</td>\n                  <td>{{ installment.installmentAmount }}</td>\n                  <td>{{ installment.amountPending }}</td>\n                  <td>\n                    <button\n                      nbButton\n                      size=\"small\"\n                      [status]=\"installment.receiptId ? 'success' : 'info'\"\n                      (click)=\"\n                        installment.receiptId\n                          ? showReceipt(installment.receiptId)\n                          : payInstallment(installment)\n                      \"\n                      [disabled]=\"submit\"\n                      *ngIf=\"installment.receiptId || paymentGatewayAccessKey\"\n                    >\n                      {{ installment.receiptId ? 'Receipt' : ' Pay' }}\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <ng-template #noStudentCourseInstallments>\n            <p class=\"text-center pt-5 pb-5\">No Course Installments Available</p>\n          </ng-template>\n        </ng-container>\n        <ng-template #loadingData>\n          <p class=\"text-center pt-5 pb-5\">Loading...</p>\n        </ng-template>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { ManageCourseInstallmentComponent } from './manage-course-installment.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ManageCourseInstallmentComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageCourseInstallmentRoutingModule {}\n","import { CheckoutComponent } from './../../../../checkout/checkout.component';\r\nimport { PaymentComponent } from './../../../../payment/payment.component';\r\nimport { PaymentService } from './../../../../../services/payment.service';\r\nimport { InstituteKeysService } from './../../../../../services/institute-keys.service';\r\nimport { StudentCourseService } from './../../../../../services/student-course.service';\r\nimport { StudentCourseModel } from './../../../../../models/student-course.model';\r\nimport { StudentCourseInstallmentReceiptService } from './../../../../../services/student-course-installment-receipt.service';\r\nimport { DateService } from './../../../../../services/shared-services/date.service';\r\nimport {\r\n  InstallmentModel,\r\n  StudentCourseInstallmentModel,\r\n} from './../../../../../models/student-course-installment.model';\r\nimport { StudentCourseInstallmentService } from './../../../../../services/student-course-installment.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { BranchService } from './../../../../../services/branch.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-manage-course-installment',\r\n  templateUrl: './manage-course-installment.component.html',\r\n  styleUrls: ['./manage-course-installment.component.scss'],\r\n})\r\nexport class ManageCourseInstallmentComponent implements OnInit, OnDestroy {\r\n  loading: boolean;\r\n\r\n  submit: boolean;\r\n\r\n  private branchId: string;\r\n  private studentCourseInstallmentId: string;\r\n\r\n  paymentGatewayAccessKey: string;\r\n\r\n  studentCourseInstallment: StudentCourseInstallmentModel;\r\n  studentCourse: StudentCourseModel;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    public dateService: DateService,\r\n    public toastrService: NbToastrService,\r\n    private studentCourseService: StudentCourseService,\r\n    private instituteKeysService: InstituteKeysService,\r\n    private paymentService: PaymentService,\r\n    private dialogService: NbDialogService,\r\n    private studentCourseInstallmentService: StudentCourseInstallmentService,\r\n    private studentCourseInstallmentReceiptService: StudentCourseInstallmentReceiptService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    this.studentCourseInstallmentId = this.studentCourseInstallmentService.getStudentCourseInstallmentId();\r\n\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.paymentGatewayAccessKey = this.instituteKeysService.getLocalInstitutePaymentAccessKey();\r\n\r\n    this.studentCourseService\r\n      .getStudentCourseData()\r\n      .subscribe((studentCourse: StudentCourseModel) => {\r\n        this.studentCourse = studentCourse;\r\n      });\r\n\r\n    this.getStudentCourseInstallment();\r\n  }\r\n\r\n  getStudentCourseInstallment() {\r\n    this.loading = true;\r\n    this.studentCourseInstallmentService\r\n      .getStudentCourseInstallment(this.studentCourseInstallmentId)\r\n      .subscribe(\r\n        (studentCourseInstallment: StudentCourseInstallmentModel) => {\r\n          this.studentCourseInstallmentService.setStudentCourseInstallmentData(\r\n            studentCourseInstallment,\r\n          );\r\n          this.studentCourseInstallment = studentCourseInstallment;\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.loading = false;\r\n        },\r\n      );\r\n  }\r\n\r\n  showReceipt(receiptId: string) {\r\n    this.studentCourseInstallmentReceiptService.setStudentCourseInstallmentReceiptId(receiptId);\r\n    this.router.navigate(['../receipt'], { relativeTo: this.route });\r\n  }\r\n\r\n  onClosePayment(order: any) {\r\n    if (order.status) {\r\n      this.generateStudentCourseInstallmentReceipt(order.order, order.receipt);\r\n    }\r\n  }\r\n\r\n  onCheckout(checkout: any) {\r\n    if (checkout.status) {\r\n      this.dialogService\r\n        .open(PaymentComponent, {\r\n          context: {},\r\n          closeOnBackdropClick: false,\r\n          closeOnEsc: false,\r\n        })\r\n        .onClose.subscribe((order: any) => order && this.onClosePayment(order));\r\n    }\r\n  }\r\n\r\n  payInstallment(installment: InstallmentModel) {\r\n    if (this.paymentGatewayAccessKey) {\r\n      this.studentCourseInstallmentService.setCourseInstallmentId(installment._id);\r\n      this.studentCourseInstallmentService.setCourseInstallmentData(installment);\r\n      this.dialogService\r\n        .open(CheckoutComponent, {\r\n          context: {},\r\n          closeOnBackdropClick: false,\r\n          closeOnEsc: false,\r\n        })\r\n        .onClose.subscribe((checkout: any) => checkout && this.onCheckout(checkout));\r\n    }\r\n  }\r\n\r\n  generateStudentCourseInstallmentReceipt(order: string, receipt: string) {\r\n    this.submit = true;\r\n\r\n    this.studentCourseInstallmentReceiptService\r\n      .generateStudentCourseInstallmentReceipt(order, receipt)\r\n      .subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'Receipt Generated Successfully');\r\n          this.submit = false;\r\n          this.getStudentCourseInstallment();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.studentCourseInstallmentService.deleteStudentCourseInstallmentData();\r\n  }\r\n}\r\n","import { NbCardModule, NbButtonModule, NbIconModule, NbTooltipModule } from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageCourseInstallmentRoutingModule } from './manage-course-installment-routing.module';\nimport { ManageCourseInstallmentComponent } from './manage-course-installment.component';\n\n@NgModule({\n  declarations: [ManageCourseInstallmentComponent],\n  imports: [\n    CommonModule,\n    ManageCourseInstallmentRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbTooltipModule,\n  ],\n})\nexport class ManageCourseInstallmentModule {}\n"]}