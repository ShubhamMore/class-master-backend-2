{"version":3,"sources":["webpack:///src/app/employee/branch/employee/manage-employee-salary/add-salary/add-salary.component.html","webpack:///src/app/employee/branch/employee/manage-employee-salary/add-salary/add-salary-routing.module.ts","webpack:///src/app/employee/branch/employee/manage-employee-salary/add-salary/add-salary.component.ts","webpack:///src/app/employee/branch/employee/manage-employee-salary/add-salary/add-salary.module.ts"],"names":["AddSalaryComponent","AddSalaryModule","AddSalaryRoutingModule","routes","path","component","branchService","employeeService","branchEmployeeService","employeeSalaryService","dateService","toastrService","router","route","this","loading","submit","branchId","getBranchId","getEmployeeData","subscribe","employee","getBranchEmployeeData","branchEmployee","ernDeduction","earnings","description","amount","parseFloat","basicSalary","toFixed","deductions","years","getYears","months","getMonths","salaryForm","date","getDateString","validators","required","month","getCurrentMonth","year","getCurrentYear","basicAmount","get","disable","ernDeductForm","min","paymentDetailsForm","generatedBy","paymentMode","bankDetails","transactionDetails","navigate","relativeTo","invalid","showToastr","extras","value","push","reset","ernDeduct","i","splice","totalEarningAmount","forEach","earning","totalDeductionAmount","deduction","totalEarning","totalDeduction","toString","netSalary","getNetSalary","numberToWords","stepper","selectedIndex","previous","markAllAsTouched","next","enable","employeeSalary","branch","imsMasterId","role","netSalaryInWords","getNetSalaryInWords","addEmployeeSalary","res","back","error","position","status","message","show","type","getEmployeeType","queryParams","deleteEmployeeId","deleteBranchEmployeeId","salaryFormSubmit","addErnDeduct","ernDeductChange","previousStep","ernDeductFormSubmit","paymentDetailsFormSubmit","saveEmployee","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"klBAkBI,yCACE,yCAAsC,0CAAQ,iCAAK,8BAAU,yBAAmB,8BAChF,yCACE,0CAAQ,mCAAO,8BAAU,yBAC3B,8BACA,yCAAsC,2CAAQ,mCAAM,8BAAU,0BAAoB,8BAClF,0CAAsC,2CAAQ,mCAAM,8BAAU,0BAAoB,8BAClF,0CACE,2CAAQ,kCAAK,8BAAU,0B,sCACzB,8BACA,0CACE,2CAAQ,0CAAa,8BAAU,0BACjC,8BACF,+B,0CAZ+D,sFAElC,8FAEmC,uFACA,uFAErC,8HAGQ,uG,sBAgCrB,wCACE,+CACF,+B,yBALF,0CAGE,0CAGF,wC,0CAHmC,mJ,yBAWjC,gDAAgE,yBAE9D,+B,uBAFsC,6CAAwB,uE,sBAOhE,wCACE,iDACF,+B,yBALF,0CAGE,0CAGF,wC,0CAHmC,qJ,yBAWjC,gDAAqD,yBAAU,+B,uBAAzB,qCAAe,iE,sBAKrD,wCACE,gDACF,+B,yBALF,0CAGE,0CAGF,wC,0CAHmC,mJ,sBAgCjC,wCAIE,uDACF,+B,sBACA,wCAIE,oEACF,+B,yBAhBF,0CAKE,0CAMA,0CAMF,wC,0CAVI,gKAMA,4J,sBA4FF,wCAIE,iDACF,+B,sBACA,wCACE,8DACF,+B,yBAXF,0CAGE,0CAMA,0CAGF,wC,0CAPI,4JAI+B,wJ,gEA8CzB,6CAME,mLAA+B,MAI/B,yCACF,+B,yBAhBJ,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAAyB,8BAC7B,sCAAI,yBAAoB,8BACxB,sCACE,+CAYF,8BACF,+B,iCAjBM,kEACA,4EACA,uEAUA,qE,yBAxBZ,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,mCAAO,8BACX,sCAAI,kCAAM,8BACV,kCACF,8BACF,8BACA,0CACE,4CAmBA,uCACE,0CAAgB,kCAAK,8BACrB,0CAAgB,0BAAoB,8BACtC,8BACF,8BACF,8BACF,+B,0CAzBU,6EAqBc,gF,gEA0BlB,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAA2B,8BAC/B,sCAAI,yBAAsB,8BAC1B,sCACE,6CAOE,sJAAgC,MAEhC,yCACF,8BACF,8BACF,8B,oCAhBM,kEACA,4EACA,wE,yBAdZ,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,qCAAS,8BACb,sCAAI,kCAAM,8BACV,kCACF,8BACF,8BACA,0CACE,6CAkBA,uCACE,0CAAgB,kCAAK,8BACrB,0CAAgB,0BAAsB,8BACxC,8BACF,8BACF,8BACF,+B,0CAxBU,+EAoBc,kF,sBAwDtB,wCAIE,uDACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,iL,sBAoCF,wCAIE,wDACF,+B,yBAXF,0CAME,0CAMF,wC,0CAJI,iL,yBAiGI,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAAyB,8BAC7B,sCAAI,yBAAoB,8BAC1B,+B,iCAHM,kEACA,4EACA,wE,yBAbZ,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,mCAAO,8BACX,sCAAI,kCAAM,8BACZ,8BACF,8BACA,0CACE,4CAKA,uCACE,0CAAgB,kCAAK,8BACrB,uCAAI,0BAAoB,8BAC1B,8BACF,8BACF,8BACF,+B,0CAXU,6EAOE,gF,yBAoBN,sCACE,sCAAI,yBAAW,8BACf,sCAAI,yBAA2B,8BAC/B,sCAAI,yBAAsB,8BAC5B,+B,iCAHM,kEACA,4EACA,wE,yBAbZ,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,qCAAS,8BACb,sCAAI,kCAAM,8BACZ,8BACF,8BACA,0CACE,4CAKA,uCACE,0CAAgB,kCAAK,8BACrB,uCAAI,0BAAsB,8BAC5B,8BACF,8BACF,8BACF,+B,0CAXU,+EAOE,kF,sBAmF5B,wCAAiC,uCAAW,+B,sBAG5C,wCAAiC,yCAAa,+BC1oBhD,ICcaA,ECmBAC,EFRAC,EAzBPC,EAAiB,CACrB,CACEC,KAAM,GACNC,WCWSL,EAAN,WAqBL,WACUM,EACAC,EACAC,EACAC,EACDC,EACCC,EACAC,EACAC,aAPA,KAAAP,gBACA,KAAAC,kBACA,KAAAC,wBACA,KAAAC,wBACD,KAAAC,cACC,KAAAC,gBACA,KAAAC,SACA,KAAAC,Q,UA7BL,O,EAAA,G,EAAA,kCAqCK,WACRC,KAAKC,WACLD,KAAKE,UAELF,KAAKG,SAAWH,KAAKR,cAAcY,cAC9BJ,KAAKG,UAKVH,KAAKP,gBAAgBY,kBAAkBC,WAAWC,YAChDP,EAAKO,SAAWA,KAGlBP,KAAKN,sBACFc,wBACAF,WAAWG,YACVT,EAAKS,eAAiBA,KAG1BT,KAAKU,gBACLV,KAAKW,SAAW,CACd,CACEC,YAAa,eACbC,OAAQC,WAAWd,KAAKS,eAAeM,aAAaC,QAAQ,KAGhEhB,KAAKiB,WAAa,GAElBjB,KAAKkB,MAAQlB,KAAKJ,YAAYuB,WAC9BnB,KAAKoB,OAASpB,KAAKJ,YAAYyB,YAE/BrB,KAAKsB,WAAa,IAAI,IAAU,CAC9BC,KAAM,IAAI,IAAYvB,KAAKJ,YAAY4B,gBAAiB,CACtDC,WAAY,CAAC,IAAWC,YAE1BC,MAAO,IAAI,IAAY3B,KAAKJ,YAAYgC,kBAAmB,CACzDH,WAAY,CAAC,IAAWC,YAE1BG,KAAM,IAAI,IAAY7B,KAAKJ,YAAYkC,iBAAkB,CACvDL,WAAY,CAAC,IAAWC,YAE1BK,YAAa,IAAI,IAAY/B,KAAKS,eAAeM,YAAa,CAC5DU,WAAY,CAAC,IAAWC,YAE1Bd,YAAa,IAAI,IAAY,KAAM,CACjCa,WAAY,OAIhBzB,KAAKsB,WAAWU,IAAI,eAAeC,UAEnCjC,KAAKkC,cAAgB,IAAI,IAAU,CACjCtB,YAAa,IAAI,IAAY,KAAM,CACjCa,WAAY,CAAC,IAAWC,YAE1Bb,OAAQ,IAAI,IAAY,EAAG,CACzBY,WAAY,CAAC,IAAWC,SAAU,IAAWS,IAAI,QAIrDnC,KAAKoC,mBAAqB,IAAI,IAAU,CACtCC,YAAa,IAAI,IAAY,KAAM,CACjCZ,WAAY,CAAC,IAAWC,YAE1BY,YAAa,IAAI,IAAY,GAAI,CAAEb,WAAY,CAAC,IAAWC,YAC3Da,YAAa,IAAI,IAAY,KAAM,CAAEd,WAAY,KACjDe,mBAAoB,IAAI,IAAY,KAAM,CAAEf,WAAY,OAG1DzB,KAAKC,YAhEHD,KAAKF,OAAO2C,SAAS,CAAC,OAAQ,CAAEC,WAAY1C,KAAKD,UA3ChD,sCA8GWW,GAEZV,KAAKU,aADc,MAAjBA,IA/GD,qCAuHH,GAAIV,KAAKkC,cAAcS,QACrB3C,KAAK4C,WACH,YACA,SAFF5C,sBAGiBA,KAAKU,aAAe,UAAY,YAHjDV,iBADF,CASA,IAAM6C,EAAc,CAClBjC,YAAaZ,KAAKkC,cAAcY,MAAMlC,YACtCC,OAAQC,WAAWd,KAAKkC,cAAcY,MAAMjC,QAAQG,QAAQ,IAE1DhB,KAAKU,aACPV,KAAKW,SAASoC,KAAKF,GAEnB7C,KAAKiB,WAAW8B,KAAKF,GAEvB7C,KAAKkC,cAAcc,MAAM,CAAEnC,OAAQ,SAzIhC,sCA4IWoC,EAAoBC,GAClC,GAAID,EAAW,CACb,GAAU,IAANC,EACF,OAEFlD,KAAKW,SAASwC,OAAOD,EAAG,QAExBlD,KAAKiB,WAAWkC,OAAOD,EAAG,KAnJzB,qCAwJH,IAAIE,EAA0B,EAI9B,OAHApD,KAAKW,SAAS0C,SAASC,YACrBF,IAAuBE,EAAQzC,UAE1BC,WAAWsC,GAAoBpC,QAAQ,KA5J3C,uCAgKH,IAAIuC,EAA4B,EAIhC,OAHAvD,KAAKiB,WAAWoC,SAASG,YACvBD,IAAyBC,EAAU3C,UAE9BC,WAAWyC,GAAsBvC,QAAQ,KApK7C,qCA2KH,QAHuBhB,KAAKyD,gBACHzD,KAAK0D,kBAEb1C,QAAQ,GAAG2C,aA3KzB,4CA+KH,IAAMC,GAAqB5D,KAAK6D,eAChC,OAAO,OAAAC,EAAA,GAAcF,GAAa,YAhL/B,qCAoLgC,IAA/B5D,KAAK+D,QAAQC,eACfhE,KAAKsB,WAAWU,IAAI,eAAeC,UAErCjC,KAAK+D,QAAQE,aAvLV,yCA2LHjE,KAAKsB,WAAW4C,mBACZlE,KAAKsB,WAAWqB,QAClB3C,KAAK4C,WAAW,YAAa,SAAU,yCAGzC5C,KAAK+D,QAAQI,OACbnE,KAAKsB,WAAWU,IAAI,eAAeoC,YAjMhC,4CAqMHpE,KAAK+D,QAAQI,SArMV,iDAyMHnE,KAAKoC,mBAAmB8B,mBACpBlE,KAAKoC,mBAAmBO,QAC1B3C,KAAK4C,WAAW,YAAa,SAAU,+BAGzC5C,KAAK+D,QAAQI,SA9MV,qCAiNS,WAGZ,GAFAnE,KAAKsB,WAAW4C,mBAEZlE,KAAKsB,WAAWqB,QAClB3C,KAAK4C,WAAW,YAAa,SAAU,4CADzC,CAKA5C,KAAKE,UAEL,IAAMmE,EAAc,yDAClBC,OAAQtE,KAAKG,SACbI,SAAUP,KAAKO,SAASgE,YACxBC,KAAMxE,KAAKS,eAAe+D,MACvBxE,KAAKsB,WAAWwB,OAAK,CACxBnC,SAAUX,KAAKW,SACfM,WAAYjB,KAAKiB,aACdjB,KAAKoC,mBAAmBU,OAAK,CAChCc,UAAW5D,KAAK6D,eAChBY,iBAAkBzE,KAAK0E,wBAGzB1E,KAAKL,sBAAsBgF,kBAAkBN,GAAgB/D,WAC1DsE,YACC5E,EAAK4C,WAAW,YAAa,UAAW,sCACxC5C,EAAK6E,UAENC,YACC9E,EAAK4C,WAAW,YAAa,SAAUkC,GACvC9E,EAAKE,gBA9ON,iCAmPc6E,EAAeC,EAAaC,GAC7CjF,KAAKH,cAAcqF,KAAKF,EAAQC,EAAS,CACvCF,WACAC,aAtPC,6BA2PH,IAAMG,EAAOnF,KAAKP,gBAAgB2F,kBAClCpF,KAAKF,OAAO2C,SAAS,CAAC,OAAQ,CAAEC,WAAY1C,KAAKD,MAAOsF,YAAa,CAAEF,YA5PpE,oCAgQHnF,KAAKP,gBAAgB6F,mBACrBtF,KAAKN,sBAAsB6F,8B,2BAjQxB,K,sCAAMrG,GAAkB,mT,mDAAlBA,EAAkB,uD,MAAA,K,imIFlB/B,2CACE,kDACE,yCACE,yCACE,4CAME,qDAAS,EAAA2F,UAET,kCACF,8BACA,wCAAa,2CAAe,8BAC9B,8BACF,8BAEA,4CAcF,8BAEA,gDACE,mDACE,8CACE,2CAAe,sDAAU,EAAAW,sBACvB,0CACE,0CACE,2CACE,6CAAsC,kCAAK,8BAC3C,wCAgBA,sDAOF,8BACF,8BAEA,0CACE,2CACE,6CAAuC,0CAAa,8BACpD,iDACE,mDAGF,8BACA,sDAOF,8BACF,8BAEA,0CACE,2CACE,6CAAsC,yCAAY,8BAClD,iDACE,mDACF,8BACA,sDAOF,8BACF,8BAEA,0CACE,2CACE,6CAA8C,0CAAa,8BAC3D,wCAiBA,sDAkBF,8BACF,8BAEA,2CACE,2CACE,6CAA6C,yCAAY,8BACzD,wCAUF,8BACF,8BACF,8BAEA,kCAEA,0CACE,2CACE,8CACE,yCAAM,iCAAI,8BACV,0CACF,8BACF,8BACF,8BACF,8BACF,8BAEA,+CACE,2CAAe,sDAAU,EAAAC,kBACvB,0CACE,0CACE,2CACE,6CAAsC,+CAAkB,8BACxD,iDAAkC,+DAAkB,EAAAC,gBAAA,MAClD,iDAAqB,oCAAO,8BAC5B,iDAAqB,sCAAS,8BAChC,8BACF,8BACF,8BAEA,2CACE,2CACE,6CACG,0BAAkD,8BAErD,wCAUF,8BACF,8BAEA,0CACE,2CACE,6CAAwC,oCAAO,8BAC/C,wCAiBA,sDAaF,8BACF,8BAEA,2CACE,8CAOE,0BACF,8BACF,8BACF,8BACF,8BAEA,kCAEA,0CACE,2CACE,+CACE,mDACE,uCAAI,qCAAQ,8BACd,8BACA,oDACE,8CAqCF,8BACF,8BACF,8BAEA,2CACE,+CACE,mDACE,uCAAI,uCAAU,8BAChB,8BACA,oDACE,8CAoCF,8BACF,8BACF,8BACF,8BAEA,kCAEA,0CACE,2CACE,8CAA4C,qDAAS,EAAAC,kBACnD,0CACA,0CAAM,sCAAQ,8BAChB,8BACF,8BACA,4CACE,+CAA4C,qDAAS,EAAAC,yBACnD,0CAAM,kCAAI,8BACV,2CACF,8BACF,8BACF,8BACF,8BAEA,gDACE,4CAAe,sDAAU,EAAAC,8BACvB,2CACE,4CACE,4CACE,8CAA8C,2CAAa,8BAC3D,yCAgBA,uDAaF,8BACF,8BAEA,4CACE,4CACE,8CAA8C,2CAAa,8BAC3D,kDAaE,kDAAoB,iDAAmB,8BACvC,kDAAwB,kCAAI,8BAC5B,kDAAwB,kCAAI,8BAC5B,kDAA0B,oCAAM,8BAChC,kDAAyB,mCAAK,8BAChC,8BACA,uDAaF,8BACF,8BAEA,4CACE,4CACE,8CAA8C,2CAAa,8BAC3D,yCAUF,8BACF,8BAEA,4CACE,4CACE,8CAAqD,kDAAoB,8BACzE,yCAUF,8BACF,8BACF,8BAEA,mCAEA,2CACE,4CACE,+CAAqD,qDAAS,EAAAF,kBAC5D,2CACA,0CAAM,kCAAI,8BACZ,8BACF,8BACA,4CACE,+CACE,0CAAM,kCAAI,8BACV,2CACF,8BACF,8BACF,8BACF,8BACF,8BAEA,gDACE,4CACE,4CACE,8CACE,wCACE,wCAAI,kCAAI,8BACR,wCAAI,2BAA2B,8BACjC,8BACA,wCACE,wCAAI,wCAAU,8BACd,wCACE,2BACA,0CAAM,kCAAM,8BACZ,2BACF,8BACF,8BACA,wCACE,wCAAI,0CAAY,8BAChB,wCAAI,2BAAgC,8BACtC,8BACA,wCACE,wCAAI,yCAAW,8BACf,wCAAI,2BAAwE,8BAC9E,8BACA,wCACE,wCAAI,sCAAQ,8BACZ,wCACE,+CAsBF,8BACF,8BACA,wCACE,wCAAI,wCAAU,8BACd,wCACE,+CAsBF,8BACF,8BACA,wCACE,wCAAI,0CAAY,8BAChB,wCAAI,2BAA0C,8BAChD,8BACA,wCACE,wCAAI,0CAAY,8BAChB,wCAAI,2B,uCAAsD,8BAC5D,8BACA,wCACE,wCAAI,0CAAY,8BAChB,wCACE,2BAKF,8BACF,8BACA,wCACE,wCAAI,iDAAmB,8BACvB,wCACE,2BAKF,8BACF,8BACA,wCACE,wCAAI,wCAAU,8BACd,wCAAI,2BAAoB,8BAC1B,8BACA,wCACE,wCAAI,iDAAmB,8BACvB,wCAAI,2BAA2B,8BACjC,8BACF,8BACF,8BAEA,mCAEA,2CACE,4CACE,+CAKE,qDAAS,EAAAA,kBAGT,2CACA,0CAAM,kCAAI,8BACZ,8BACF,8BACA,4CACE,+CAGE,qDAAS,EAAAG,kBAMT,0CAAM,oCAAM,8BACd,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BAEA,iGAGA,kG,6EA3nBqB,yEAiBI,mEAAe,4BACzB,kFACsC,gFAanC,6JASA,iIAaW,0EAKX,mIAaW,yEAGX,iIAqBA,2KASA,+IAmD+B,oFAe9B,iHAQD,0GAmBA,uKASA,2IAqBF,kGAEA,gHAe8B,kFAA4C,cA+C5C,oFAAgD,cA2D/E,2FAC8C,wFAa3C,2LASA,+JAsBA,2LAgBA,gKAyEE,uFAKF,qIAEA,+FAKE,2FAIA,iIAK4B,kFAA4C,cA2B5C,oFAAgD,cA0B5E,qGAIA,wIAKF,0JAUA,wKASE,+EAIA,sFAeJ,2EAWA,2EAAmB,wB,uNCjnBjC,CACExG,KAAM,iBACNyG,aAAc,kBACZ,iCAAqEC,MAClEC,YAACA,OAAKA,EAAEC,wBAIf,CACE5G,KAAM,KACN6G,WAAY,iBACZC,UAAW,SAQR,IAAMhH,EAAN,yB,gDAAMA,I,+EAAAA,IAAsB,SAHxB,CAAC,IAAaiH,SAAShH,IACtB,O,GEUL,IAAMF,EAAN,yB,gDAAMA,I,+EAAAA,IAAe,SAhBjB,CACP,IACA,EACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,Q","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"float-right\"\r\n          nbButton\r\n          size=\"small\"\r\n          status=\"warning\"\r\n          (click)=\"back()\"\r\n        >\r\n          Back\r\n        </button>\r\n        <h3 class=\"\">Generate Salary</h3>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"!loading\">\r\n      <div class=\"col-md-4 col-sm-6 col-12\"><strong>Name:</strong> {{ employee.name }}</div>\r\n      <div class=\"col-md-4 col-sm-6 col-12\">\r\n        <strong>IMS ID:</strong> {{ employee.imsMasterId }}\r\n      </div>\r\n      <div class=\"col-md-4 col-sm-6 col-12\"><strong>Email:</strong> {{ employee.email }}</div>\r\n      <div class=\"col-md-4 col-sm-6 col-12\"><strong>Phone:</strong> {{ employee.phone }}</div>\r\n      <div class=\"col-md-4 col-sm-6 col-12\">\r\n        <strong>Role:</strong> {{ branchEmployee.role | uppercase }}\r\n      </div>\r\n      <div class=\"col-md-4 col-sm-6 col-12\">\r\n        <strong>Basic Salary:</strong> {{ branchEmployee.basicSalary }}/-\r\n      </div>\r\n    </div>\r\n  </nb-card-header>\r\n\r\n  <nb-card-body>\r\n    <nb-stepper #stepper [linear]=\"true\" [disableStepNavigation]=\"true\">\r\n      <nb-step [stepControl]=\"salaryForm\" label=\"Salary Details\">\r\n        <form class=\"\" (submit)=\"salaryFormSubmit()\" [formGroup]=\"salaryForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-date\">Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-date\"\r\n                  name=\"date\"\r\n                  formControlName=\"date\"\r\n                  placeholder=\"date\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    salaryForm.get('date').touched\r\n                      ? salaryForm.get('date').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"salaryForm.get('date').invalid && salaryForm.get('date').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"salaryForm.get('date').errors?.required\">\r\n                    Date is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-month\">Select Month:</label>\r\n                <nb-select fullWidth formControlName=\"month\">\r\n                  <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\r\n                    month.month\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"salaryForm.get('month').invalid && salaryForm.get('month').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"salaryForm.get('month').errors?.required\">\r\n                    Please Select Month\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-year\">Select Year:</label>\r\n                <nb-select fullWidth formControlName=\"year\">\r\n                  <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"salaryForm.get('year').invalid && salaryForm.get('year').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"salaryForm.get('year').errors?.required\">\r\n                    Please Select Year\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-basic-amount\">Basic Amount:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-basic-amount\"\r\n                  name=\"basicAmount\"\r\n                  formControlName=\"basicAmount\"\r\n                  placeholder=\"basicAmount\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    salaryForm.get('basicAmount').touched\r\n                      ? salaryForm.get('basicAmount').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    salaryForm.get('basicAmount').invalid && salaryForm.get('basicAmount').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"salaryForm.get('basicAmount').errors?.required\"\r\n                  >\r\n                    Basic Amount is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"salaryForm.get('basicAmount').errors?.min\"\r\n                  >\r\n                    Basic Amount should be greater than 0!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-8 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-description\">Description:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-description\"\r\n                  name=\"description\"\r\n                  formControlName=\"description\"\r\n                  placeholder=\"Description\"\r\n                  fullWidth\r\n                  status=\"basic\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step label=\"Earnings/Deductions\">\r\n        <form class=\"\" (submit)=\"addErnDeduct()\" [formGroup]=\"ernDeductForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-year\">Select Definition:</label>\r\n                <nb-select fullWidth selected=\"0\" (selectedChange)=\"ernDeductChange($event)\">\r\n                  <nb-option value=\"0\">Earning</nb-option>\r\n                  <nb-option value=\"1\">Deduction</nb-option>\r\n                </nb-select>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-8 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-description\"\r\n                  >{{ ernDeduction ? 'Earning' : 'Deduction' }} Note:</label\r\n                >\r\n                <input\r\n                  type=\"string\"\r\n                  nbInput\r\n                  id=\"input-description\"\r\n                  name=\"description\"\r\n                  formControlName=\"description\"\r\n                  [placeholder]=\"ernDeduction ? 'Earning' : 'Deduction'\"\r\n                  fullWidth\r\n                  status=\"basic\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-amount\">Amount:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-amount\"\r\n                  name=\"amount\"\r\n                  formControlName=\"amount\"\r\n                  placeholder=\"Amount\"\r\n                  min=\"0\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    ernDeductForm.get('amount').touched\r\n                      ? ernDeductForm.get('amount').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"ernDeductForm.get('amount').invalid && ernDeductForm.get('amount').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"ernDeductForm.get('amount').errors?.required\"\r\n                  >\r\n                    Amount is required!\r\n                  </p>\r\n                  <p class=\"caption status-danger\" *ngIf=\"ernDeductForm.get('amount').errors?.min\">\r\n                    Amount should be greater than 0!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-8 col-sm-6 col-12 text-right\">\r\n              <button\r\n                type=\"submit\"\r\n                class=\"mt-4\"\r\n                nbButton\r\n                size=\"small\"\r\n                [status]=\"ernDeduction ? 'success' : 'danger'\"\r\n              >\r\n                Add {{ ernDeduction ? 'Earning' : 'Deduction' }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        <br />\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 col-12\">\r\n            <nb-card status=\"basic\">\r\n              <nb-card-header>\r\n                <h5>Earnings</h5>\r\n              </nb-card-header>\r\n              <nb-card-body class=\"ern-deduct-body\">\r\n                <div class=\"table-responsive\" *ngIf=\"earnings.length > 0; else noEarnings\">\r\n                  <table class=\"table table-am\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>#</th>\r\n                        <th>Earning</th>\r\n                        <th>Amount</th>\r\n                        <th></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr *ngFor=\"let earning of earnings; let i = index\">\r\n                        <td>{{ i + 1 }}</td>\r\n                        <td>{{ earning.description }}</td>\r\n                        <td>{{ earning.amount }}</td>\r\n                        <td>\r\n                          <button\r\n                            nbButton\r\n                            size=\"tiny\"\r\n                            outline\r\n                            status=\"danger\"\r\n                            shape=\"round\"\r\n                            (click)=\"deleteErnDeduct(true, i)\"\r\n                            nbTooltip=\"Remove Earning\"\r\n                            *ngIf=\"i !== 0\"\r\n                          >\r\n                            <nb-icon icon=\"close-outline\"></nb-icon>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th colspan=\"2\">Total</th>\r\n                        <th colspan=\"2\">{{ totalEarning() }}</th>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </nb-card-body>\r\n            </nb-card>\r\n          </div>\r\n\r\n          <div class=\"col-md-6 col-12\">\r\n            <nb-card status=\"basic\">\r\n              <nb-card-header>\r\n                <h5>Deductions</h5>\r\n              </nb-card-header>\r\n              <nb-card-body class=\"ern-deduct-body\">\r\n                <div class=\"table-responsive\" *ngIf=\"deductions.length > 0; else noDeductions\">\r\n                  <table class=\"table table-sm\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>#</th>\r\n                        <th>Deduction</th>\r\n                        <th>Amount</th>\r\n                        <th></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr *ngFor=\"let deduction of deductions; let i = index\">\r\n                        <td>{{ i + 1 }}</td>\r\n                        <td>{{ deduction.description }}</td>\r\n                        <td>{{ deduction.amount }}</td>\r\n                        <td>\r\n                          <button\r\n                            nbButton\r\n                            size=\"tiny\"\r\n                            outline\r\n                            status=\"danger\"\r\n                            shape=\"round\"\r\n                            nbTooltip=\"Remove Deduction\"\r\n                            (click)=\"deleteErnDeduct(false, i)\"\r\n                          >\r\n                            <nb-icon icon=\"close-outline\"></nb-icon>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th colspan=\"2\">Total</th>\r\n                        <th colspan=\"2\">{{ totalDeduction() }}</th>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </nb-card-body>\r\n            </nb-card>\r\n          </div>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <button nbButton size=\"small\" type=\"button\" (click)=\"previousStep()\">\r\n              <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n              <span>Previous</span>\r\n            </button>\r\n          </div>\r\n          <div class=\"col-md-6 text-right\">\r\n            <button nbButton size=\"small\" type=\"button\" (click)=\"ernDeductFormSubmit()\">\r\n              <span>Next</span>\r\n              <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </nb-step>\r\n\r\n      <nb-step [stepControl]=\"paymentDetailsForm\" label=\"Payment Details\">\r\n        <form class=\"\" (submit)=\"paymentDetailsFormSubmit()\" [formGroup]=\"paymentDetailsForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-generated-by\">Generated By:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-generated-by\"\r\n                  name=\"generatedBy\"\r\n                  formControlName=\"generatedBy\"\r\n                  placeholder=\"Generated By\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    paymentDetailsForm.get('generatedBy').touched\r\n                      ? paymentDetailsForm.get('generatedBy').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    paymentDetailsForm.get('generatedBy').invalid &&\r\n                    paymentDetailsForm.get('generatedBy').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"paymentDetailsForm.get('generatedBy').errors?.required\"\r\n                  >\r\n                    Generated By is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-payment-mode\">Payment Mode:</label>\r\n                <nb-select\r\n                  id=\"input-payment-mode\"\r\n                  name=\"paymentMode\"\r\n                  formControlName=\"paymentMode\"\r\n                  [status]=\"\r\n                    paymentDetailsForm.get('paymentMode').touched\r\n                      ? paymentDetailsForm.get('paymentMode').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  fullWidth\r\n                >\r\n                  <nb-option value=\"\">Select Payment Mode</nb-option>\r\n                  <nb-option value=\"cash\">Cash</nb-option>\r\n                  <nb-option value=\"card\">Card</nb-option>\r\n                  <nb-option value=\"wallet\">Waller</nb-option>\r\n                  <nb-option value=\"other\">Other</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    paymentDetailsForm.get('paymentMode').invalid &&\r\n                    paymentDetailsForm.get('paymentMode').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"paymentDetailsForm.get('paymentMode').errors?.required\"\r\n                  >\r\n                    Please Select Payment Mode\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-bank-details\">Bank Details:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-bank-details\"\r\n                  name=\"bankDetails\"\r\n                  formControlName=\"bankDetails\"\r\n                  placeholder=\"Bank Details\"\r\n                  fullWidth\r\n                  status=\"basic\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 col-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-transaction-details\">Transaction Details:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-transaction-details\"\r\n                  name=\"transactionDetails\"\r\n                  formControlName=\"transactionDetails\"\r\n                  placeholder=\"Transaction Details\"\r\n                  fullWidth\r\n                  status=\"basic\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button type=\"button\" class=\"\" nbButton size=\"small\" (click)=\"previousStep()\">\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step label=\"Submit\">\r\n        <div class=\"step-container\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-bordered\">\r\n              <tr>\r\n                <th>Date</th>\r\n                <td>{{ salaryForm.value.date }}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Month/Year</th>\r\n                <td>\r\n                  {{ dateService.getMonthByMonthNumber(salaryForm.value.month) }}\r\n                  <span>&nbsp;</span>\r\n                  {{ salaryForm.value.year }}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>Basic Salary</th>\r\n                <td>{{ branchEmployee.basicSalary }}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Description</th>\r\n                <td>{{ salaryForm.value.description ? salaryForm.value.description : '--' }}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Earnings</th>\r\n                <td>\r\n                  <div class=\"table-responsive\" *ngIf=\"earnings.length > 0; else noEarnings\">\r\n                    <table class=\"table table-am\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>#</th>\r\n                          <th>Earning</th>\r\n                          <th>Amount</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let earning of earnings; let i = index\">\r\n                          <td>{{ i + 1 }}</td>\r\n                          <td>{{ earning.description }}</td>\r\n                          <td>{{ earning.amount }}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th colspan=\"2\">Total</th>\r\n                          <th>{{ totalEarning() }}</th>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>Deductions</th>\r\n                <td>\r\n                  <div class=\"table-responsive\" *ngIf=\"deductions.length > 0; else noDeductions\">\r\n                    <table class=\"table table-sm\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>#</th>\r\n                          <th>Deduction</th>\r\n                          <th>Amount</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let deduction of deductions; let i = index\">\r\n                          <td>{{ i + 1 }}</td>\r\n                          <td>{{ deduction.description }}</td>\r\n                          <td>{{ deduction.amount }}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th colspan=\"2\">Total</th>\r\n                          <th>{{ totalDeduction() }}</th>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>Generated By</th>\r\n                <td>{{ paymentDetailsForm.value.generatedBy }}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Payment Mode</th>\r\n                <td>{{ paymentDetailsForm.value.paymentMode | uppercase }}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Bank Details</th>\r\n                <td>\r\n                  {{\r\n                    paymentDetailsForm.value.bankDetails\r\n                      ? paymentDetailsForm.value.bankDetails\r\n                      : '--'\r\n                  }}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>Transaction Details</th>\r\n                <td>\r\n                  {{\r\n                    paymentDetailsForm.value.transactionDetails\r\n                      ? paymentDetailsForm.value.transactionDetails\r\n                      : '--'\r\n                  }}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>Net Salary</th>\r\n                <td>{{ getNetSalary() }}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Net Salary in Words</th>\r\n                <td>{{ getNetSalaryInWords() }}</td>\r\n              </tr>\r\n            </table>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"\"\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"previousStep()\"\r\n                [disabled]=\"submit\"\r\n              >\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"saveEmployee()\"\r\n                [disabled]=\"submit\"\r\n                [nbSpinner]=\"submit\"\r\n                nbSpinnerStatus=\"primary\"\r\n                nbSpinnerSize=\"small\"\r\n              >\r\n                <span>Submit</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-step>\r\n    </nb-stepper>\r\n  </nb-card-body>\r\n</nb-card>\r\n\r\n<ng-template #noEarnings>\r\n  <p class=\"text-center pt-5 pb-5\">No Earnings</p>\r\n</ng-template>\r\n<ng-template #noDeductions>\r\n  <p class=\"text-center pt-5 pb-5\">No Deductions</p>\r\n</ng-template>\r\n","import { AddSalaryComponent } from './add-salary.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddSalaryComponent,\n  },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddSalaryRoutingModule {}\n","import { EmployeeSalaryService } from './../../../../../services/employee-salary.service';\r\nimport { DateService, Month } from './../../../../../services/shared-services/date.service';\r\nimport { BranchEmployeeService } from './../../../../../services/branch-employee.service';\r\nimport { EmployeeService } from './../../../../../services/employee.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { EmployeeModel } from './../../../../../models/employee.model';\r\nimport { BranchEmployeeModel } from './../../../../../models/branch-employee.model';\r\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { BranchService } from './../../../../../services/branch.service';\r\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\nimport { numberToWords } from '../../../../../shared/numberToWords';\r\n\r\n@Component({\r\n  selector: 'ngx-add-salary',\r\n  templateUrl: './add-salary.component.html',\r\n  styleUrls: ['./add-salary.component.scss'],\r\n})\r\nexport class AddSalaryComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  private branchId: string;\r\n\r\n  employee: EmployeeModel;\r\n  branchEmployee: BranchEmployeeModel;\r\n\r\n  salaryForm: FormGroup;\r\n  ernDeductForm: FormGroup;\r\n  paymentDetailsForm: FormGroup;\r\n\r\n  ernDeduction: boolean;\r\n  earnings: any[];\r\n  deductions: any[];\r\n  months: Month[];\r\n  years: string[];\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private employeeService: EmployeeService,\r\n    private branchEmployeeService: BranchEmployeeService,\r\n    private employeeSalaryService: EmployeeSalaryService,\r\n    public dateService: DateService,\r\n    private toastrService: NbToastrService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    // route.queryParams.subscribe((param: Params) => {\r\n    //   // put the code from `ngOnInit` here\r\n    //   this.ngOnInit();\r\n    // });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.employeeService.getEmployeeData().subscribe((employee: EmployeeModel) => {\r\n      this.employee = employee;\r\n    });\r\n\r\n    this.branchEmployeeService\r\n      .getBranchEmployeeData()\r\n      .subscribe((branchEmployee: BranchEmployeeModel) => {\r\n        this.branchEmployee = branchEmployee;\r\n      });\r\n\r\n    this.ernDeduction = true;\r\n    this.earnings = [\r\n      {\r\n        description: 'Basic Amount',\r\n        amount: parseFloat(this.branchEmployee.basicSalary).toFixed(2),\r\n      },\r\n    ];\r\n    this.deductions = [];\r\n\r\n    this.years = this.dateService.getYears();\r\n    this.months = this.dateService.getMonths();\r\n\r\n    this.salaryForm = new FormGroup({\r\n      date: new FormControl(this.dateService.getDateString(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      month: new FormControl(this.dateService.getCurrentMonth(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      year: new FormControl(this.dateService.getCurrentYear(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      basicAmount: new FormControl(this.branchEmployee.basicSalary, {\r\n        validators: [Validators.required],\r\n      }),\r\n      description: new FormControl(null, {\r\n        validators: [],\r\n      }),\r\n    });\r\n\r\n    this.salaryForm.get('basicAmount').disable();\r\n\r\n    this.ernDeductForm = new FormGroup({\r\n      description: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      amount: new FormControl(0, {\r\n        validators: [Validators.required, Validators.min(0)],\r\n      }),\r\n    });\r\n\r\n    this.paymentDetailsForm = new FormGroup({\r\n      generatedBy: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      paymentMode: new FormControl('', { validators: [Validators.required] }),\r\n      bankDetails: new FormControl(null, { validators: [] }),\r\n      transactionDetails: new FormControl(null, { validators: [] }),\r\n    });\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  ernDeductChange(ernDeduction: any) {\r\n    if (ernDeduction === '0') {\r\n      this.ernDeduction = true;\r\n    } else {\r\n      this.ernDeduction = false;\r\n    }\r\n  }\r\n\r\n  addErnDeduct() {\r\n    if (this.ernDeductForm.invalid) {\r\n      this.showToastr(\r\n        'top-right',\r\n        'danger',\r\n        `Enter Valid ${this.ernDeduction ? 'Earning' : 'Deduction'} Details`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const extras: any = {\r\n      description: this.ernDeductForm.value.description,\r\n      amount: parseFloat(this.ernDeductForm.value.amount).toFixed(2),\r\n    };\r\n    if (this.ernDeduction) {\r\n      this.earnings.push(extras);\r\n    } else {\r\n      this.deductions.push(extras);\r\n    }\r\n    this.ernDeductForm.reset({ amount: '0' });\r\n  }\r\n\r\n  deleteErnDeduct(ernDeduct: boolean, i: number) {\r\n    if (ernDeduct) {\r\n      if (i === 0) {\r\n        return;\r\n      }\r\n      this.earnings.splice(i, 1);\r\n    } else {\r\n      this.deductions.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  totalEarning() {\r\n    let totalEarningAmount: any = 0;\r\n    this.earnings.forEach((earning) => {\r\n      totalEarningAmount += +earning.amount;\r\n    });\r\n    return parseFloat(totalEarningAmount).toFixed(2);\r\n  }\r\n\r\n  totalDeduction() {\r\n    let totalDeductionAmount: any = 0;\r\n    this.deductions.forEach((deduction) => {\r\n      totalDeductionAmount += +deduction.amount;\r\n    });\r\n    return parseFloat(totalDeductionAmount).toFixed(2);\r\n  }\r\n\r\n  getNetSalary() {\r\n    const totalEarnings = +this.totalEarning();\r\n    const totalDeductions = +this.totalDeduction();\r\n    const netSalary: number = totalEarnings - totalDeductions;\r\n    return netSalary.toFixed(2).toString();\r\n  }\r\n\r\n  getNetSalaryInWords() {\r\n    const netSalary: number = +this.getNetSalary();\r\n    return numberToWords(netSalary) + ' Only/-';\r\n  }\r\n\r\n  previousStep() {\r\n    if (this.stepper.selectedIndex === 1) {\r\n      this.salaryForm.get('basicAmount').disable();\r\n    }\r\n    this.stepper.previous();\r\n  }\r\n\r\n  salaryFormSubmit() {\r\n    this.salaryForm.markAllAsTouched();\r\n    if (this.salaryForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Employee Salary Details are Required');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n    this.salaryForm.get('basicAmount').enable();\r\n  }\r\n\r\n  ernDeductFormSubmit() {\r\n    this.stepper.next();\r\n  }\r\n\r\n  paymentDetailsFormSubmit() {\r\n    this.paymentDetailsForm.markAllAsTouched();\r\n    if (this.paymentDetailsForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Enter Valid Payment Details');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  saveEmployee() {\r\n    this.salaryForm.markAllAsTouched();\r\n\r\n    if (this.salaryForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Employee Salary Details are Required');\r\n      return;\r\n    }\r\n\r\n    this.submit = true;\r\n\r\n    const employeeSalary: any = {\r\n      branch: this.branchId,\r\n      employee: this.employee.imsMasterId,\r\n      role: this.branchEmployee.role,\r\n      ...this.salaryForm.value,\r\n      earnings: this.earnings,\r\n      deductions: this.deductions,\r\n      ...this.paymentDetailsForm.value,\r\n      netSalary: this.getNetSalary(),\r\n      netSalaryInWords: this.getNetSalaryInWords(),\r\n    };\r\n\r\n    this.employeeSalaryService.addEmployeeSalary(employeeSalary).subscribe(\r\n      (res: any) => {\r\n        this.showToastr('top-right', 'success', 'Employee Salary Added Successfully');\r\n        this.back();\r\n      },\r\n      (error: any) => {\r\n        this.showToastr('top-right', 'danger', error);\r\n        this.submit = false;\r\n      },\r\n    );\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  back() {\r\n    const type = this.employeeService.getEmployeeType();\r\n    this.router.navigate(['../'], { relativeTo: this.route, queryParams: { type } });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.employeeService.deleteEmployeeId();\r\n    this.branchEmployeeService.deleteBranchEmployeeId();\r\n  }\r\n}\r\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbIconModule,\n  NbSelectModule,\n  NbInputModule,\n  NbButtonModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbToggleModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddSalaryRoutingModule } from './add-salary-routing.module';\nimport { AddSalaryComponent } from './add-salary.component';\n\n@NgModule({\n  declarations: [AddSalaryComponent],\n  imports: [\n    CommonModule,\n    AddSalaryRoutingModule,\n    NbCardModule,\n    NbIconModule,\n    NbSelectModule,\n    NbInputModule,\n    NbTooltipModule,\n    NbButtonModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbToggleModule,\n    NbFormFieldModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AddSalaryModule {}\n"]}