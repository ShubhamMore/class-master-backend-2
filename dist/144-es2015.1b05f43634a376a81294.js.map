{"version":3,"sources":["webpack:///src/app/employee/profile/profile.component.html","webpack:///src/app/employee/profile/profile.component.ts","webpack:///src/app/employee/profile/profile-routing.module.ts","webpack:///src/app/employee/profile/profile.module.ts"],"names":["ProfileComponent","userService","toastrService","authService","encryptService","this","loading","profileForm","name","validators","required","minLength","phone","maxLength","min","max","address","birthDate","qualification","changePasswordForm","oldPassword","password","confirmPassword","passwordValidator","bind","getProfile","group","value","invalidConfirmPassword","subscribe","res","profile","patchValue","error","markAllAsTouched","invalid","showToastr","saveProfile","hasError","email","getUserData","encrypt","environment","encKey","newPassword","changePassword","reset","position","status","message","show","routes","path","component","canActivate","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","ProfileRoutingModule","forChild","ProfileModule"],"mappings":"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","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <h3 *ngIf=\"profile\">\n      {{ profile.name | uppercase }}\n      <small class=\"float-right\">{{ profile.imsMasterId | uppercase }}</small>\n    </h3>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h4 id=\"title\" class=\"title\">\n          User Profile\n          <small class=\"float-right\" *ngIf=\"profile\"\n            ><em>{{ profile.email | lowercase }}</em></small\n          >\n        </h4>\n\n        <form (ngSubmit)=\"saveProfile()\" [formGroup]=\"profileForm\">\n          <p class=\"sub-title\">Personal Details</p>\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-name\">User Name:</label>\n                <input\n                  type=\"text\"\n                  nbInput\n                  id=\"input-name\"\n                  name=\"name\"\n                  formControlName=\"name\"\n                  placeholder=\"User Name\"\n                  minlength=\"5\"\n                  maxlength=\"20\"\n                  fullWidth\n                  [status]=\"\n                    profileForm.get('name').touched\n                      ? profileForm.get('name').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"profileForm.get('name').invalid && profileForm.get('name').touched\"\n                >\n                  <p class=\"caption status-danger\" *ngIf=\"profileForm.get('name').errors?.required\">\n                    User Name is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"profileForm.get('name').errors?.minlength\"\n                  >\n                    User Name should contain minimum 5 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-phone\">User phone:</label>\n                <input\n                  type=\"text\"\n                  pattern=\"\\d*\"\n                  nbInput\n                  id=\"input-phone\"\n                  name=\"phone\"\n                  formControlName=\"phone\"\n                  placeholder=\"User phone\"\n                  minlength=\"10\"\n                  maxlength=\"10\"\n                  min=\"1000000000\"\n                  max=\"9999999999\"\n                  fullWidth\n                  [status]=\"\n                    profileForm.get('phone').touched\n                      ? profileForm.get('phone').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"profileForm.get('phone').invalid && profileForm.get('phone').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"profileForm.get('phone').errors?.required\"\n                  >\n                    User phone is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      profileForm.get('phone').errors?.minlength ||\n                      profileForm.get('phone').errors?.maxlength ||\n                      profileForm.get('phone').errors?.pattern ||\n                      profileForm.get('phone').errors?.min ||\n                      profileForm.get('phone').errors?.max\n                    \"\n                  >\n                    User phone should be 10 digits\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-birth-date\">Birth Date (Optional):</label>\n                <input\n                  type=\"date\"\n                  nbInput\n                  id=\"input-birth-date\"\n                  name=\"birthDate\"\n                  formControlName=\"birthDate\"\n                  placeholder=\"Birth Date (Optional)\"\n                  fullWidth\n                  [status]=\"\n                    profileForm.get('birthDate').touched\n                      ? profileForm.get('birthDate').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    profileForm.get('birthDate').invalid && profileForm.get('birthDate').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"profileForm.get('birthDate').errors?.required\"\n                  >\n                    Birth Date is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-address\">User Address:</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-address\"\n                  name=\"address\"\n                  formControlName=\"address\"\n                  placeholder=\"User Address\"\n                  rows=\"2\"\n                  minlength=\"10\"\n                  maxlength=\"150\"\n                  fullWidth\n                  [status]=\"\n                    profileForm.get('address').touched\n                      ? profileForm.get('address').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                ></textarea>\n                <ng-container\n                  *ngIf=\"profileForm.get('address').invalid && profileForm.get('address').touched\"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"profileForm.get('address').errors?.required\"\n                  >\n                    User address is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"profileForm.get('address').errors?.minlength\"\n                  >\n                    User address should be 10 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-12\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-qualification\">Qualification (Optional):</label>\n                <textarea\n                  type=\"text\"\n                  nbInput\n                  id=\"input-qualification\"\n                  name=\"qualification\"\n                  formControlName=\"qualification\"\n                  placeholder=\"Qualification (Optional)\"\n                  rows=\"2\"\n                  fullWidth\n                  [status]=\"\n                    profileForm.get('qualification').touched\n                      ? profileForm.get('qualification').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                ></textarea>\n                <ng-container\n                  *ngIf=\"\n                    profileForm.get('qualification').invalid &&\n                    profileForm.get('qualification').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"profileForm.get('qualification').errors?.required\"\n                  >\n                    Qualification is required!\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <br />\n\n          <div class=\"row\">\n            <div class=\"col-12 text-right\">\n              <button type=\"submit\" nbButton size=\"small\" status=\"primary\">Save Profile</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <hr />\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h4 id=\"title\" class=\"title\">Change password</h4>\n        <p class=\"sub-title\">Please set a new password</p>\n\n        <form (ngSubmit)=\"changePassword()\" [formGroup]=\"changePasswordForm\">\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-old-password\">Old Password:</label>\n                <input\n                  type=\"password\"\n                  nbInput\n                  id=\"input-old-password\"\n                  name=\"oldPassword\"\n                  formControlName=\"oldPassword\"\n                  placeholder=\"Old Password\"\n                  minlength=\"7\"\n                  maxlength=\"20\"\n                  fullWidth\n                  [status]=\"\n                    changePasswordForm.get('oldPassword').touched\n                      ? changePasswordForm.get('oldPassword').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    changePasswordForm.get('oldPassword').invalid &&\n                    changePasswordForm.get('oldPassword').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"changePasswordForm.get('oldPassword').errors?.required\"\n                  >\n                    Old Password is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"changePasswordForm.get('oldPassword').errors?.minlength\"\n                  >\n                    Old Password should contain minimum 7 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-password\">Password:</label>\n                <input\n                  type=\"password\"\n                  nbInput\n                  id=\"input-password\"\n                  name=\"password\"\n                  formControlName=\"password\"\n                  placeholder=\"Password\"\n                  minlength=\"7\"\n                  maxlength=\"20\"\n                  fullWidth\n                  [status]=\"\n                    changePasswordForm.get('password').touched\n                      ? changePasswordForm.get('password').invalid\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    changePasswordForm.get('password').invalid &&\n                    changePasswordForm.get('password').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"changePasswordForm.get('password').errors?.required\"\n                  >\n                    Password is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"changePasswordForm.get('password').errors?.minlength\"\n                  >\n                    Password should contain minimum 7 characters\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n\n            <div class=\"col-md-4\">\n              <div class=\"form-control-group\">\n                <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n                <input\n                  nbInput\n                  type=\"password\"\n                  id=\"input-re-password\"\n                  name=\"rePass\"\n                  formControlName=\"confirmPassword\"\n                  placeholder=\"Confirm Password\"\n                  minlength=\"5\"\n                  maxlength=\"30\"\n                  fullWidth\n                  [status]=\"\n                    changePasswordForm.get('confirmPassword').touched\n                      ? changePasswordForm.get('confirmPassword').invalid ||\n                        changePasswordForm.get('password').value !=\n                          changePasswordForm.get('confirmPassword').value\n                        ? 'danger'\n                        : 'success'\n                      : 'basic'\n                  \"\n                />\n                <ng-container\n                  *ngIf=\"\n                    changePasswordForm.get('confirmPassword').invalid &&\n                    changePasswordForm.get('confirmPassword').touched\n                  \"\n                >\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"changePasswordForm.get('confirmPassword').errors?.required\"\n                  >\n                    Password confirmation is required!\n                  </p>\n                  <p\n                    class=\"caption status-danger\"\n                    *ngIf=\"\n                      changePasswordForm.get('password').value !=\n                        changePasswordForm.get('confirmPassword').value &&\n                      !changePasswordForm.hasError('invalidConfirmPassword')\n                    \"\n                  >\n                    Password does not match the confirm password.\n                  </p>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n\n          <br />\n\n          <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n              <button type=\"submit\" nbButton size=\"small\" status=\"primary\">Change password</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n","import { NbToastrService } from '@nebular/theme';\nimport { environment } from './../../../environments/environment';\nimport { AuthService } from './../../authentication/auth/auth-service/auth.service';\nimport { EmployeeModel } from './../../models/employee.model';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { UserService } from './../../services/shared-services/user.service';\nimport { Component, OnInit } from '@angular/core';\nimport { EncryptService } from '../../services/shared-services/encrypt.service';\n\n@Component({\n  selector: 'ngx-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent implements OnInit {\n  loading: boolean;\n  profileForm: FormGroup;\n  changePasswordForm: FormGroup;\n  profile: EmployeeModel;\n  constructor(\n    private userService: UserService,\n    private toastrService: NbToastrService,\n    private authService: AuthService,\n    private encryptService: EncryptService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.profileForm = new FormGroup({\n      name: new FormControl(null, { validators: [Validators.required, Validators.minLength(5)] }),\n      phone: new FormControl(null, {\n        validators: [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(10),\n          Validators.min(1000000000),\n          Validators.max(9999999999),\n        ],\n      }),\n      address: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(10)],\n      }),\n      birthDate: new FormControl(null, {\n        validators: [],\n      }),\n      qualification: new FormControl(null, {\n        validators: [],\n      }),\n    });\n\n    this.changePasswordForm = new FormGroup(\n      {\n        oldPassword: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n        password: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n        confirmPassword: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(7), Validators.maxLength(20)],\n        }),\n      },\n      {\n        validators: this.passwordValidator.bind(this),\n      },\n    );\n\n    this.getProfile();\n  }\n\n  private passwordValidator(group: FormGroup): { [s: string]: boolean } {\n    if (group.value.password !== group.value.confirmPassword) {\n      return { invalidConfirmPassword: true };\n    }\n    return null;\n  }\n\n  private getProfile() {\n    this.userService.getProfile().subscribe(\n      (res: any) => {\n        this.profile = res;\n        this.profileForm.patchValue({\n          name: this.profile.name,\n          phone: this.profile.phone,\n          address: this.profile.address,\n          birthDate: this.profile.birthDate,\n          qualification: this.profile.qualification,\n        });\n\n        this.loading = false;\n      },\n      (error: any) => {\n        this.loading = false;\n      },\n    );\n  }\n\n  saveProfile() {\n    this.profileForm.markAllAsTouched();\n    if (this.profileForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fill Profile Details Correctly');\n      return;\n    }\n\n    this.loading = true;\n\n    const profile = this.profileForm.value;\n\n    this.userService.saveProfile(profile).subscribe(\n      (res: any) => {\n        this.showToastr('top-right', 'success', 'Profile updated Successfully!');\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  changePassword() {\n    this.changePasswordForm.markAllAsTouched();\n    if (this.changePasswordForm.invalid) {\n      this.showToastr('top-right', 'danger', 'Fill change Password Data Correctly');\n      return;\n    } else if (this.changePasswordForm.hasError('invalidPassword')) {\n      this.showToastr('top-right', 'danger', 'New Password and Confirm Password Does Noy Match');\n      return;\n    }\n    this.loading = true;\n    const password = {\n      email: this.authService.getUserData().email,\n      password: this.encryptService.encrypt(\n        this.changePasswordForm.value.oldPassword,\n        environment.encKey,\n      ),\n      newPassword: this.encryptService.encrypt(\n        this.changePasswordForm.value.password,\n        environment.encKey,\n      ),\n    };\n\n    this.userService.changePassword(password).subscribe(\n      (res: any) => {\n        this.changePasswordForm.reset();\n        this.showToastr('top-right', 'success', 'Password Changed Successfully!');\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import { ProfileComponent } from './profile.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: ProfileComponent, canActivate: [] },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../shared/page-not-found/page-not-found.module').then((m) => m.PageNotFoundModule),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { ProfileComponent } from './profile.component';\nimport { NgModule } from '@angular/core';\n\nimport { ProfileRoutingModule } from './profile-routing.module';\n\nimport { CommonModule } from '@angular/common';\nimport { ThemeModule } from './../../@theme/theme.module';\nimport {\n  NbCardModule,\n  NbUserModule,\n  NbButtonModule,\n  NbIconModule,\n  NbInputModule,\n  NbTooltipModule,\n} from '@nebular/theme';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [ProfileComponent],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    ThemeModule,\n    ReactiveFormsModule,\n    NbCardModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbTooltipModule,\n  ],\n})\nexport class ProfileModule {}\n"]}