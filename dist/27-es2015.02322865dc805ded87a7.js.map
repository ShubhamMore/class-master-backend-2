{"version":3,"sources":["webpack:///src/app/institute/branch/lead/add-lead/add-lead.component.html","webpack:///src/app/institute/branch/lead/add-lead/add-lead-routing.module.ts","webpack:///src/app/institute/branch/lead/add-lead/add-lead.component.ts","webpack:///src/app/institute/branch/lead/add-lead/add-lead.module.ts"],"names":["routes","path","component","AddLeadComponent","branchService","toastrService","leadService","dateService","courseService","router","route","this","loading","submit","branchId","getBranchId","navigate","relativeTo","mode","queryParams","subscribe","param","leadId","getLeadId","showToastr","categories","courses","myCourses","modes","strengths","sources","statuses","getCategories","getCourses","leadForm","leadName","validators","required","leadContact","min","max","leadEmail","email","category","course","address","date","getDateString","followUpDate","strength","source","status","comment","getLeadForEditing","res","lead","patchValue","onSelectCategory","err","back","filter","basicDetails","getBranchData","branch","getBranch","setBranchData","error","getCoursesData","stepper","previous","markAllAsTouched","invalid","next","value","_id","editLead","saveLead","leadType","getLeadType","type","replaceUrl","categoryId","find","curCategory","courseId","curCourse","courseName","position","message","show","deleteLeadId","submitLeadForm","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","AddLeadRoutingModule","forChild","AddLeadModule"],"mappings":"2SAuCkB,wCAIE,oDACF,+B,sBACA,wCAIE,2EACF,+B,yBAdF,0CAGE,0CAMA,0CAMF,wC,4CAVI,sJAMA,wJ,sBA8BF,wCAIE,gDACF,+B,sBACA,wCACE,2DACF,+B,yBAXF,0CAGE,0CAMA,0CAGF,wC,4CAPI,wJAI+B,sJ,sBAiCjC,wCAIE,gDACF,+B,sBACA,wCASE,4DACF,+B,yBAnBF,0CAGE,0CAMA,0CAWF,wC,4CAfI,4JAMA,0b,sBAiDF,wCACE,+CACF,+B,yBAHF,0CACE,0CAGF,wC,4CAHmC,+I,sBAgCjC,wCAIE,yDACF,+B,yBAVF,0CAKE,0CAMF,wC,4CAJI,+J,yBA2BF,gDAAsE,yBAEpE,+B,yBAF6C,yCAAuB,0E,sBAOtE,wCAIE,mDACF,+B,yBARF,0CAGE,0CAMF,wC,4CAJI,uJ,yBA0BF,gDAAiE,yBAE/D,+B,yBAF0C,yCAAqB,yF,sBAOjE,wCACE,iDACF,+B,yBALF,0CAGE,0CAGF,wC,4CAHmC,mJ,yBAyBjC,gDAA2D,yB,qCAEzD,+B,yBAFwC,qCAAiB,iG,sBAO3D,wCACE,iDACF,+B,yBALF,0CAGE,0CAGF,wC,4CAHmC,mJ,yBAyBjC,gDAAiE,yB,qCAE/D,+B,yBAF4C,qCAAmB,iG,sBAOjE,wCAIE,mDACF,+B,yBARF,0CAGE,0CAMF,wC,4CAJI,uJ,yBA0BF,gDAAqD,yB,qCAEnD,+B,yBAFoC,qCAAe,iG,sBAKrD,wCACE,+CACF,+B,yBAHF,0CACE,0CAGF,wC,4CAHmC,+I,yBAyBjC,gDAA4D,yB,qCAE1D,+B,yBAFyC,qCAAiB,iG,sBAO5D,wCACE,iDACF,+B,yBALF,0CAGE,0CAGF,wC,4CAHmC,mJ,sBA+BjC,wCACE,kDACF,+B,yBALF,0CAGE,0CAGF,wC,4CAHmC,qJChbnD,MAAMA,EAAiB,CACrB,CAAEC,KAAM,GAAIC,UCYP,M,MAAMC,EAsBX,YACUC,EACAC,EACAC,EACDC,EACCC,EACAC,EACAC,GANA,KAAAN,gBACA,KAAAC,gBACA,KAAAC,cACD,KAAAC,cACC,KAAAC,gBACA,KAAAC,SACA,KAAAC,QAOV,WAKE,GAJAC,KAAKC,SAAU,EACfD,KAAKE,QAAS,EAEdF,KAAKG,SAAWH,KAAKP,cAAcW,eAC9BJ,KAAKG,SAER,YADAH,KAAKF,OAAOO,SAAS,CAAC,OAAQ,CAAEC,WAAYN,KAAKD,QAInD,IAAIQ,EAQJ,OANAP,KAAKD,MAAMS,YAAYC,UAAWC,IAChCH,EAAOG,EAAMH,OAGfP,KAAKW,OAASX,KAAKL,YAAYiB,YAE3BL,GAAiB,SAATA,GACVP,KAAKa,WAAW,YAAa,SAAU,sBACvCb,KAAKF,OAAOO,SAAS,CAAC,qBAAsB,CAAEC,WAAYN,KAAKD,SAEtDQ,IAASP,KAAKW,QACvBX,KAAKa,WAAW,YAAa,SAAU,uBACvCb,KAAKF,OAAOO,SAAS,CAAC,qBAAsB,CAAEC,WAAYN,KAAKD,UAIjEC,KAAKc,WAAa,GAClBd,KAAKe,QAAU,GACff,KAAKgB,UAAY,GAEjBhB,KAAKiB,MAAQ,CAAC,UAAW,aAAc,QAAS,WAChDjB,KAAKkB,UAAY,CAAC,MAAO,QACzBlB,KAAKmB,QAAU,CACb,WACA,UACA,gBACA,gBACA,cACA,UAEFnB,KAAKoB,SAAW,CAAC,OAAQ,OAAQ,OAEjCpB,KAAKqB,gBACLrB,KAAKsB,aAELtB,KAAKuB,SAAW,IAAI,IAAU,CAC5BC,SAAU,IAAI,IAAY,KAAM,CAAEC,WAAY,CAAC,IAAWC,YAC1DC,YAAa,IAAI,IAAY,KAAM,CACjCF,WAAY,CAAC,IAAWC,SAAU,IAAWE,IAAI,KAAa,IAAWC,IAAI,eAE/EC,UAAW,IAAI,IAAY,KAAM,CAAEL,WAAY,CAAC,IAAWC,SAAU,IAAWK,SAChFC,SAAU,IAAI,IAAY,KAAM,CAAEP,WAAY,CAAC,IAAWC,YAC1DO,OAAQ,IAAI,IAAY,KAAM,CAAER,WAAY,CAAC,IAAWC,YACxDQ,QAAS,IAAI,IAAY,KAAM,CAAET,WAAY,KAC7CU,KAAM,IAAI,IAAYnC,KAAKJ,YAAYwC,gBAAiB,CACtDX,WAAY,CAAC,IAAWC,YAE1BW,aAAc,IAAI,IAAY,KAAM,CAAEZ,WAAY,CAAC,IAAWC,YAC9DY,SAAU,IAAI,IAAY,KAAM,CAAEb,WAAY,CAAC,IAAWC,YAC1DnB,KAAM,IAAI,IAAY,KAAM,CAAEkB,WAAY,CAAC,IAAWC,YACtDa,OAAQ,IAAI,IAAY,KAAM,CAAEd,WAAY,CAAC,IAAWC,YACxDc,OAAQ,IAAI,IAAY,KAAM,CAAEf,WAAY,CAAC,IAAWC,YACxDe,QAAS,IAAI,IAAY,KAAM,CAAEhB,WAAY,CAAC,IAAWC,mBAGvDnB,GAAQP,KAAKW,OACfX,KAAKL,YAAY+C,kBAAkB1C,KAAKW,QAAQF,UAC7CkC,IACC3C,KAAK4C,KAAOD,EACZ3C,KAAKuB,SAASsB,WAAW,CACvBrB,SAAUxB,KAAK4C,KAAKpB,SACpBM,UAAW9B,KAAK4C,KAAKd,UACrBH,YAAa3B,KAAK4C,KAAKjB,YACvBK,SAAUhC,KAAK4C,KAAKZ,SACpBE,QAASlC,KAAK4C,KAAKV,QACnBC,KAAMnC,KAAK4C,KAAKT,KAChBE,aAAcrC,KAAK4C,KAAKP,aACxBG,OAAQxC,KAAK4C,KAAKJ,OAClBF,SAAUtC,KAAK4C,KAAKN,SACpB/B,KAAMP,KAAK4C,KAAKrC,KAChBgC,OAAQvC,KAAK4C,KAAKL,OAClBE,QAASzC,KAAK4C,KAAKH,UAGrBzC,KAAK8C,iBAAiB9C,KAAK4C,KAAKZ,UAEhChC,KAAKuB,SAASsB,WAAW,CACvBZ,OAAQjC,KAAK4C,KAAKX,SAGpBjC,KAAKC,SAAU,GAEhB8C,IACC/C,KAAKa,WAAW,YAAa,SAAUkC,GACvC/C,KAAKgD,SAIThD,KAAKC,SAAU,IAInB,iBAAiB+B,GACfhC,KAAKgB,UAAYhB,KAAKe,QAAQkC,OAC3BhB,GAAwBA,EAAOiB,aAAalB,WAAaA,GAItD,gBACNhC,KAAKP,cAAc0D,gBAAgB1C,UAAW2C,IACxCA,IACFpD,KAAKc,WAAasC,EAAOtC,cAIxBd,KAAKc,YACRd,KAAKP,cAAc4D,UAAUrD,KAAKG,UAAUM,UACzC2C,IACCpD,KAAKP,cAAc6D,cAAcF,GACjCpD,KAAKc,WAAasC,EAAOtC,WACzBd,KAAKC,SAAU,GAEhBsD,IACCvD,KAAKa,WAAW,YAAa,SAAU0C,GACvCvD,KAAKC,SAAU,IAMf,aACND,KAAKH,cAAc2D,iBAAiB/C,UAAWM,IAC7Cf,KAAKe,QAAUA,IAInB,eACEf,KAAKyD,QAAQC,WAGf,iBACE1D,KAAKuB,SAASoC,mBACV3D,KAAKuB,SAASqC,QAChB5D,KAAKa,WAAW,YAAa,SAAU,8BAGzCb,KAAKyD,QAAQI,OAGf,WAEE,GADA7D,KAAKuB,SAASoC,mBACV3D,KAAKuB,SAASqC,QAEhB,YADA5D,KAAKa,WAAW,YAAa,SAAU,8BAGzCb,KAAKE,QAAS,EAEd,MAAM0C,EAAO5C,KAAKuB,SAASuC,MAC3BlB,EAAKQ,OAASpD,KAAKG,SAEdH,KAAK4C,MAYRA,EAAKmB,IAAM/D,KAAKW,OAChBX,KAAKL,YAAYqE,SAASpB,GAAMnC,UAC7BkC,IACC3C,KAAKa,WAAW,YAAa,UAAW,8BACxCb,KAAKgD,QAENO,IACCvD,KAAKa,WAAW,YAAa,SAAU0C,GACvCvD,KAAKE,QAAS,KAnBlBF,KAAKL,YAAYsE,SAASrB,GAAMnC,UAC7BkC,IACC3C,KAAKa,WAAW,YAAa,UAAW,gCACxCb,KAAKgD,QAENO,IACCvD,KAAKa,WAAW,YAAa,SAAU0C,GACvCvD,KAAKE,QAAS,IAkBtB,OACE,MAAMgE,EAAWlE,KAAKL,YAAYwE,cAClCnE,KAAKF,OAAOO,SAAS,CAAC,OAAQ,CAC5BC,WAAYN,KAAKD,MACjBS,YAAa,CAAE4D,KAAMF,GACrBG,YAAY,IAIhB,YAAYC,GACV,MAAMtC,EAAWhC,KAAKc,WAAWyD,KAC9BC,GAA+BA,EAAYT,MAAQO,GAGtD,OAAItC,EACKA,EAASA,SAGX,KAGT,UAAUyC,GACR,MAAMxC,EAASjC,KAAKe,QAAQwD,KAAMG,GAA2BA,EAAUX,MAAQU,GAE/E,OAAIxC,EACKA,EAAOiB,aAAayB,WAGtB,KAGD,WAAWC,EAAepC,EAAaqC,GAC7C7E,KAAKN,cAAcoF,KAAKtC,EAAQqC,EAAS,CACvCD,WACApC,WAIJ,cACExC,KAAKL,YAAYoF,gB,6CAvQRvF,GAAgB,6Q,mDAAhBA,EAAgB,qD,MAAA,K,w1GFjB7B,2CACE,kDACE,4CAAmE,qDAAS,EAAAwD,UAC1E,kCACF,8BACA,wCACE,yB,qCACF,8BACF,8BACA,gDACE,kDACE,8CACE,2CAAe,sDAAU,EAAAgC,oBACvB,0CACE,0CACE,0CACE,4CAA2C,kCAAK,8BAChD,wCAmBA,sDAgBF,8BACF,8BAEA,0CACE,0CACE,6CAAuC,2CAAc,8BACrD,wCAgBA,sDAaF,8BACF,8BAEA,0CACE,0CACE,6CAAuC,mCAAM,8BAC7C,wCAoBA,sDAqBF,8BACF,8BAEA,2CACE,0CACE,6CAAyC,qCAAQ,8BACjD,2CASF,8BACF,8BAEA,0CACE,0CACE,6CAAsC,kCAAK,8BAC3C,wCAiBA,sDAKF,8BACF,8BAEA,0CACE,0CACE,6CAAgD,4CAAe,8BAC/D,wCAiBA,sDAYF,8BACF,8BAEA,0CACE,0CACE,6CAA0C,sCAAS,8BACnD,iDAaE,+DAAkB,EAAAlC,iBAAA,MAElB,iDAAoB,4CAAe,8BACnC,mDAGF,8BACA,sDAUF,8BACF,8BAEA,0CACE,0CACE,6CAAwC,oCAAO,8BAC/C,iDAcE,iDAAoB,0CAAa,8BACjC,mDAGF,8BACA,sDAOF,8BACF,8BAEA,0CACE,0CACE,6CAAwC,oCAAO,8BAC/C,iDAcE,iDAAoB,0CAAa,8BACjC,mDAGF,8BACA,sDAOF,8BACF,8BAEA,0CACE,0CACE,6CAA0C,sCAAS,8BACnD,iDAcE,iDAAoB,4CAAe,8BACnC,mDAGF,8BACA,sDAUF,8BACF,8BAEA,0CACE,0CACE,6CAAsC,kCAAK,8BAC3C,iDAcE,iDAAoB,wCAAW,8BAC/B,mDAGF,8BACA,sDAKF,8BACF,8BAEA,0CACE,0CACE,6CAAwC,oCAAO,8BAC/C,iDAcE,iDAAoB,0CAAa,8BACjC,oDAGF,8BACA,uDAOF,8BACF,8BAEA,2CACE,2CACE,8CAAyC,sCAAQ,8BACjD,yCAkBA,uDAOF,8BACF,8BACF,8BAEA,mCAEA,2CACE,4CACE,+CACE,0CAAM,kCAAI,8BACV,2CACF,8BACF,8BACF,8BACF,8BACF,8BAEA,gDACE,4CACE,4CACE,8CACE,2CACE,wCACE,wCAAI,kCAAI,8BACR,wCAAI,2BAA6B,8BACnC,8BACA,wCACE,wCAAI,mCAAK,8BACT,wCAAI,2BAA8B,8BACpC,8BACA,wCACE,wCAAI,mCAAK,8BACT,wCAAI,2BAAgC,8BACtC,8BACA,wCACE,wCAAI,qCAAO,8BACX,wCAAI,2BAA4B,8BAClC,8BACA,wCACE,wCAAI,kCAAI,8BACR,wCAAI,2BAAyB,8BAC/B,8BACA,wCACE,wCAAI,4CAAc,8BAClB,wCAAI,2BAAiC,8BACvC,8BACA,wCACE,wCAAI,sCAAQ,8BACZ,wCAAI,2BAA0C,8BAChD,8BACA,wCACE,wCAAI,oCAAM,8BACV,wCAAI,2BAAsC,8BAC5C,8BACA,wCACE,wCAAI,oCAAM,8BACV,wCAAI,2B,uCAAuC,8BAC7C,8BACA,wCACE,wCAAI,kCAAI,8BACR,wCAAI,2B,uCAAqC,8BAC3C,8BACA,wCACE,wCAAI,sCAAQ,8BACZ,wCAAI,2B,uCAAyC,8BAC/C,8BACA,wCACE,wCAAI,oCAAM,8BACV,wCAAI,2B,uCAAuC,8BAC7C,8BACA,wCACE,wCAAI,qCAAO,8BACX,wCAAI,2BAA4B,8BAClC,8BACF,8BACF,8BACF,8BAEA,mCAEA,2CACE,4CACE,+CACE,2CACA,0CAAM,kCAAI,8BACZ,8BACF,8BACA,4CACE,+CAGE,qDAAS,EAAAmB,cAMT,0CAAM,oCAAM,8BACd,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,8BACF,+B,MA3hBM,2JAImB,mEACV,gFACoC,8EAejC,iKAUA,qIA6BA,mKASA,uIA8BA,uKASA,2IA8CA,4FAAmC,mGAYvB,6HAgBZ,2FAAmC,mHAanC,6IAuBA,iKAUW,8EAKX,qIAqBA,6JASW,6EAKX,iIAkBA,6JASW,2EAKX,iIAkBA,iKASW,6EAKX,qIAqBA,yJASW,yEAIC,6HAiBZ,6JASW,4EAKX,iIAqBA,+JAUA,mIA8BI,yFAIA,yFAIA,2FAIA,uFAIA,oFAIA,4FAIA,uGAIA,mGAIA,yHAIA,uHAIA,2HAIA,yHAIA,uFAUiD,2EAUvD,2EAAmB,wB,4IEngB5B,IDVL,CACE3E,KAAM,iBACN2F,aAAc,IACZ,iCAAkEC,KAC/DC,GAAMA,EAAEC,qBAIf,CACE9F,KAAM,KACN+F,WAAY,iBACZC,UAAW,SAQR,Y,MAAMC,G,yDAAAA,I,+EAAAA,IAAoB,SAHtB,CAAC,IAAaC,SAASnG,IACtB,O,GAEL,GEKA,Q,MAAMoG,G,yDAAAA,I,+EAAAA,IAAa,SAbf,CACP,IACA,EACA,IACA,IACA,IACA,KACA,IACA,KACA,KACA,Q,GAGG","file":"x","sourcesContent":["<nb-card>\r\n  <nb-card-header>\r\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\r\n      Back\r\n    </button>\r\n    <h3 class=\"\">\r\n      {{ !lead ? 'Add New Lead' : 'Edit Lead ' + (lead.leadName | uppercase) }}\r\n    </h3>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <nb-stepper #stepper [linear]=\"true\">\r\n      <nb-step [stepControl]=\"leadForm\" label=\"Basic Details\">\r\n        <form class=\"\" (submit)=\"submitLeadForm()\" [formGroup]=\"leadForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-lead-name\">Name:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-lead-name\"\r\n                  name=\"leadName\"\r\n                  formControlName=\"leadName\"\r\n                  placeholder=\"Lead Name\"\r\n                  minlength=\"3\"\r\n                  maxlength=\"30\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('leadName').touched\r\n                      ? leadForm.get('leadName').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('leadName').invalid && leadForm.get('leadName').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('leadName').errors?.required\"\r\n                  >\r\n                    Lead Name is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('leadName').errors?.minlength\"\r\n                  >\r\n                    Lead Name should contain minimum 3 characters\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-email\">Email address:</label>\r\n                <input\r\n                  type=\"email\"\r\n                  nbInput\r\n                  id=\"input-email\"\r\n                  name=\"email\"\r\n                  formControlName=\"leadEmail\"\r\n                  placeholder=\"Email address\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('leadEmail').touched\r\n                      ? leadForm.get('leadEmail').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('leadEmail').invalid && leadForm.get('leadEmail').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('leadEmail').errors?.required\"\r\n                  >\r\n                    Email is required!\r\n                  </p>\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('leadEmail').errors?.email\">\r\n                    Email should be the real one!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-phone\">Phone:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  nbInput\r\n                  id=\"input-phone\"\r\n                  name=\"phone\"\r\n                  formControlName=\"leadContact\"\r\n                  placeholder=\"phone\"\r\n                  minlength=\"10\"\r\n                  maxlength=\"10\"\r\n                  min=\"1000000000\"\r\n                  max=\"9999999999\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('leadContact').touched\r\n                      ? leadForm.get('leadContact').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('leadContact').invalid && leadForm.get('leadContact').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('leadContact').errors?.required\"\r\n                  >\r\n                    Phone is required!\r\n                  </p>\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"\r\n                      leadForm.get('leadContact').errors?.minlength ||\r\n                      leadForm.get('leadContact').errors?.maxlength ||\r\n                      leadForm.get('leadContact').errors?.min ||\r\n                      leadForm.get('leadContact').errors?.max\r\n                    \"\r\n                  >\r\n                    Phone should contain 10 digits\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-12\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-address\">Address:</label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-address\"\r\n                  name=\"address\"\r\n                  formControlName=\"address\"\r\n                  placeholder=\"address (Optional)\"\r\n                  fullWidth\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-date\">Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-date\"\r\n                  name=\"date\"\r\n                  [min]=\"dateService.getDateString()\"\r\n                  formControlName=\"date\"\r\n                  placeholder=\"date\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('date').touched\r\n                      ? leadForm.get('date').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container *ngIf=\"leadForm.get('date').invalid && leadForm.get('date').touched\">\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('date').errors?.required\">\r\n                    Date is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-follow-up-date\">Follow Up Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  nbInput\r\n                  id=\"input-follow-up-date\"\r\n                  name=\"followUpDate\"\r\n                  [min]=\"dateService.getDateString()\"\r\n                  formControlName=\"followUpDate\"\r\n                  placeholder=\"followUpDate\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('followUpDate').touched\r\n                      ? leadForm.get('followUpDate').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n                <ng-container\r\n                  *ngIf=\"\r\n                    leadForm.get('followUpDate').invalid && leadForm.get('followUpDate').touched\r\n                  \"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('followUpDate').errors?.required\"\r\n                  >\r\n                    Follow Up Date is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-category\">Category:</label>\r\n                <nb-select\r\n                  id=\"input-category\"\r\n                  name=\"category\"\r\n                  formControlName=\"category\"\r\n                  placeholder=\"Select Category\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('category').touched\r\n                      ? leadForm.get('category').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                  (selectedChange)=\"onSelectCategory($event)\"\r\n                >\r\n                  <nb-option value=\"\">Select Category</nb-option>\r\n                  <nb-option *ngFor=\"let category of categories\" [value]=\"category._id\">{{\r\n                    category.category\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('category').invalid && leadForm.get('category').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('category').errors?.required\"\r\n                  >\r\n                    Category is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-course\">Course:</label>\r\n                <nb-select\r\n                  id=\"input-course\"\r\n                  name=\"course\"\r\n                  formControlName=\"course\"\r\n                  placeholder=\"Select Course\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('course').touched\r\n                      ? leadForm.get('course').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                >\r\n                  <nb-option value=\"\">Select Course</nb-option>\r\n                  <nb-option *ngFor=\"let course of myCourses\" [value]=\"course._id\">{{\r\n                    course.basicDetails.courseName\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('course').invalid && leadForm.get('course').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('course').errors?.required\">\r\n                    Course is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-source\">Source:</label>\r\n                <nb-select\r\n                  id=\"input-source\"\r\n                  name=\"source\"\r\n                  formControlName=\"source\"\r\n                  placeholder=\"Select Source\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('source').touched\r\n                      ? leadForm.get('source').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                >\r\n                  <nb-option value=\"\">Select Source</nb-option>\r\n                  <nb-option *ngFor=\"let source of sources\" [value]=\"source\">{{\r\n                    source | uppercase\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('source').invalid && leadForm.get('source').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('source').errors?.required\">\r\n                    Source is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-strength\">Strength:</label>\r\n                <nb-select\r\n                  id=\"input-strength\"\r\n                  name=\"strength\"\r\n                  formControlName=\"strength\"\r\n                  placeholder=\"Select Strength\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('strength').touched\r\n                      ? leadForm.get('strength').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                >\r\n                  <nb-option value=\"\">Select Strength</nb-option>\r\n                  <nb-option *ngFor=\"let strength of strengths\" [value]=\"strength\">{{\r\n                    strength | uppercase\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('strength').invalid && leadForm.get('strength').touched\"\r\n                >\r\n                  <p\r\n                    class=\"caption status-danger\"\r\n                    *ngIf=\"leadForm.get('strength').errors?.required\"\r\n                  >\r\n                    Strength is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-mode\">Mode:</label>\r\n                <nb-select\r\n                  id=\"input-mode\"\r\n                  name=\"mode\"\r\n                  formControlName=\"mode\"\r\n                  placeholder=\"Select Mode\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('mode').touched\r\n                      ? leadForm.get('mode').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                >\r\n                  <nb-option value=\"\">Select Mode</nb-option>\r\n                  <nb-option *ngFor=\"let mode of modes\" [value]=\"mode\">{{\r\n                    mode | uppercase\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container *ngIf=\"leadForm.get('mode').invalid && leadForm.get('mode').touched\">\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('mode').errors?.required\">\r\n                    Mode is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-status\">Status:</label>\r\n                <nb-select\r\n                  id=\"input-status\"\r\n                  name=\"status\"\r\n                  formControlName=\"status\"\r\n                  placeholder=\"Select Status\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('status').touched\r\n                      ? leadForm.get('status').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                >\r\n                  <nb-option value=\"\">Select Status</nb-option>\r\n                  <nb-option *ngFor=\"let status of statuses\" [value]=\"status\">{{\r\n                    status | uppercase\r\n                  }}</nb-option>\r\n                </nb-select>\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('status').invalid && leadForm.get('status').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('status').errors?.required\">\r\n                    Status is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 col-sm-6\">\r\n              <div class=\"form-control-group\">\r\n                <label class=\"label\" for=\"input-comment\">Comment:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  nbInput\r\n                  id=\"input-comment\"\r\n                  name=\"comment\"\r\n                  formControlName=\"comment\"\r\n                  placeholder=\"Comment\"\r\n                  maxlength=\"50\"\r\n                  fullWidth\r\n                  [status]=\"\r\n                    leadForm.get('comment').touched\r\n                      ? leadForm.get('comment').invalid\r\n                        ? 'danger'\r\n                        : 'success'\r\n                      : 'basic'\r\n                  \"\r\n                />\r\n\r\n                <ng-container\r\n                  *ngIf=\"leadForm.get('comment').invalid && leadForm.get('comment').touched\"\r\n                >\r\n                  <p class=\"caption status-danger\" *ngIf=\"leadForm.get('comment').errors?.required\">\r\n                    Comment is required!\r\n                  </p>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12 text-right\">\r\n              <button nbButton size=\"small\" type=\"submit\">\r\n                <span>Next</span>\r\n                <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </nb-step>\r\n\r\n      <nb-step label=\"Submit\">\r\n        <div class=\"step-container\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-bordered\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <td>{{ leadForm.value.leadName }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Email</th>\r\n                  <td>{{ leadForm.value.leadEmail }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Phone</th>\r\n                  <td>{{ leadForm.value.leadContact }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Address</th>\r\n                  <td>{{ leadForm.value.address }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <td>{{ leadForm.value.date }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Follow Up Date</th>\r\n                  <td>{{ leadForm.value.followUpDate }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Category</th>\r\n                  <td>{{ getCategory(leadForm.value.category) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Course</th>\r\n                  <td>{{ getCourse(leadForm.value.course) }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Source</th>\r\n                  <td>{{ leadForm.value.source | uppercase }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Mode</th>\r\n                  <td>{{ leadForm.value.mode | uppercase }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Strength</th>\r\n                  <td>{{ leadForm.value.strength | uppercase }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Status</th>\r\n                  <td>{{ leadForm.value.status | uppercase }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Comment</th>\r\n                  <td>{{ leadForm.value.comment }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6 text-left\">\r\n              <button class=\"\" nbButton size=\"small\" nbStepperPrevious [disabled]=\"submit\">\r\n                <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\r\n                <span>prev</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n              <button\r\n                nbButton\r\n                size=\"small\"\r\n                (click)=\"saveLead()\"\r\n                [disabled]=\"submit\"\r\n                [nbSpinner]=\"submit\"\r\n                nbSpinnerStatus=\"primary\"\r\n                nbSpinnerSize=\"small\"\r\n              >\r\n                <span>Submit</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-step>\r\n    </nb-stepper>\r\n  </nb-card-body>\r\n</nb-card>\r\n","import { AddLeadComponent } from './add-lead.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: AddLeadComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AddLeadRoutingModule {}\n","import { DateService } from './../../../../services/shared-services/date.service';\r\nimport { CategoryModel, BranchModel } from './../../../../models/branch.model';\r\nimport { CourseModel } from './../../../../models/course.model';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { LeadService } from './../../../../services/lead.service';\r\nimport { LeadModel } from './../../../../models/lead.model';\r\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\r\nimport { BranchService } from './../../../../services/branch.service';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { CourseService } from '../../../../services/course.service';\r\nimport { NbToastrService, NbStepperComponent } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-add-lead',\r\n  templateUrl: './add-lead.component.html',\r\n  styleUrls: ['./add-lead.component.scss'],\r\n})\r\nexport class AddLeadComponent implements OnInit, OnDestroy {\r\n  @ViewChild('stepper', { static: false }) stepper: NbStepperComponent;\r\n\r\n  loading: boolean;\r\n  submit: boolean;\r\n\r\n  private branchId: string;\r\n\r\n  private leadId: string;\r\n  lead: LeadModel;\r\n\r\n  sources: string[];\r\n  strengths: string[];\r\n  modes: string[];\r\n  statuses: string[];\r\n\r\n  categories: CategoryModel[];\r\n  private courses: CourseModel[];\r\n  myCourses: CourseModel[];\r\n\r\n  leadForm: FormGroup;\r\n\r\n  constructor(\r\n    private branchService: BranchService,\r\n    private toastrService: NbToastrService,\r\n    private leadService: LeadService,\r\n    public dateService: DateService,\r\n    private courseService: CourseService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    // route.queryParams.subscribe((param: Params) => {\r\n    //   this.ngOnInit();\r\n    // });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.submit = false;\r\n\r\n    this.branchId = this.branchService.getBranchId();\r\n    if (!this.branchId) {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    let mode: string;\r\n\r\n    this.route.queryParams.subscribe((param: Params) => {\r\n      mode = param.mode;\r\n    });\r\n\r\n    this.leadId = this.leadService.getLeadId();\r\n\r\n    if (mode && mode !== 'edit') {\r\n      this.showToastr('top-right', 'danger', 'Invalid Route');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    } else if (mode && !this.leadId) {\r\n      this.showToastr('top-right', 'danger', 'Lead Not Found');\r\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\r\n      return;\r\n    }\r\n\r\n    this.categories = [];\r\n    this.courses = [];\r\n    this.myCourses = [];\r\n\r\n    this.modes = ['walk in', 'telephonic', 'email', 'digital'];\r\n    this.strengths = ['hot', 'cold'];\r\n    this.sources = [\r\n      'referral',\r\n      'seminar',\r\n      'advertisement',\r\n      'digital media',\r\n      'classifieds',\r\n      'others',\r\n    ];\r\n    this.statuses = ['open', 'lost', 'won'];\r\n\r\n    this.getCategories();\r\n    this.getCourses();\r\n\r\n    this.leadForm = new FormGroup({\r\n      leadName: new FormControl(null, { validators: [Validators.required] }),\r\n      leadContact: new FormControl(null, {\r\n        validators: [Validators.required, Validators.min(1000000000), Validators.max(9999999999)],\r\n      }),\r\n      leadEmail: new FormControl(null, { validators: [Validators.required, Validators.email] }),\r\n      category: new FormControl(null, { validators: [Validators.required] }),\r\n      course: new FormControl(null, { validators: [Validators.required] }),\r\n      address: new FormControl(null, { validators: [] }),\r\n      date: new FormControl(this.dateService.getDateString(), {\r\n        validators: [Validators.required],\r\n      }),\r\n      followUpDate: new FormControl(null, { validators: [Validators.required] }),\r\n      strength: new FormControl(null, { validators: [Validators.required] }),\r\n      mode: new FormControl(null, { validators: [Validators.required] }),\r\n      source: new FormControl(null, { validators: [Validators.required] }),\r\n      status: new FormControl(null, { validators: [Validators.required] }),\r\n      comment: new FormControl(null, { validators: [Validators.required] }),\r\n    });\r\n\r\n    if (mode && this.leadId) {\r\n      this.leadService.getLeadForEditing(this.leadId).subscribe(\r\n        (res: any) => {\r\n          this.lead = res;\r\n          this.leadForm.patchValue({\r\n            leadName: this.lead.leadName,\r\n            leadEmail: this.lead.leadEmail,\r\n            leadContact: this.lead.leadContact,\r\n            category: this.lead.category,\r\n            address: this.lead.address,\r\n            date: this.lead.date,\r\n            followUpDate: this.lead.followUpDate,\r\n            status: this.lead.status,\r\n            strength: this.lead.strength,\r\n            mode: this.lead.mode,\r\n            source: this.lead.source,\r\n            comment: this.lead.comment,\r\n          });\r\n\r\n          this.onSelectCategory(this.lead.category);\r\n\r\n          this.leadForm.patchValue({\r\n            course: this.lead.course,\r\n          });\r\n\r\n          this.loading = false;\r\n        },\r\n        (err: any) => {\r\n          this.showToastr('top-right', 'danger', err);\r\n          this.back();\r\n        },\r\n      );\r\n    } else {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  onSelectCategory(category: string) {\r\n    this.myCourses = this.courses.filter(\r\n      (course: CourseModel) => course.basicDetails.category === category,\r\n    );\r\n  }\r\n\r\n  private getCategories() {\r\n    this.branchService.getBranchData().subscribe((branch: BranchModel) => {\r\n      if (branch) {\r\n        this.categories = branch.categories;\r\n      }\r\n    });\r\n\r\n    if (!this.categories) {\r\n      this.branchService.getBranch(this.branchId).subscribe(\r\n        (branch: BranchModel) => {\r\n          this.branchService.setBranchData(branch);\r\n          this.categories = branch.categories;\r\n          this.loading = false;\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.loading = false;\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  private getCourses() {\r\n    this.courseService.getCoursesData().subscribe((courses: CourseModel[]) => {\r\n      this.courses = courses;\r\n    });\r\n  }\r\n\r\n  previousStep() {\r\n    this.stepper.previous();\r\n  }\r\n\r\n  submitLeadForm() {\r\n    this.leadForm.markAllAsTouched();\r\n    if (this.leadForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Fill all Details Correctly');\r\n      return;\r\n    }\r\n    this.stepper.next();\r\n  }\r\n\r\n  saveLead() {\r\n    this.leadForm.markAllAsTouched();\r\n    if (this.leadForm.invalid) {\r\n      this.showToastr('top-right', 'danger', 'Fill all Details Correctly');\r\n      return;\r\n    }\r\n    this.submit = true;\r\n\r\n    const lead = this.leadForm.value;\r\n    lead.branch = this.branchId;\r\n\r\n    if (!this.lead) {\r\n      this.leadService.saveLead(lead).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'New Lead Added Successfully!');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    } else {\r\n      lead._id = this.leadId;\r\n      this.leadService.editLead(lead).subscribe(\r\n        (res: any) => {\r\n          this.showToastr('top-right', 'success', 'Lead Updated Successfully!');\r\n          this.back();\r\n        },\r\n        (error: any) => {\r\n          this.showToastr('top-right', 'danger', error);\r\n          this.submit = false;\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  back() {\r\n    const leadType = this.leadService.getLeadType();\r\n    this.router.navigate(['../'], {\r\n      relativeTo: this.route,\r\n      queryParams: { type: leadType },\r\n      replaceUrl: true,\r\n    });\r\n  }\r\n\r\n  getCategory(categoryId: string) {\r\n    const category = this.categories.find(\r\n      (curCategory: CategoryModel) => curCategory._id === categoryId,\r\n    );\r\n\r\n    if (category) {\r\n      return category.category;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  getCourse(courseId: string) {\r\n    const course = this.courses.find((curCourse: CourseModel) => curCourse._id === courseId);\r\n\r\n    if (course) {\r\n      return course.basicDetails.courseName;\r\n    }\r\n\r\n    return '--';\r\n  }\r\n\r\n  private showToastr(position: any, status: any, message: string) {\r\n    this.toastrService.show(status, message, {\r\n      position,\r\n      status,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.leadService.deleteLeadId();\r\n  }\r\n}\r\n","import { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCardModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbIconModule,\n  NbSpinnerModule,\n  NbStepperModule,\n  NbInputModule,\n} from '@nebular/theme';\nimport { AddLeadComponent } from './add-lead.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddLeadRoutingModule } from './add-lead-routing.module';\n\n@NgModule({\n  declarations: [AddLeadComponent],\n  imports: [\n    CommonModule,\n    AddLeadRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n    NbSelectModule,\n    NbIconModule,\n    NbSpinnerModule,\n    NbStepperModule,\n    NbInputModule,\n  ],\n})\nexport class AddLeadModule {}\n"]}