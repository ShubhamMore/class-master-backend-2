{"version":3,"sources":["webpack:///src/app/institute/branch/budget/manage-budget/manage-budget.component.html","webpack:///src/app/institute/branch/budget/manage-budget/manage-budget-routing.module.ts","webpack:///src/app/institute/branch/budget/manage-budget/manage-budget.component.ts","webpack:///src/app/institute/branch/budget/manage-budget/manage-budget.module.ts"],"names":["ManageBudgetComponent","ManageBudgetModule","ManageBudgetRoutingModule","routes","path","component","budgetService","branchService","dialogService","dateService","toastrService","themeService","router","route","this","loading","branchId","getBranchId","incomes","expenses","themeSubscription","getJsTheme","subscribe","config","themeConfig","months","getMonths","years","getYears","month","getCurrentMonth","setMonth","year","getCurrentYear","setYear","searchBudget","navigate","relativeTo","dialog","colors","variables","chartjs","chartData","data","labels","datasets","getTotalIncome","getTotalExpense","backgroundColor","warningLight","dangerLight","options","maintainAspectRatio","responsive","scales","xAxes","display","yAxes","legend","fontColor","textColor","open","context","getBudgetForBranch","budgetData","error","showToastr","totalIncome","forEach","income","amount","totalExpense","expense","id","i","type","deleteBudget","budget","splice","position","status","message","show","unsubscribe","addIncomeExpense","onSelectYear","onSelectMonth","viewStatement","openChart","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild","ChartModule"],"mappings":"oiBAoCY,gDAAqD,yBAAU,+B,uBAAzB,qCAAe,iE,yBAgBrD,gDAAgE,yBAE9D,+B,uBAFsC,6CAAwB,uE,gEAyE5D,yCACE,sCAAI,yBAAW,8BACf,sCACE,2CAAsB,yBAAkB,8BAC1C,8BACA,sCACE,wCAAM,yBAAmB,8BAC3B,8BACA,yCACE,+CAIE,sKAAqC,aACtC,8BACH,8BACF,8B,oCAfM,kEAEoB,sEAGhB,wE,yBAjBhB,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,kCAAM,8BACV,sCAAI,kCAAM,8BACV,0CAAwB,mCAAM,8BAChC,8BACF,8BACA,0CACE,6CAiBF,8BACF,8BACF,+B,2CAnBU,6E,yBAZZ,0CACE,6CA+BF,wC,2EA/BgC,iFAAyC,e,gEA8CjE,yCACE,sCAAI,yBAAW,8BACf,sCACE,2CAAsB,yBAAmB,8BAC3C,8BACA,sCACE,wCAAM,yBAAoB,8BAC5B,8BACA,yCACE,+CAIE,sKAAsC,cACvC,8BACH,8BACF,8B,oCAfM,kEAEoB,sEAGhB,wE,yBAjBhB,0CACE,4CACE,yCACE,sCACE,sCAAI,6BAAC,8BACL,sCAAI,mCAAO,8BACX,sCAAI,kCAAM,8BACV,0CAAwB,mCAAM,8BAChC,8BACF,8BACA,6CACE,6CAiBF,8BACF,8BACF,+B,2CAnBU,8E,yBAZZ,0CACE,6CA+BF,wC,2EA/BgC,kFAA2C,e,sBAsCjF,wCAA4B,sCAAU,+B,sBAItC,wCAA4B,qCAAS,+B,sBAIrC,wCAA4B,uCAAW,+B,yBAIvC,2CACE,kDACE,sCAAI,qCAAS,8BACf,8BACA,gDACE,uCACF,8BACA,kDACE,6CAAkD,iEAAS,WAAa,iCAAK,8BAC/E,8BACF,+B,uBALsB,qEAAuB,sBCxM/C,ICSaA,ECmBAC,EFNAC,EAtBPC,EAAiB,CACrB,CAAEC,KAAM,GAAIC,WCQDL,EAAN,WAgBL,WACUM,EACAC,EACAC,EACDC,EACAC,EACCC,EACAC,EACAC,aAPA,KAAAP,gBACA,KAAAC,gBACA,KAAAC,gBACD,KAAAC,cACA,KAAAC,gBACC,KAAAC,eACA,KAAAC,SACA,KAAAC,Q,UAxBL,O,EAAA,G,EAAA,kCA2BK,WACRC,KAAKC,WAELD,KAAKE,SAAWF,KAAKP,cAAcU,cAC9BH,KAAKE,UAKVF,KAAKI,QAAU,GACfJ,KAAKK,SAAW,GAEhBL,KAAKM,kBAAoBN,KAAKH,aAAaU,aAAaC,WAAWC,YACjET,EAAKU,YAAcD,KAGrBT,KAAKW,OAASX,KAAKL,YAAYiB,YAC/BZ,KAAKa,MAAQb,KAAKL,YAAYmB,WAE9Bd,KAAKe,MAAQf,KAAKL,YAAYqB,kBAC9BhB,KAAKR,cAAcyB,SAASjB,KAAKe,OACjCf,KAAKkB,KAAOlB,KAAKL,YAAYwB,iBAC7BnB,KAAKR,cAAc4B,QAAQpB,KAAKkB,MAEhClB,KAAKqB,gBAnBHrB,KAAKF,OAAOwB,SAAS,CAAC,OAAQ,CAAEC,WAAYvB,KAAKD,UAhChD,yCAuDHC,KAAKF,OAAOwB,SAAS,CAAC,UAAW,CAAEC,WAAYvB,KAAKD,UAvDjD,sCA2DHC,KAAKF,OAAOwB,SAAS,CAAC,cAAe,CAAEC,WAAYvB,KAAKD,UA3DrD,mCA8DQmB,GACXlB,KAAKkB,KAAOA,EACZlB,KAAKR,cAAc4B,QAAQF,GACd,KAATA,IACFlB,KAAKe,MAAQ,IAEff,KAAKqB,iBApEF,oCAuESN,GACZf,KAAKe,MAAQA,EACbf,KAAKR,cAAcyB,SAASjB,KAAKe,OACjCf,KAAKqB,iBA1EF,gCA6EKG,GACR,IAAMC,EAAczB,KAAKU,YAAYgB,UAC/BC,EAAe3B,KAAKU,YAAYgB,UAAUC,QAE1CC,EAAY,CAChBC,KAAM,CACJC,OAAQ,CAAC,SAAU,WACnBC,SAAU,CACR,CACEF,KAAM,CAAC7B,KAAKgC,iBAAkBhC,KAAKiC,mBACnCC,gBAAiB,CAACT,EAAOU,aAAcV,EAAOW,gBAKpDC,QAAS,CACPC,qBAAoBA,EACpBC,YAAWA,EACXC,OAAQ,CACNC,MAAO,CACL,CACEC,SAAQA,IAGZC,MAAO,CACL,CACED,SAAQA,KAIdE,OAAQ,CACNd,OAAQ,CACNe,UAAWlB,EAAQmB,cAK3B9C,KAAKN,cAAcqD,KAAKvB,EAAQ,CAAEwB,QAASpB,MAlHxC,qCAqHS,WACZ5B,KAAKC,WACLD,KAAKR,cAAcyD,mBAAmBjD,KAAKE,SAAUF,KAAKe,MAAOf,KAAKkB,MAAMV,WACzE0C,YACClD,EAAKI,QAAU8C,EAAW9C,QAC1BJ,EAAKK,SAAW6C,EAAW7C,SAC3BL,EAAKC,cAENkD,YACCnD,EAAKoD,WAAW,YAAa,SAAUD,GACvCnD,EAAKC,gBA/HN,uCAqIH,IAAIoD,EAAc,EAIlB,OAHArD,KAAKI,QAAQkD,SAASC,YACpBF,GAAeE,EAAOC,UAEjBH,IAzIJ,wCA6IH,IAAII,EAAe,EAInB,OAHAzD,KAAKK,SAASiD,SAASI,YACrBD,GAAgBC,EAAQF,UAEnBC,IAjJJ,wCAuJH,OAFqBzD,KAAKgC,iBACJhC,KAAKiC,oBAtJxB,mCA0JQ0B,EAAYC,EAAWC,cAClC7D,KAAKR,cAAcsE,aAAaH,GAAInD,WACjCuD,YACc,WAATF,GACF7D,EAAKI,QAAQ4D,OAAOJ,EAAG,GACvB5D,EAAKoD,WAAW,YAAa,UAAW,mCAExCpD,EAAKK,SAAS2D,OAAOJ,EAAG,GACxB5D,EAAKoD,WAAW,YAAa,UAAW,sCAG3CD,YACCnD,EAAKoD,WAAW,YAAa,SAAUD,GACvCnD,EAAKC,gBAvKN,iCA4KcgE,EAAeC,EAAaC,GAC7CnE,KAAKJ,cAAcwE,KAAKF,EAAQC,EAAS,CACvCF,WACAC,aA/KC,kCAoLHlE,KAAKM,kBAAkB+D,mB,2BApLpB,K,sCAAMnF,GAAqB,oT,mDAArBA,EAAqB,2oD,wCFblC,2CACE,kDACE,yCACE,yCACE,sCAAI,kCAAM,8BACZ,8BAEA,yCACE,4CAOE,qDAAS,EAAAoF,sBAET,gDAAmB,wCACrB,8BACF,8BACF,8BACF,8BAEA,iDACE,0CACE,0CACE,0CACE,4CAAsC,yCAAY,8BAClD,gDAIE,+DAAkB,EAAAC,aAAA,MAGlB,gDAAoB,sCAAS,8BAC7B,mDACF,8BACF,8BACF,8BAEA,0CACE,0CACE,6CAAuC,0CAAa,8BACpD,iDAIE,+DAAkB,EAAAC,cAAA,MAGlB,gDAAoB,uCAAU,8BAC9B,mDAGF,8BACF,8BACF,8BAEA,0CACE,8CAQE,qDAAS,EAAAC,mBAET,8CAAkB,0CACpB,8BACF,8BACF,8BAEA,kCAEA,0CACE,0CACE,uCACE,2CAAQ,sCAAS,8BACjB,qCAAS,yCAAM,0BAAwB,8BACzC,8BACF,8BAEA,0CACE,uCACE,2CAAQ,uCAAU,8BAClB,qCAAS,yCAAM,0BAAyB,8BAC1C,8BACF,8BAEA,0CACE,uCACE,2CAAQ,uCAAU,8BAClB,qCACA,4CACG,0BAAyB,8BAE9B,8BACF,8BAEA,2CACE,8CAAyD,0HAAS,EAAAC,UAAA,MAChE,4CAAgB,0CAClB,8BACF,8BACF,8BAEA,kCAEA,iDACE,8CACE,sDAiCF,8BACA,8CACE,sDAiCF,8BACF,8BACF,8BACF,8BAEA,gGAIA,gGAIA,gGAIA,gG,6CAvKY,0EAKW,yEAWX,0EAKW,0EA6BE,2FAOA,2FAQT,8GACH,2FAgBS,yEAAoC,cAmCpC,yEAAoC,gB,kPC7IxD,CACEpF,KAAM,iBACNqF,aAAc,kBACZ,iCAAkEC,MAC/DC,YAACA,OAAKA,EAAEC,wBAIf,CACExF,KAAM,KACNyF,WAAY,iBACZC,UAAW,SAQR,IAAM5F,EAAN,yB,gDAAMA,I,+EAAAA,IAAyB,SAH3B,CAAC,IAAa6F,SAAS5F,IACtB,O,GEQL,IAAMF,EAAN,yB,gDAAMA,I,+EAAAA,IAAkB,SAdpB,CACP,IACA,EACA,IACA,IACA,KACA,IAEA,EAAA+F,YACA,KACA,IACA,S","file":"x","sourcesContent":["<nb-card>\n  <nb-card-header>\n    <div class=\"row\">\n      <div class=\"col-md-9 col-sm-8\">\n        <h3>BUDGET</h3>\n      </div>\n\n      <div class=\"col-md-3 col-sm-4\">\n        <button\n          type=\"button\"\n          fullWidth\n          nbTooltip=\"Add Income Expense\"\n          nbButton\n          size=\"small\"\n          status=\"primary\"\n          (click)=\"addIncomeExpense()\"\n        >\n          Add Income/Expense <nb-icon icon=\"plus-circle-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n  </nb-card-header>\n\n  <nb-card-body>\n    <div class=\"row\">\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <div class=\"form-control-group\">\n          <label class=\"label\" for=\"input-year\">Select Year:</label>\n          <nb-select\n            name=\"year\"\n            id=\"input-year\"\n            [selected]=\"year\"\n            (selectedChange)=\"onSelectYear($event)\"\n            fullWidth\n          >\n            <nb-option value=\"\">All Years</nb-option>\n            <nb-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</nb-option>\n          </nb-select>\n        </div>\n      </div>\n\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <div class=\"form-control-group\">\n          <label class=\"label\" for=\"input-month\">Select Month:</label>\n          <nb-select\n            name=\"month\"\n            id=\"input-month\"\n            [selected]=\"month\"\n            (selectedChange)=\"onSelectMonth($event)\"\n            fullWidth\n          >\n            <nb-option value=\"\">All Months</nb-option>\n            <nb-option *ngFor=\"let month of months\" [value]=\"month.monthNo\">{{\n              month.month\n            }}</nb-option>\n          </nb-select>\n        </div>\n      </div>\n\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <button\n          class=\"mt-4\"\n          type=\"button\"\n          nbTooltip=\"Budget Summery\"\n          nbButton\n          size=\"small\"\n          fullWidth\n          status=\"success\"\n          (click)=\"viewStatement()\"\n        >\n          View Summery&nbsp;<nb-icon icon=\"list-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n\n    <hr />\n\n    <div class=\"row\">\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <h4>\n          <strong>Income : </strong>\n          &#x20b9; <span>{{ getTotalIncome() }}/-</span>\n        </h4>\n      </div>\n\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <h4>\n          <strong>Expense : </strong>\n          &#x20b9; <span>{{ getTotalExpense() }}/-</span>\n        </h4>\n      </div>\n\n      <div class=\"col-md-4 col-sm-6 col-12\">\n        <h4>\n          <strong>Balance : </strong>\n          &#x20b9;\n          <span [ngClass]=\"getTotalBalance() >= 0 ? '' : 'negative-balance'\"\n            >{{ getTotalBalance() }}/-</span\n          >\n        </h4>\n      </div>\n\n      <div class=\"col-md-3 col-sm-5 col-7 pt-3 mx-auto\">\n        <button nbButton size=\"small\" status=\"primary\" fullWidth (click)=\"openChart(budgetChart)\">\n          View Chart&nbsp;<nb-icon icon=\"pie-chart-outline\"></nb-icon>\n        </button>\n      </div>\n    </div>\n\n    <hr />\n\n    <nb-tabset fullWidth>\n      <nb-tab tabTitle=\"INCOME\">\n        <ng-container *ngIf=\"!loading; else loadingBudget\">\n          <div class=\"table-responsive\" *ngIf=\"incomes.length > 0; else noIncome\">\n            <table class=\"table table-sm table-hover\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Income</th>\n                  <th>Amount</th>\n                  <th class=\"text-center\">Delete</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let income of incomes; let i = index\" routerLinkActive=\"active\">\n                  <td>{{ i + 1 }}</td>\n                  <td>\n                    <span class=\"pointer\">{{ income.title }}</span>\n                  </td>\n                  <td>\n                    <span>{{ income.amount }}</span>\n                  </td>\n                  <td class=\"text-center\">\n                    <nb-icon\n                      class=\"pointer delete-budget\"\n                      icon=\"close-circle-outline\"\n                      nbTooltip=\"Delete Income\"\n                      (click)=\"deleteBudget(income._id, i, 'income')\"\n                    ></nb-icon>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </nb-tab>\n      <nb-tab tabTitle=\"EXPENSE\">\n        <ng-container *ngIf=\"!loading; else loadingBudget\">\n          <div class=\"table-responsive\" *ngIf=\"expenses.length > 0; else noExpense\">\n            <table class=\"table table-sm table-hover\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Expense</th>\n                  <th>Amount</th>\n                  <th class=\"text-center\">Delete</th>\n                </tr>\n              </thead>\n              <tbody class=\"expense\">\n                <tr *ngFor=\"let expense of expenses; let i = index\" routerLinkActive=\"active\">\n                  <td>{{ i + 1 }}</td>\n                  <td>\n                    <span class=\"pointer\">{{ expense.title }}</span>\n                  </td>\n                  <td>\n                    <span>{{ expense.amount }}</span>\n                  </td>\n                  <td class=\"text-center\">\n                    <nb-icon\n                      class=\"pointer delete-budget\"\n                      icon=\"close-circle-outline\"\n                      nbTooltip=\"Delete Expense\"\n                      (click)=\"deleteBudget(expense._id, i, 'expense')\"\n                    ></nb-icon>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </nb-tab>\n    </nb-tabset>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingBudget>\n  <p class=\"text-center pt-2\">Loading...</p>\n</ng-template>\n\n<ng-template #noIncome>\n  <p class=\"text-center pt-2\">No Income</p>\n</ng-template>\n\n<ng-template #noExpense>\n  <p class=\"text-center pt-2\">No Expenses</p>\n</ng-template>\n\n<ng-template #budgetChart let-chartData let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>\n      <h4>Pie Chart</h4>\n    </nb-card-header>\n    <nb-card-body>\n      <chart type=\"pie\" [data]=\"chartData.data\" [options]=\"chartData.options\"></chart>\n    </nb-card-body>\n    <nb-card-footer>\n      <button class=\"float-right\" nbButton size=\"small\" (click)=\"ref.close()\">Close</button>\n    </nb-card-footer>\n  </nb-card>\n</ng-template>\n","import { ManageBudgetComponent } from './manage-budget.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: ManageBudgetComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageBudgetRoutingModule {}\n","import { DateService, Month } from './../../../../services/shared-services/date.service';\nimport { Component, OnInit, TemplateRef } from '@angular/core';\nimport { BudgetService } from '../../../../services/budget.service';\nimport { BranchService } from '../../../../services/branch.service';\nimport { BudgetModel } from '../../../../models/budget.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NbDialogService, NbThemeService, NbToastrService } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-manage-budget',\n  templateUrl: './manage-budget.component.html',\n  styleUrls: ['./manage-budget.component.scss'],\n})\nexport class ManageBudgetComponent implements OnInit {\n  loading: boolean;\n  private branchId: string;\n\n  incomes: BudgetModel[];\n  expenses: BudgetModel[];\n\n  months: Month[];\n  years: string[];\n\n  month: string;\n  year: string;\n\n  themeSubscription: any;\n  themeConfig: any;\n\n  constructor(\n    private budgetService: BudgetService,\n    private branchService: BranchService,\n    private dialogService: NbDialogService,\n    public dateService: DateService,\n    public toastrService: NbToastrService,\n    private themeService: NbThemeService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.loading = true;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../'], { relativeTo: this.route });\n      return;\n    }\n\n    this.incomes = [];\n    this.expenses = [];\n\n    this.themeSubscription = this.themeService.getJsTheme().subscribe((config: any) => {\n      this.themeConfig = config;\n    });\n\n    this.months = this.dateService.getMonths();\n    this.years = this.dateService.getYears();\n\n    this.month = this.dateService.getCurrentMonth();\n    this.budgetService.setMonth(this.month);\n    this.year = this.dateService.getCurrentYear();\n    this.budgetService.setYear(this.year);\n\n    this.searchBudget();\n  }\n\n  addIncomeExpense() {\n    this.router.navigate(['../add'], { relativeTo: this.route });\n  }\n\n  viewStatement() {\n    this.router.navigate(['../summery'], { relativeTo: this.route });\n  }\n\n  onSelectYear(year: string) {\n    this.year = year;\n    this.budgetService.setYear(year);\n    if (year === '') {\n      this.month = '';\n    }\n    this.searchBudget();\n  }\n\n  onSelectMonth(month: string) {\n    this.month = month;\n    this.budgetService.setMonth(this.month);\n    this.searchBudget();\n  }\n\n  openChart(dialog: TemplateRef<any>) {\n    const colors: any = this.themeConfig.variables;\n    const chartjs: any = this.themeConfig.variables.chartjs;\n\n    const chartData = {\n      data: {\n        labels: ['Income', 'Expense'],\n        datasets: [\n          {\n            data: [this.getTotalIncome(), this.getTotalExpense()],\n            backgroundColor: [colors.warningLight, colors.dangerLight],\n          },\n        ],\n      },\n\n      options: {\n        maintainAspectRatio: false,\n        responsive: true,\n        scales: {\n          xAxes: [\n            {\n              display: false,\n            },\n          ],\n          yAxes: [\n            {\n              display: false,\n            },\n          ],\n        },\n        legend: {\n          labels: {\n            fontColor: chartjs.textColor,\n          },\n        },\n      },\n    };\n    this.dialogService.open(dialog, { context: chartData });\n  }\n\n  searchBudget() {\n    this.loading = true;\n    this.budgetService.getBudgetForBranch(this.branchId, this.month, this.year).subscribe(\n      (budgetData: { incomes: BudgetModel[]; expenses: BudgetModel[] }) => {\n        this.incomes = budgetData.incomes;\n        this.expenses = budgetData.expenses;\n        this.loading = false;\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  getTotalIncome() {\n    let totalIncome = 0;\n    this.incomes.forEach((income: BudgetModel) => {\n      totalIncome += income.amount;\n    });\n    return totalIncome;\n  }\n\n  getTotalExpense() {\n    let totalExpense = 0;\n    this.expenses.forEach((expense: BudgetModel) => {\n      totalExpense += expense.amount;\n    });\n    return totalExpense;\n  }\n\n  getTotalBalance() {\n    const totalIncomes = this.getTotalIncome();\n    const totalExpenses = this.getTotalExpense();\n    return totalIncomes - totalExpenses;\n  }\n\n  deleteBudget(id: string, i: number, type: string) {\n    this.budgetService.deleteBudget(id).subscribe(\n      (budget: any) => {\n        if (type === 'income') {\n          this.incomes.splice(i, 1);\n          this.showToastr('top-right', 'success', 'Income Deleted Successfully!!');\n        } else {\n          this.expenses.splice(i, 1);\n          this.showToastr('top-right', 'success', 'Expense Deleted Successfully!!');\n        }\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n\n  OnDestroy() {\n    this.themeSubscription.unsubscribe();\n  }\n}\n","// import { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { ChartModule } from 'angular2-chartjs';\nimport {\n  NbCardModule,\n  NbInputModule,\n  NbButtonModule,\n  NbSelectModule,\n  NbTooltipModule,\n  NbIconModule,\n  NbTabsetModule,\n} from '@nebular/theme';\nimport { ManageBudgetComponent } from './manage-budget.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ManageBudgetRoutingModule } from './manage-budget-routing.module';\n\n@NgModule({\n  declarations: [ManageBudgetComponent],\n  imports: [\n    CommonModule,\n    ManageBudgetRoutingModule,\n    NbCardModule,\n    NbInputModule,\n    NbSelectModule,\n    NbButtonModule,\n    // NgxChartsModule,\n    ChartModule,\n    NbTooltipModule,\n    NbIconModule,\n    NbTabsetModule,\n  ],\n})\nexport class ManageBudgetModule {}\n"]}