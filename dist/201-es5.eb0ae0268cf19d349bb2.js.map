{"version":3,"sources":["webpack:///src/app/services/branch-storage.service.ts","webpack:///src/app/institute/branch/storage/storage.component.html","webpack:///src/app/institute/branch/storage/storage-routing.module.ts","webpack:///src/app/institute/branch/storage/storage.component.ts","webpack:///src/app/institute/branch/storage/storage.module.ts"],"names":["BranchStorageService","httpService","branchStorage","BehaviorSubject","this","next","branch","httpPost","api","data","pipe","map","response","catchError","err","throwError","storagePackage","order","receipt","StorageComponent","StorageModule","StorageRoutingModule","routes","path","component","branchService","dialogService","paymentService","storageService","storagePackageService","branchStorageService","toastrService","router","route","dateService","loading","branchId","getBranchId","getBranchStorage","subscribe","calculateStorage","getStoragePackages","storagePackages","error","showToastr","navigate","relativeTo","status","updateStorage","updateBranchStorage","paymentDetails","packageType","res","ngOnInit","packageName","price","remainingDays","dateDifferenceInDays","getDateString","extraStorageExpireOn","branchStoragePackage","find","storage","getAmount","Math","round","validity","toString","checkout","open","context","closeOnBackdropClick","closeOnEsc","onClose","onClosePayment","amount","upgradeAmount","setPaymentDetails","getPaymentDetails","onCheckout","bytes","convertByteToUnit","value","toFixed","unit","storageInBytes","convertUnitToBytes","storageSizeWithUnit","totalStorage","totalStorageAssigned","usedStorage","totalStorageUsed","availableStorage","usedStorageInPercentage","parseInt","parseFloat","position","message","show","back","loadChildren","then","m","PageNotFoundModule","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { BranchStorageModel } from './../models/branch-storage.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpService } from './shared-services/http.service';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BranchStorageService {\r\n  branchStorage = new BehaviorSubject<BranchStorageModel>(null);\r\n\r\n  setBranchStorageDetails(branchStorage: BranchStorageModel) {\r\n    this.branchStorage.next(branchStorage);\r\n  }\r\n\r\n  getBranchStorageDetails() {\r\n    return this.branchStorage;\r\n  }\r\n\r\n  deleteBranchStorageDetails() {\r\n    this.branchStorage.next(null);\r\n  }\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  getBranchStorage(branch: any) {\r\n    const data = { api: 'getBranchStorage', data: { branch } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n\r\n  updateBranchStorage(branch: string, storagePackage: string, order: string, receipt: string) {\r\n    const data = { api: 'updateBranchStorage', data: { branch, storagePackage, order, receipt } };\r\n    return this.httpService.httpPost(data).pipe(\r\n      map((response: any) => {\r\n        return response;\r\n      }),\r\n      catchError((err: any) => {\r\n        return throwError(err);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<nb-card>\n  <nb-card-header>\n    <button class=\"float-right\" nbButton size=\"small\" status=\"warning\" (click)=\"back()\">\n      Back\n    </button>\n    <h4>Storage</h4>\n  </nb-card-header>\n  <nb-card-body>\n    <div class=\"row\" *ngIf=\"!loading; else loadingData\">\n      <div class=\"col-md-6 col-12\">\n        <p>\n          <strong>Regular Storage: </strong>\n          {{ convertByteToUnit(branchStorage.regularStorageAssigned) }}\n        </p>\n        <ng-container *ngIf=\"!!branchStorage.storagePackage\">\n          <p>\n            <strong>Extra Storage Package: </strong>\n            {{ branchStorage.storagePackage }}\n          </p>\n          <p>\n            <strong>Extra Storage: </strong>\n            {{ convertByteToUnit(branchStorage.extraStorageAssigned) }}\n          </p>\n          <p>\n            <strong>Extra Storage Expires On: </strong>\n            {{ dateService.formatDate(branchStorage.extraStorageExpireOn) }}\n          </p>\n        </ng-container>\n        <p>\n          <strong>Total Storage: </strong>\n          {{ convertByteToUnit(branchStorage.totalStorageAssigned) }}\n        </p>\n      </div>\n\n      <div class=\"col-md-6 col-12\">\n        <div class=\"progress-info\">\n          <h4>\n            {{ availableStorage }} <small>left of {{ totalStorage }}</small>\n          </h4>\n          <nb-progress-bar [value]=\"usedStorageInPercentage\" status=\"danger\" [displayValue]=\"true\">\n            <span *ngIf=\"usedStorageInPercentage >= 25\">&nbsp;Used</span>\n          </nb-progress-bar>\n          <div class=\"caption description\">\n            <bdi>{{ usedStorage }} Used</bdi>\n          </div>\n        </div>\n      </div>\n    </div>\n  </nb-card-body>\n</nb-card>\n\n<nb-card>\n  <nb-card-header>\n    <h6>Want to increase Storage?</h6>\n    <h4>Storage Packages</h4>\n  </nb-card-header>\n  <nb-card-body>\n    <ng-container *ngIf=\"!loading; else loadingData\">\n      <div class=\"row\" *ngIf=\"storagePackages.length > 0; else noPackages\">\n        <div\n          class=\"col-md-3 col-sm-6 col-12 mx-auto\"\n          *ngFor=\"let package of storagePackages; let i = index\"\n        >\n          <nb-card class=\"card\">\n            <nb-card-header>\n              <h4 class=\"text-center\">{{ package.packageName }}</h4>\n            </nb-card-header>\n            <nb-card-body>\n              <div>\n                <nb-icon icon=\"hard-drive-outline\"></nb-icon>\n                &nbsp;\n                <span>{{ calculateStorageSize(package.storage) }}</span>\n              </div>\n              <div>\n                <nb-icon icon=\"clock-outline\"></nb-icon>\n                &nbsp;\n                <span>{{ dateService.convertDaysToMonths(package.validity) }} Month/s</span>\n              </div>\n              <div\n                [ngClass]=\"\n                  branchStorage.storagePackage && package.packageName > branchStorage.storagePackage\n                    ? 'line-on-text'\n                    : ''\n                \"\n              >\n                <nb-icon icon=\"pricetags-outline\"></nb-icon>\n                &nbsp;\n                <span>{{ getAmount(package.price) }}/-</span>\n              </div>\n              <div *ngIf=\"package.packageName > branchStorage.storagePackage\">\n                <nb-icon icon=\"pricetags-outline\"></nb-icon>\n                &nbsp;\n                <span>{{ upgradeAmount(package.price) }}/-</span>\n              </div>\n            </nb-card-body>\n            <nb-card-footer>\n              <button\n                class=\"float-right\"\n                nbButton\n                outline\n                size=\"small\"\n                [status]=\"'success'\"\n                [nbTooltip]=\"isUpgradable(package) ? 'Can\\'t Downgrade Package' : 'Upgrade Package'\"\n                (click)=\"activate(package)\"\n                [disabled]=\"isUpgradable(package)\"\n                *ngIf=\"branchStorage.storagePackage !== package.packageName; else activePackage\"\n              >\n                {{\n                  branchStorage.storagePackage && package.packageName > branchStorage.storagePackage\n                    ? 'Upgrade'\n                    : 'Activate'\n                }}\n              </button>\n            </nb-card-footer>\n          </nb-card>\n        </div>\n      </div>\n    </ng-container>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #loadingData>\n  <p class=\"pt-5 pb-5 text-center\">Loading...</p>\n</ng-template>\n\n<ng-template #noPackages>\n  <p class=\"pt-5 pb-5 text-center\">No Storage Packages</p>\n</ng-template>\n\n<ng-template #activePackage>\n  <button class=\"float-right\" nbButton size=\"small\" [status]=\"'success'\">\n    {{ 'Active' }}\n  </button>\n</ng-template>\n","import { StorageComponent } from './storage.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: StorageComponent },\n\n  {\n    path: 'page-not-found',\n    loadChildren: () =>\n      import('../../../shared/page-not-found/page-not-found.module').then(\n        (m) => m.PageNotFoundModule,\n      ),\n  },\n\n  {\n    path: '**',\n    redirectTo: 'page-not-found',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class StorageRoutingModule {}\n","import { CheckoutComponent } from './../../checkout/checkout.component';\nimport { PaymentComponent } from './../../payment/payment.component';\nimport { PaymentService } from './../../../services/payment.service';\nimport { NbToastrService, NbDialogService } from '@nebular/theme';\nimport { DateService } from './../../../services/shared-services/date.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BranchStorageService } from './../../../services/branch-storage.service';\nimport { BranchService } from './../../../services/branch.service';\nimport { StoragePackageService } from './../../../services/storage-package.service';\nimport { StoragePackageModel } from './../../../models/storage-package.model';\nimport { BranchStorageModel } from './../../../models/branch-storage.model';\nimport { Component, OnInit } from '@angular/core';\nimport { StorageService } from '../../../services/shared-services/storage.service';\n\n@Component({\n  selector: 'ngx-storage',\n  templateUrl: './storage.component.html',\n  styleUrls: ['./storage.component.scss'],\n})\nexport class StorageComponent implements OnInit {\n  loading: boolean;\n  branchId: string;\n\n  branchStorage: BranchStorageModel;\n  storagePackages: StoragePackageModel[];\n\n  totalStorage: string;\n  usedStorage: string;\n  availableStorage: string;\n  usedStorageInPercentage: number;\n\n  paymentDetails: { planType: string; packageType: string; amount: string };\n\n  constructor(\n    private branchService: BranchService,\n    private dialogService: NbDialogService,\n    private paymentService: PaymentService,\n    private storageService: StorageService,\n    private storagePackageService: StoragePackageService,\n    private branchStorageService: BranchStorageService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public dateService: DateService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this.branchId = this.branchService.getBranchId();\n    if (!this.branchId) {\n      this.router.navigate(['../page-not-found'], { relativeTo: this.route });\n      return;\n    }\n\n    this.branchStorageService.getBranchStorage(this.branchId).subscribe(\n      (branchStorage: BranchStorageModel) => {\n        this.branchStorage = branchStorage;\n        this.calculateStorage(branchStorage);\n\n        this.storagePackageService.getStoragePackages().subscribe(\n          (storagePackages: StoragePackageModel[]) => {\n            this.storagePackages = storagePackages;\n            this.loading = false;\n          },\n          (error: any) => {\n            this.showToastr('top-right', 'danger', error);\n            this.loading = false;\n          },\n        );\n      },\n      (error: any) => {\n        this.showToastr('top-right', 'danger', error);\n        this.loading = false;\n      },\n    );\n  }\n\n  onClosePayment(order: any) {\n    if (order.status) {\n      this.updateStorage(order.order, order.receipt);\n    }\n  }\n\n  updateStorage(order: string, receipt: string) {\n    this.branchStorageService\n      .updateBranchStorage(this.branchId, this.paymentDetails.packageType, order, receipt)\n      .subscribe(\n        (res: any) => {\n          this.ngOnInit();\n        },\n        (error: any) => {\n          this.showToastr('top-right', 'danger', error);\n        },\n      );\n  }\n\n  isUpgradable(storagePackage: StoragePackageModel) {\n    if (!this.branchStorage.storagePackage) {\n      return false;\n    } else if (storagePackage.packageName > this.branchStorage.storagePackage) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  upgradeAmount(price: number) {\n    const remainingDays = this.dateService.dateDifferenceInDays(\n      this.dateService.getDateString(),\n      this.branchStorage.extraStorageExpireOn,\n    );\n\n    const branchStoragePackage = this.storagePackages.find(\n      (storage: StoragePackageModel) => storage.packageName === this.branchStorage.storagePackage,\n    );\n\n    const remainingAmount =\n      (+branchStoragePackage.price / +branchStoragePackage.validity) * +remainingDays;\n\n    const upgradableAmount = this.getAmount(Math.round(+(price - remainingAmount) * 1.1));\n\n    return upgradableAmount.toString();\n  }\n\n  onCheckout(checkout: any) {\n    if (checkout.status) {\n      this.dialogService\n        .open(PaymentComponent, {\n          context: {},\n          closeOnBackdropClick: false,\n          closeOnEsc: false,\n        })\n        .onClose.subscribe((order: any) => order && this.onClosePayment(order));\n    }\n  }\n\n  activate(storagePackage: StoragePackageModel) {\n    const amount: string =\n      this.branchStorage.storagePackage &&\n      storagePackage.packageName > this.branchStorage.storagePackage\n        ? this.upgradeAmount(storagePackage.price)\n        : storagePackage.price.toString();\n\n    const type =\n      this.branchStorage.storagePackage &&\n      storagePackage.packageName > this.branchStorage.storagePackage\n        ? 'upgrade'\n        : 'new';\n\n    this.paymentService.setPaymentDetails('storage', storagePackage.packageName, amount, type);\n\n    this.paymentDetails = this.paymentService.getPaymentDetails();\n    this.dialogService\n      .open(CheckoutComponent, {\n        context: {},\n        closeOnBackdropClick: false,\n        closeOnEsc: false,\n      })\n      .onClose.subscribe((checkout: any) => checkout && this.onCheckout(checkout));\n  }\n\n  convertByteToUnit(bytes: any) {\n    const storage: any = this.storageService.convertByteToUnit(bytes);\n    return storage.value.toFixed(1) + ' ' + storage.unit;\n  }\n\n  calculateStorageSize(storage: any) {\n    const storageInBytes = this.storageService.convertUnitToBytes(storage, 'MB');\n    const storageSizeWithUnit = this.storageService.convertByteToUnit(storageInBytes);\n    return storageSizeWithUnit.value.toFixed(1) + ' ' + storageSizeWithUnit.unit;\n  }\n\n  calculateStorage(branchStorage: BranchStorageModel) {\n    const totalStorage: any = this.storageService.convertByteToUnit(\n      branchStorage.totalStorageAssigned,\n    );\n    const usedStorage: any = this.storageService.convertByteToUnit(branchStorage.totalStorageUsed);\n\n    const availableStorage: any = this.storageService.convertByteToUnit(\n      branchStorage.totalStorageAssigned - branchStorage.totalStorageUsed,\n    );\n\n    this.totalStorage = totalStorage.value.toFixed(1) + ' ' + totalStorage.unit;\n    this.usedStorage = usedStorage.value.toFixed(1) + ' ' + usedStorage.unit;\n    this.availableStorage = availableStorage.value.toFixed(1) + ' ' + availableStorage.unit;\n\n    // tslint:disable-next-line: radix\n    this.usedStorageInPercentage = parseInt(\n      ((branchStorage.totalStorageUsed * 100) / branchStorage.totalStorageAssigned).toFixed(1),\n    );\n  }\n\n  getAmount(amount: any) {\n    amount = parseFloat(amount.toString());\n    return amount.toFixed(2).toString();\n  }\n\n  back() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  private showToastr(position: any, status: any, message: string) {\n    this.toastrService.show(status, message, {\n      position,\n      status,\n    });\n  }\n}\n","import {\n  NbCardModule,\n  NbButtonModule,\n  NbIconModule,\n  NbProgressBarModule,\n  NbTooltipModule,\n} from '@nebular/theme';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StorageRoutingModule } from './storage-routing.module';\nimport { StorageComponent } from './storage.component';\n\n@NgModule({\n  declarations: [StorageComponent],\n  imports: [\n    CommonModule,\n    StorageRoutingModule,\n    NbCardModule,\n    NbButtonModule,\n    NbIconModule,\n    NbProgressBarModule,\n    NbTooltipModule,\n  ],\n})\nexport class StorageModule {}\n"]}